{
    "components": {
        "examples": {},
        "headers": {},
        "parameters": {},
        "requestBodies": {
            "IPostPipeline": {
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/IPostPipeline"
                        }
                    }
                },
                "required": true
            },
            "APIPackage": {
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/APIPackage"
                        }
                    }
                },
                "required": true
            },
            "IPostComposition": {
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/IPostComposition"
                        }
                    }
                },
                "required": true
            },
            "QueryString": {
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/QueryString"
                        }
                    }
                },
                "required": true
            },
            "ICacheOptions": {
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/ICacheOptions"
                        }
                    }
                },
                "required": true
            },
            "LogQuery": {
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/LogQuery"
                        }
                    }
                },
                "required": true
            },
            "APIWebHook": {
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/APIWebHook"
                        }
                    }
                },
                "required": true
            }
        },
        "responses": {},
        "schemas": {
            "ItemSpecType": {
                "enum": [
                    "MasterItemSpec",
                    "ClonedItemSpec"
                ],
                "type": "string"
            },
            "RefType": {
                "type": "string",
                "enum": [
                    "url",
                    "id"
                ]
            },
            "ModalityType": {
                "type": "string",
                "enum": [
                    "overlay",
                    "replace",
                    "preview",
                    "related"
                ]
            },
            "APIModality": {
                "properties": {
                    "ref": {
                        "type": "string"
                    },
                    "refType": {
                        "$ref": "#/components/schemas/RefType"
                    },
                    "type": {
                        "$ref": "#/components/schemas/ModalityType"
                    },
                    "timestamp": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "name": {
                        "type": "string"
                    },
                    "mimetype": {
                        "type": "string"
                    },
                    "stream": {
                        "type": "string",
                        "description": "stream url of modality item"
                    }
                },
                "required": [
                    "ref",
                    "refType",
                    "type",
                    "timestamp"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "APISystemMetadata": {
                "properties": {
                    "system": {
                        "properties": {
                            "modalities": {
                                "items": {
                                    "$ref": "#/components/schemas/APIModality"
                                },
                                "type": "array"
                            },
                            "width": {
                                "type": "number",
                                "format": "double"
                            },
                            "height": {
                                "type": "number",
                                "format": "double"
                            },
                            "originalPath": {
                                "type": "string"
                            },
                            "encoding": {
                                "type": "string"
                            },
                            "size": {
                                "type": "number",
                                "format": "double"
                            },
                            "mimetype": {
                                "type": "string"
                            },
                            "originalname": {
                                "type": "string"
                            }
                        },
                        "required": [
                            "originalPath",
                            "encoding",
                            "size",
                            "mimetype",
                            "originalname"
                        ],
                        "type": "object"
                    }
                },
                "required": [
                    "system"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "APIDatasetFileItem": {
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "url": {
                        "type": "string"
                    },
                    "datasetId": {
                        "type": "string"
                    },
                    "dir": {
                        "type": "string"
                    },
                    "filename": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "type": {
                        "type": "string",
                        "enum": [
                            "file",
                            "dir"
                        ]
                    },
                    "spec": {
                        "$ref": "#/components/schemas/ItemSpecType"
                    },
                    "hidden": {
                        "type": "boolean"
                    },
                    "metadata": {
                        "$ref": "#/components/schemas/APISystemMetadata"
                    },
                    "createdAt": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "dataset": {
                        "type": "string"
                    },
                    "creator": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "signedStream": {
                        "type": "string"
                    },
                    "updatedAt": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "updatedBy": {
                        "type": "string"
                    },
                    "annotationsCount": {
                        "type": "number",
                        "format": "double"
                    },
                    "annotated": {
                        "anyOf": [
                            {
                                "type": "boolean"
                            },
                            {
                                "type": "string",
                                "enum": [
                                    "discarded"
                                ]
                            }
                        ]
                    },
                    "stream": {
                        "type": "string"
                    },
                    "thumbnail": {
                        "type": "string"
                    },
                    "annotations": {
                        "type": "string"
                    },
                    "srcItem": {
                        "type": "string"
                    },
                    "srcDataset": {
                        "type": "string"
                    }
                },
                "required": [
                    "id",
                    "url",
                    "datasetId",
                    "dir",
                    "filename",
                    "name",
                    "type",
                    "spec",
                    "hidden",
                    "metadata",
                    "createdAt",
                    "dataset",
                    "creator",
                    "updatedAt",
                    "updatedBy",
                    "annotationsCount",
                    "annotated",
                    "stream",
                    "thumbnail",
                    "annotations",
                    "srcItem",
                    "srcDataset"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "APIDatasetDirectoryItem": {
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "url": {
                        "type": "string"
                    },
                    "datasetId": {
                        "type": "string"
                    },
                    "dir": {
                        "type": "string"
                    },
                    "filename": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "type": {
                        "type": "string",
                        "enum": [
                            "file",
                            "dir"
                        ]
                    },
                    "spec": {
                        "$ref": "#/components/schemas/ItemSpecType"
                    },
                    "hidden": {
                        "type": "boolean"
                    },
                    "metadata": {
                        "$ref": "#/components/schemas/APISystemMetadata"
                    },
                    "createdAt": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "dataset": {
                        "type": "string"
                    },
                    "creator": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "signedStream": {
                        "type": "string"
                    },
                    "updatedAt": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "updatedBy": {
                        "type": "string"
                    },
                    "items": {
                        "type": "string"
                    },
                    "export": {
                        "properties": {
                            "json": {
                                "type": "string"
                            },
                            "zip": {
                                "anyOf": [
                                    {
                                        "type": "string"
                                    },
                                    {
                                        "properties": {
                                            "chunks": {
                                                "items": {
                                                    "type": "string"
                                                },
                                                "type": "array"
                                            }
                                        },
                                        "required": [
                                            "chunks"
                                        ],
                                        "type": "object"
                                    }
                                ]
                            }
                        },
                        "required": [
                            "json",
                            "zip"
                        ],
                        "type": "object"
                    }
                },
                "required": [
                    "id",
                    "url",
                    "datasetId",
                    "dir",
                    "filename",
                    "name",
                    "type",
                    "spec",
                    "hidden",
                    "metadata",
                    "createdAt",
                    "dataset",
                    "creator",
                    "updatedAt",
                    "updatedBy",
                    "items",
                    "export"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "PartialAPIDatasetItem": {
                "properties": {
                    "filename": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "metadata": {
                        "$ref": "#/components/schemas/APISystemMetadata"
                    }
                },
                "type": "object",
                "additionalProperties": true
            },
            "APIDatasetItemCursor": {
                "description": "For documentation purposes - swagger gen does not handle generics so well...",
                "properties": {
                    "totalItemsCount": {
                        "type": "number",
                        "format": "double"
                    },
                    "items": {
                        "anyOf": [
                            {
                                "items": {
                                    "$ref": "#/components/schemas/APIDatasetFileItem"
                                },
                                "type": "array"
                            },
                            {
                                "items": {
                                    "$ref": "#/components/schemas/APIDatasetDirectoryItem"
                                },
                                "type": "array"
                            }
                        ]
                    },
                    "totalPagesCount": {
                        "type": "number",
                        "format": "double"
                    },
                    "hasNextPage": {
                        "type": "boolean"
                    }
                },
                "required": [
                    "totalItemsCount",
                    "items",
                    "totalPagesCount",
                    "hasNextPage"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "Dictionary": {
                "properties": {},
                "additionalProperties": {},
                "type": "object",
                "description": ""
            },
            "APICommand": {
                "properties": {
                    "id": {
                        "type": "string",
                        "description": ""
                    },
                    "url": {
                        "type": "string",
                        "description": ""
                    },
                    "status": {
                        "type": "string",
                        "description": ""
                    },
                    "createdAt": {
                        "type": "string",
                        "format": "date-time",
                        "description": ""
                    },
                    "updatedAt": {
                        "type": "string",
                        "format": "date-time",
                        "nullable": true,
                        "description": ""
                    },
                    "type": {
                        "type": "string",
                        "description": ""
                    },
                    "error": {
                        "type": "string",
                        "nullable": true,
                        "description": ""
                    },
                    "progress": {
                        "type": "number",
                        "format": "double",
                        "description": ""
                    },
                    "spec": {
                        "$ref": "#/components/schemas/Dictionary"
                    },
                    "report": {
                        "$ref": "#/components/schemas/Dictionary",
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/Dictionary"
                            }
                        ],
                        "nullable": true
                    }
                },
                "required": [
                    "id",
                    "url",
                    "status",
                    "createdAt",
                    "type",
                    "progress",
                    "spec",
                    "id",
                    "url",
                    "status",
                    "createdAt",
                    "type",
                    "progress",
                    "spec",
                    "id",
                    "url",
                    "status",
                    "createdAt",
                    "type",
                    "progress",
                    "spec",
                    "id",
                    "url",
                    "status",
                    "createdAt",
                    "type",
                    "progress",
                    "spec",
                    "id",
                    "url",
                    "status",
                    "createdAt",
                    "type",
                    "progress",
                    "spec",
                    "id",
                    "url",
                    "status",
                    "createdAt",
                    "type",
                    "progress",
                    "spec"
                ],
                "type": "object",
                "additionalProperties": true,
                "description": ""
            },
            "DatasetIndexDrivers": {
                "type": "string",
                "enum": [
                    "mongo",
                    "sql"
                ]
            },
            "CloneDatasetParams": {
                "properties": {
                    "withItemsAnnotations": {
                        "type": "boolean"
                    },
                    "withMetadata": {
                        "type": "boolean"
                    },
                    "stripItemsFolders": {
                        "type": "boolean"
                    },
                    "targetDirectory": {
                        "type": "string"
                    },
                    "targetDatasetId": {
                        "type": "string"
                    },
                    "allowMany": {
                        "type": "boolean"
                    },
                    "newDatasetName": {
                        "type": "string"
                    },
                    "indexDriver": {
                        "$ref": "#/components/schemas/DatasetIndexDrivers",
                        "description": "Cloned dataset will use the specified indexDriver. only super-user can specify this option"
                    },
                    "ignoreSizeLimit": {
                        "type": "boolean",
                        "description": "Clone the dataset event if it has more items then allowed limit. only super-user can specify this option"
                    },
                    "exclusiveSquared": {
                        "type": "boolean",
                        "description": "TO DELETE - Temporary for cloning dataset to S2 beta"
                    }
                },
                "required": [
                    "withItemsAnnotations",
                    "withMetadata"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "ItemCloneRequest": {
                "properties": {
                    "targetDatasetId": {
                        "type": "string",
                        "description": "Target dataset id"
                    },
                    "remoteFileName": {
                        "type": "string",
                        "description": "path at target dataset"
                    },
                    "metadata": {
                        "$ref": "#/components/schemas/Dictionary",
                        "description": "override metadata"
                    },
                    "cloneDatasetParams": {
                        "$ref": "#/components/schemas/CloneDatasetParams",
                        "description": "clone params"
                    },
                    "allowMany": {
                        "type": "boolean",
                        "description": "allow multiple copies of the same source item",
                        "default": "false"
                    }
                },
                "required": [
                    "targetDatasetId",
                    "cloneDatasetParams"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "ItemMergeRequest": {
                "properties": {
                    "sourceItemIds": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "sourceItemIds"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "TaskItemStatus": {
                "properties": {
                    "taskId": {
                        "type": "string"
                    },
                    "assignmentId": {
                        "type": "string"
                    },
                    "status": {
                        "type": "string"
                    },
                    "creator": {
                        "type": "string"
                    },
                    "timestamp": {
                        "type": "string",
                        "format": "date-time"
                    }
                },
                "required": [
                    "taskId",
                    "assignmentId",
                    "status",
                    "creator",
                    "timestamp"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "ItemRefOperation": {
                "enum": [
                    "create",
                    "delete",
                    "create",
                    "delete"
                ],
                "type": "string"
            },
            "ItemRefsUpdateRequest": {
                "properties": {
                    "action": {
                        "$ref": "#/components/schemas/TaskItemStatus"
                    },
                    "operation": {
                        "$ref": "#/components/schemas/ItemRefOperation"
                    },
                    "pipelineId": {
                        "type": "string"
                    },
                    "nodeId": {
                        "type": "string"
                    }
                },
                "required": [
                    "action",
                    "operation"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "ItemRefsUpdateBulkRequest": {
                "properties": {
                    "action": {
                        "$ref": "#/components/schemas/TaskItemStatus"
                    },
                    "operation": {
                        "$ref": "#/components/schemas/ItemRefOperation"
                    },
                    "pipelineId": {
                        "type": "string"
                    },
                    "nodeId": {
                        "type": "string"
                    },
                    "itemIds": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "asynced": {
                        "type": "boolean"
                    }
                },
                "required": [
                    "action",
                    "operation",
                    "itemIds"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "AnnotationType": {
                "enum": [
                    "class",
                    "point",
                    "line",
                    "box",
                    "cube",
                    "segment",
                    "ellipse",
                    "binary",
                    "note",
                    "polyline",
                    "comparison",
                    "recording",
                    "subtitle",
                    "item_description",
                    "text_mark",
                    "pose",
                    "cube_3d",
                    "semantic_3d",
                    "polyline_3d",
                    "pdf_text",
                    "text",
                    "ref_image",
                    "ref_semantic_3d",
                    "class",
                    "point",
                    "line",
                    "box",
                    "cube",
                    "segment",
                    "ellipse",
                    "binary",
                    "note",
                    "polyline",
                    "comparison",
                    "recording",
                    "subtitle",
                    "item_description",
                    "text_mark",
                    "pose",
                    "cube_3d",
                    "semantic_3d",
                    "polyline_3d",
                    "pdf_text",
                    "text",
                    "ref_image",
                    "ref_semantic_3d",
                    "class",
                    "point",
                    "line",
                    "box",
                    "cube",
                    "segment",
                    "ellipse",
                    "binary",
                    "note",
                    "polyline",
                    "comparison",
                    "recording",
                    "subtitle",
                    "item_description",
                    "text_mark",
                    "pose",
                    "cube_3d",
                    "semantic_3d",
                    "polyline_3d",
                    "pdf_text",
                    "text"
                ],
                "type": "string"
            },
            "Point": {
                "properties": {
                    "x": {
                        "type": "number",
                        "format": "double"
                    },
                    "y": {
                        "type": "number",
                        "format": "double"
                    },
                    "z": {
                        "type": "number",
                        "format": "double"
                    }
                },
                "required": [
                    "x",
                    "y"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "APIBoxCoordinates": {
                "items": {},
                "type": "array"
            },
            "NoteMessage": {
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "creator": {
                        "type": "string"
                    },
                    "time": {
                        "type": "number",
                        "format": "double"
                    },
                    "body": {
                        "type": "string"
                    }
                },
                "required": [
                    "id",
                    "creator",
                    "time",
                    "body"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "CoordinatesNote": {
                "properties": {
                    "messages": {
                        "items": {
                            "$ref": "#/components/schemas/NoteMessage"
                        },
                        "type": "array"
                    },
                    "status": {
                        "type": "string"
                    },
                    "createTime": {
                        "type": "number",
                        "format": "double"
                    },
                    "creator": {
                        "type": "string"
                    },
                    "asignee": {
                        "type": "string"
                    }
                },
                "required": [
                    "messages",
                    "status",
                    "createTime",
                    "creator",
                    "asignee"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "APINoteAnnotationCoordinates_V1": {
                "properties": {
                    "box": {
                        "$ref": "#/components/schemas/APIBoxCoordinates"
                    },
                    "note": {
                        "$ref": "#/components/schemas/CoordinatesNote"
                    },
                    "updatedAt": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "updatedBy": {
                        "type": "string"
                    }
                },
                "required": [
                    "note",
                    "updatedAt",
                    "updatedBy"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "PoseCoordinates": {
                "properties": {
                    "templateId": {
                        "type": "string"
                    },
                    "instanceId": {
                        "type": "string"
                    }
                },
                "required": [
                    "templateId",
                    "instanceId"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "PolygonCoordinates_V1": {
                "items": {
                    "items": {
                        "$ref": "#/components/schemas/Point"
                    },
                    "type": "array"
                },
                "type": "array"
            },
            "PolylineCoordinates_V3": {
                "items": {
                    "items": {
                        "$ref": "#/components/schemas/Point"
                    },
                    "type": "array"
                },
                "type": "array"
            },
            "EllipseCoordinates_V1": {
                "properties": {
                    "center": {
                        "$ref": "#/components/schemas/Point"
                    },
                    "rx": {
                        "type": "number",
                        "format": "double"
                    },
                    "ry": {
                        "type": "number",
                        "format": "double"
                    },
                    "angle": {
                        "type": "number",
                        "format": "double"
                    }
                },
                "required": [
                    "center",
                    "rx",
                    "ry"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "CubeCoordinates_V1": {
                "properties": {
                    "front_bl": {
                        "$ref": "#/components/schemas/Point"
                    },
                    "front_br": {
                        "$ref": "#/components/schemas/Point"
                    },
                    "front_tl": {
                        "$ref": "#/components/schemas/Point"
                    },
                    "front_tr": {
                        "$ref": "#/components/schemas/Point"
                    },
                    "back_bl": {
                        "$ref": "#/components/schemas/Point"
                    },
                    "back_br": {
                        "$ref": "#/components/schemas/Point"
                    },
                    "back_tl": {
                        "$ref": "#/components/schemas/Point"
                    },
                    "back_tr": {
                        "$ref": "#/components/schemas/Point"
                    },
                    "angle": {
                        "type": "number",
                        "format": "double"
                    }
                },
                "required": [
                    "front_bl",
                    "front_br",
                    "front_tl",
                    "front_tr",
                    "back_bl",
                    "back_br",
                    "back_tl",
                    "back_tr"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "ItemDescriptionCoordinates": {
                "properties": {
                    "text": {
                        "type": "string"
                    }
                },
                "required": [
                    "text"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "ObjectId": {
                "type": "string",
                "description": "A class representation of the BSON ObjectId type."
            },
            "RefAnnotationsRefType": {
                "enum": [
                    "id",
                    "url"
                ],
                "type": "string"
            },
            "IBaseRefAnnotationCoordinates": {
                "properties": {
                    "ref": {
                        "anyOf": [
                            {
                                "$ref": "#/components/schemas/ObjectId"
                            },
                            {
                                "type": "string"
                            }
                        ]
                    },
                    "refType": {
                        "$ref": "#/components/schemas/RefAnnotationsRefType"
                    },
                    "mimetype": {
                        "type": "string"
                    }
                },
                "required": [
                    "ref",
                    "refType"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "IRefImageAnnotationsType": {
                "allOf": [
                    {
                        "properties": {},
                        "type": "object"
                    },
                    {
                        "$ref": "#/components/schemas/IBaseRefAnnotationCoordinates"
                    }
                ]
            },
            "APIAnnotationCoordinateTypes": {
                "anyOf": [
                    {
                        "$ref": "#/components/schemas/Point"
                    },
                    {
                        "items": {
                            "$ref": "#/components/schemas/Point"
                        },
                        "type": "array"
                    },
                    {
                        "items": {
                            "items": {
                                "$ref": "#/components/schemas/Point"
                            },
                            "type": "array"
                        },
                        "type": "array"
                    },
                    {
                        "$ref": "#/components/schemas/APINoteAnnotationCoordinates_V1"
                    },
                    {
                        "type": "string"
                    },
                    {
                        "$ref": "#/components/schemas/PoseCoordinates"
                    },
                    {
                        "$ref": "#/components/schemas/PolygonCoordinates_V1"
                    },
                    {
                        "$ref": "#/components/schemas/PolylineCoordinates_V3"
                    },
                    {
                        "$ref": "#/components/schemas/EllipseCoordinates_V1"
                    },
                    {
                        "$ref": "#/components/schemas/CubeCoordinates_V1"
                    },
                    {
                        "$ref": "#/components/schemas/APIBoxCoordinates"
                    },
                    {
                        "$ref": "#/components/schemas/ItemDescriptionCoordinates"
                    },
                    {
                        "$ref": "#/components/schemas/IRefImageAnnotationsType"
                    }
                ]
            },
            "LabelSuggestions": {
                "properties": {},
                "type": "object",
                "additionalProperties": {
                    "type": "number",
                    "format": "double"
                }
            },
            "RequestSource": {
                "enum": [
                    "ui",
                    "sdk",
                    "other",
                    "system",
                    "unknown"
                ],
                "type": "string"
            },
            "APIAnnotation": {
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "url": {
                        "type": "string"
                    },
                    "type": {
                        "$ref": "#/components/schemas/AnnotationType"
                    },
                    "label": {
                        "type": "string"
                    },
                    "attributes": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "coordinates": {
                        "$ref": "#/components/schemas/APIAnnotationCoordinateTypes"
                    },
                    "metadata": {
                        "$ref": "#/components/schemas/Dictionary"
                    },
                    "creator": {
                        "type": "string"
                    },
                    "createdAt": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "updatedAt": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "updatedBy": {
                        "type": "string"
                    },
                    "itemId": {
                        "type": "string"
                    },
                    "item": {
                        "type": "string"
                    },
                    "datasetId": {
                        "type": "string"
                    },
                    "dataset": {
                        "type": "string"
                    },
                    "hash": {
                        "type": "string"
                    },
                    "labelSuggestions": {
                        "$ref": "#/components/schemas/LabelSuggestions"
                    },
                    "source": {
                        "$ref": "#/components/schemas/RequestSource"
                    },
                    "description": {
                        "type": "string"
                    },
                    "srcAnnotation": {
                        "type": "string"
                    }
                },
                "required": [
                    "id",
                    "url",
                    "type",
                    "label",
                    "creator",
                    "createdAt",
                    "updatedAt",
                    "updatedBy",
                    "itemId",
                    "item",
                    "datasetId",
                    "dataset",
                    "hash",
                    "labelSuggestions"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "APIMetadata": {
                "properties": {
                    "system": {
                        "$ref": "#/components/schemas/Dictionary",
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/Dictionary"
                            }
                        ],
                        "nullable": true
                    }
                },
                "required": [
                    "system"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "UpdateAnnotationRequest": {
                "properties": {
                    "creator": {
                        "type": "string"
                    },
                    "type": {
                        "$ref": "#/components/schemas/AnnotationType"
                    },
                    "label": {
                        "type": "string"
                    },
                    "coordinates": {},
                    "attributes": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "metadata": {
                        "$ref": "#/components/schemas/APIMetadata"
                    }
                },
                "required": [
                    "creator",
                    "type",
                    "label"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "SetupReport": {
                "properties": {},
                "type": "object"
            },
            "BootstrapSetupOptions": {
                "properties": {
                    "createMongoIndexes": {
                        "type": "boolean"
                    },
                    "createSqlTables": {
                        "type": "boolean"
                    },
                    "createDefaultStorageDrivers": {
                        "type": "boolean"
                    },
                    "setupCloneQueues": {
                        "type": "boolean"
                    }
                },
                "required": [
                    "createMongoIndexes",
                    "createSqlTables",
                    "createDefaultStorageDrivers",
                    "setupCloneQueues"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "APIAnnotationRequest": {
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "creator": {
                        "type": "string"
                    },
                    "type": {
                        "$ref": "#/components/schemas/AnnotationType"
                    },
                    "label": {
                        "type": "string"
                    },
                    "coordinates": {
                        "$ref": "#/components/schemas/APIAnnotationCoordinateTypes"
                    },
                    "attributes": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "metadata": {
                        "$ref": "#/components/schemas/APIMetadata"
                    },
                    "existingChildrenIds": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "source": {
                        "$ref": "#/components/schemas/RequestSource"
                    }
                },
                "type": "object",
                "additionalProperties": true
            },
            "ObjectID": {
                "type": "string",
                "description": "A class representation of the BSON ObjectId type."
            },
            "Partial_APIAnnotation_": {
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "url": {
                        "type": "string"
                    },
                    "type": {
                        "$ref": "#/components/schemas/AnnotationType"
                    },
                    "label": {
                        "type": "string"
                    },
                    "attributes": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "coordinates": {
                        "$ref": "#/components/schemas/APIAnnotationCoordinateTypes"
                    },
                    "metadata": {
                        "$ref": "#/components/schemas/Dictionary"
                    },
                    "creator": {
                        "type": "string"
                    },
                    "createdAt": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "updatedAt": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "updatedBy": {
                        "type": "string"
                    },
                    "itemId": {
                        "type": "string"
                    },
                    "item": {
                        "type": "string"
                    },
                    "datasetId": {
                        "type": "string"
                    },
                    "dataset": {
                        "type": "string"
                    },
                    "hash": {
                        "type": "string"
                    },
                    "labelSuggestions": {
                        "$ref": "#/components/schemas/LabelSuggestions"
                    },
                    "source": {
                        "$ref": "#/components/schemas/RequestSource"
                    },
                    "description": {
                        "type": "string"
                    },
                    "srcAnnotation": {
                        "type": "string"
                    }
                },
                "type": "object",
                "description": "Make all properties in T optional"
            },
            "APIAnnotationEvent": {
                "properties": {
                    "id": {
                        "$ref": "#/components/schemas/ObjectID"
                    },
                    "annotationId": {
                        "$ref": "#/components/schemas/ObjectID"
                    },
                    "user": {
                        "type": "string"
                    },
                    "timestamp": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "changes": {
                        "$ref": "#/components/schemas/Partial_APIAnnotation_"
                    },
                    "deleted": {
                        "anyOf": [
                            {
                                "type": "boolean"
                            },
                            {
                                "type": "string",
                                "enum": [
                                    "discarded"
                                ]
                            }
                        ]
                    }
                },
                "required": [
                    "id",
                    "annotationId",
                    "user",
                    "timestamp"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "Dictionary_APIAnnotationEvent-Array_": {
                "properties": {},
                "type": "object",
                "additionalProperties": {
                    "items": {
                        "$ref": "#/components/schemas/APIAnnotationEvent"
                    },
                    "type": "array"
                }
            },
            "AddItemMode": {
                "enum": [
                    "skip",
                    "overwrite"
                ],
                "type": "string"
            },
            "ExpirationOptions": {
                "properties": {
                    "itemMaxDays": {
                        "type": "number",
                        "format": "double",
                        "description": "Specifies the number of days after which each item becomes expired and should be deleted"
                    }
                },
                "required": [
                    "itemMaxDays"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "IndexDriver": {
                "type": "string",
                "enum": [
                    "v1",
                    "v2"
                ]
            },
            "APIDataset": {
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "url": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "annotated": {
                        "type": "number",
                        "format": "double"
                    },
                    "itemsCount": {
                        "type": "number",
                        "format": "double"
                    },
                    "items": {
                        "type": "string"
                    },
                    "directoryTree": {
                        "type": "string"
                    },
                    "creator": {
                        "type": "string"
                    },
                    "projects": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "metadata": {
                        "$ref": "#/components/schemas/APIMetadata"
                    },
                    "createdAt": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "updatedAt": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "updatedBy": {
                        "type": "string"
                    },
                    "readableType": {
                        "type": "string"
                    },
                    "accessLevel": {
                        "type": "string",
                        "enum": [
                            "private",
                            "project"
                        ]
                    },
                    "driver": {
                        "type": "string"
                    },
                    "readonly": {
                        "type": "boolean"
                    },
                    "error": {},
                    "expirationOptions": {
                        "$ref": "#/components/schemas/ExpirationOptions"
                    },
                    "indexDriver": {
                        "$ref": "#/components/schemas/IndexDriver"
                    },
                    "enableSyncWithCloned": {
                        "type": "boolean"
                    },
                    "srcDataset": {
                        "type": "string"
                    },
                    "annotationsCount": {
                        "type": "number",
                        "format": "double"
                    }
                },
                "required": [
                    "id",
                    "url",
                    "name",
                    "annotated",
                    "itemsCount",
                    "items",
                    "directoryTree",
                    "creator",
                    "projects",
                    "createdAt",
                    "readableType",
                    "accessLevel",
                    "driver",
                    "readonly",
                    "indexDriver",
                    "annotationsCount"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "SystemDatasetType": {
                "enum": [
                    "binaries"
                ],
                "type": "string"
            },
            "DatasetEtlOptions": {
                "properties": {
                    "skipImageEtl": {
                        "type": "boolean"
                    }
                },
                "type": "object"
            },
            "DatasetScope": {
                "enum": [
                    "system"
                ],
                "type": "string"
            },
            "DatasetSystemMetadata": {
                "properties": {
                    "datasetType": {
                        "allOf": [
                            {
                                "type": "string"
                            },
                            {
                                "$ref": "#/components/schemas/SystemDatasetType"
                            }
                        ]
                    },
                    "etlOptions": {
                        "$ref": "#/components/schemas/DatasetEtlOptions"
                    },
                    "scope": {
                        "$ref": "#/components/schemas/DatasetScope"
                    }
                },
                "type": "object",
                "additionalProperties": true
            },
            "Partial_any_": {
                "properties": {
                    "datasetType": {
                        "allOf": [
                            {
                                "type": "string"
                            },
                            {
                                "$ref": "#/components/schemas/SystemDatasetType"
                            }
                        ]
                    },
                    "etlOptions": {
                        "$ref": "#/components/schemas/DatasetEtlOptions"
                    },
                    "scope": {
                        "$ref": "#/components/schemas/DatasetScope"
                    }
                },
                "type": "object",
                "description": "Make all properties in T optional"
            },
            "DatasetMetadata": {
                "properties": {
                    "datasetType": {
                        "allOf": [
                            {
                                "type": "string"
                            },
                            {
                                "$ref": "#/components/schemas/SystemDatasetType"
                            }
                        ]
                    },
                    "etlOptions": {
                        "$ref": "#/components/schemas/DatasetEtlOptions"
                    },
                    "scope": {
                        "$ref": "#/components/schemas/DatasetScope"
                    },
                    "system": {
                        "$ref": "#/components/schemas/DatasetSystemMetadata"
                    }
                },
                "required": [
                    "system"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "CreateDatasetRequest": {
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Dataset name"
                    },
                    "projects": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array",
                        "description": "list of project ids related to the created dataset"
                    },
                    "driver": {
                        "type": "string",
                        "enum": [
                            "mongo",
                            "gcs",
                            "fs",
                            "s3",
                            "azureblob"
                        ],
                        "description": "Driver type of an existing driver or new driver configuration"
                    },
                    "driverId": {
                        "type": "string",
                        "description": "Driver id of an existing external driver"
                    },
                    "accessLevel": {
                        "type": "string",
                        "enum": [
                            "private",
                            "project"
                        ],
                        "description": "Share options, only user or all project members with the right role (default is project)"
                    },
                    "createDefaultRecipe": {
                        "type": "boolean"
                    },
                    "expirationOptions": {
                        "$ref": "#/components/schemas/ExpirationOptions",
                        "description": "Specifies the parameters by which items are marked as expired"
                    },
                    "indexDriver": {
                        "$ref": "#/components/schemas/IndexDriver",
                        "description": "Specifies which index driver should be used"
                    },
                    "metadata": {
                        "$ref": "#/components/schemas/DatasetMetadata"
                    }
                },
                "required": [
                    "name",
                    "projects"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "QueryResource": {
                "enum": [
                    "items",
                    "annotations",
                    "datasets",
                    "tasks",
                    "assignments",
                    "feature_sets",
                    "feature_vectors",
                    "items",
                    "annotations",
                    "datasets",
                    "tasks",
                    "assignments",
                    "feature_sets",
                    "feature_vectors",
                    "models",
                    "metrics",
                    "executions",
                    "services",
                    "settings",
                    "setting"
                ],
                "type": "string"
            },
            "JoinQuery": {
                "properties": {
                    "on": {
                        "properties": {
                            "forigen": {
                                "type": "string"
                            },
                            "local": {
                                "type": "string"
                            },
                            "resource": {
                                "$ref": "#/components/schemas/QueryResource"
                            }
                        },
                        "required": [
                            "forigen",
                            "local",
                            "resource"
                        ],
                        "type": "object"
                    }
                },
                "required": [
                    "on"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "ReferenceQuery": {
                "properties": {
                    "operation": {
                        "type": "string",
                        "enum": [
                            "create",
                            "delete"
                        ]
                    },
                    "refs": {
                        "items": {
                            "properties": {
                                "id": {
                                    "type": "string"
                                },
                                "type": {
                                    "type": "string"
                                }
                            },
                            "required": [
                                "id",
                                "type"
                            ],
                            "type": "object"
                        },
                        "type": "array"
                    },
                    "index": {
                        "type": "number",
                        "format": "double"
                    }
                },
                "required": [
                    "operation",
                    "refs"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "OrderBy": {
                "type": "string",
                "enum": [
                    "ascending",
                    "descending"
                ]
            },
            "SortQuery": {
                "properties": {},
                "type": "object",
                "additionalProperties": {
                    "anyOf": [
                        {
                            "$ref": "#/components/schemas/OrderBy"
                        }
                    ]
                }
            },
            "SelectQuery": {
                "properties": {},
                "type": "object",
                "additionalProperties": {
                    "type": "number",
                    "enum": [
                        0,
                        1
                    ]
                }
            },
            "DQLQuery": {
                "properties": {
                    "filter": {
                        "$ref": "#/components/schemas/Dictionary"
                    },
                    "limit": {
                        "type": "number",
                        "format": "double"
                    },
                    "join": {
                        "$ref": "#/components/schemas/JoinQuery"
                    },
                    "references": {
                        "$ref": "#/components/schemas/ReferenceQuery"
                    },
                    "sort": {
                        "$ref": "#/components/schemas/SortQuery"
                    },
                    "select": {
                        "$ref": "#/components/schemas/SelectQuery"
                    },
                    "update": {
                        "$ref": "#/components/schemas/Dictionary"
                    },
                    "delete": {
                        "type": "boolean"
                    },
                    "user": {
                        "type": "string"
                    },
                    "systemSpace": {
                        "type": "boolean"
                    },
                    "queryEngine": {
                        "type": "string",
                        "enum": [
                            "mongo",
                            "elasticsearch",
                            "sql",
                            "json"
                        ]
                    }
                },
                "required": [
                    "filter"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "CloneDatasetRequest": {
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Dataset name"
                    },
                    "filter": {
                        "$ref": "#/components/schemas/DQLQuery",
                        "description": "Items filter"
                    },
                    "cloneDatasetParams": {
                        "$ref": "#/components/schemas/CloneDatasetParams",
                        "description": "clone params"
                    },
                    "returnCmd": {
                        "type": "boolean",
                        "description": "run as async"
                    },
                    "version": {
                        "type": "number",
                        "format": "double"
                    },
                    "indexDriver": {
                        "$ref": "#/components/schemas/DatasetIndexDrivers"
                    },
                    "allowAnnotationDuplication": {
                        "type": "boolean"
                    }
                },
                "required": [
                    "name",
                    "filter",
                    "cloneDatasetParams"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "MergeDatasetParams": {
                "properties": {
                    "withItemsAnnotations": {
                        "type": "boolean"
                    },
                    "withMetadata": {
                        "type": "boolean"
                    }
                },
                "required": [
                    "withItemsAnnotations",
                    "withMetadata"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "MergeDatasetsRequest": {
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Dataset name"
                    },
                    "datasetsIds": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array",
                        "description": "datasets id's"
                    },
                    "mergeDatasetParams": {
                        "$ref": "#/components/schemas/MergeDatasetParams"
                    }
                },
                "required": [
                    "name",
                    "datasetsIds",
                    "mergeDatasetParams"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "Partial_APIDatasetPayload_": {
                "properties": {
                    "_id": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "creator": {
                        "type": "string"
                    },
                    "projects": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "driver": {
                        "anyOf": [
                            {
                                "$ref": "#/components/schemas/ObjectID"
                            },
                            {
                                "type": "string"
                            }
                        ]
                    },
                    "metadata": {
                        "$ref": "#/components/schemas/APIMetadata"
                    }
                },
                "type": "object",
                "description": "Make all properties in T optional"
            },
            "DatasetDirectoryTree": {
                "properties": {
                    "value": {
                        "$ref": "#/components/schemas/APIDatasetDirectoryItem"
                    },
                    "children": {
                        "items": {
                            "$ref": "#/components/schemas/DatasetDirectoryTree"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "value"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "DQLResourceQuery": {
                "properties": {
                    "filter": {
                        "$ref": "#/components/schemas/Dictionary"
                    },
                    "limit": {
                        "type": "number",
                        "format": "double"
                    },
                    "join": {
                        "$ref": "#/components/schemas/JoinQuery"
                    },
                    "references": {
                        "$ref": "#/components/schemas/ReferenceQuery"
                    },
                    "sort": {
                        "$ref": "#/components/schemas/SortQuery"
                    },
                    "select": {
                        "$ref": "#/components/schemas/SelectQuery"
                    },
                    "update": {
                        "$ref": "#/components/schemas/Dictionary"
                    },
                    "delete": {
                        "type": "boolean"
                    },
                    "user": {
                        "type": "string"
                    },
                    "systemSpace": {
                        "type": "boolean"
                    },
                    "queryEngine": {
                        "type": "string",
                        "enum": [
                            "mongo",
                            "elasticsearch",
                            "sql",
                            "json"
                        ]
                    },
                    "resource": {
                        "$ref": "#/components/schemas/QueryResource"
                    },
                    "skip": {
                        "type": "number",
                        "format": "double"
                    },
                    "datasets": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "projects": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "page": {
                        "type": "number",
                        "format": "double"
                    },
                    "pageSize": {
                        "type": "number",
                        "format": "double"
                    },
                    "collectMetrics": {
                        "type": "boolean"
                    },
                    "countTotal": {
                        "type": "boolean"
                    },
                    "sign": {
                        "properties": {
                            "exp": {
                                "type": "number",
                                "format": "double",
                                "description": "expiration in seconds",
                                "default": "1 hour from now"
                            }
                        },
                        "type": "object"
                    }
                },
                "required": [
                    "filter"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "ExportDatasetOptions": {
                "description": "Export dataset as zip file.\nitems/annotations filters can be specified, only matching results will be included in zip.\nWhen specifying both items & annotations filters - they will be joined.",
                "properties": {
                    "itemsQuery": {
                        "$ref": "#/components/schemas/DQLResourceQuery",
                        "description": "Export only items matching specified query"
                    },
                    "annotationsQuery": {
                        "$ref": "#/components/schemas/DQLResourceQuery",
                        "description": "Export only annotations matching specified query"
                    },
                    "annotations": {
                        "properties": {
                            "filter": {
                                "type": "boolean",
                                "description": "given an export by filter - determine if to filter out annotations",
                                "default": "false (export will filter out items, but not annotations)",
                                "deprecated": true
                            },
                            "convertSemantic": {
                                "type": "boolean",
                                "description": "determine if semantic annotations should exported as png files",
                                "default": "false"
                            },
                            "include": {
                                "type": "boolean",
                                "description": "determine if export should contain annotations",
                                "default": "true"
                            }
                        },
                        "required": [
                            "include"
                        ],
                        "type": "object",
                        "description": "annotations export options"
                    },
                    "exportVersion": {
                        "type": "string",
                        "enum": [
                            "V1",
                            "V2"
                        ],
                        "description": "`V2` - exported items will have original extension in filename, `V1` - no original extension in filenames"
                    }
                },
                "type": "object",
                "additionalProperties": true
            },
            "ClassifyFilteredItems": {
                "properties": {
                    "query": {
                        "properties": {
                            "join": {
                                "$ref": "#/components/schemas/Dictionary"
                            },
                            "filter": {
                                "$ref": "#/components/schemas/Dictionary"
                            }
                        },
                        "required": [
                            "filter"
                        ],
                        "type": "object"
                    },
                    "annotation": {
                        "properties": {
                            "metadata": {
                                "$ref": "#/components/schemas/Dictionary"
                            },
                            "attributes": {
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            "label": {
                                "type": "string"
                            }
                        },
                        "required": [
                            "label"
                        ],
                        "type": "object"
                    }
                },
                "required": [
                    "query",
                    "annotation"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "CursorPage_APIAnnotation-or-APIDataset-or-APIDatasetFileItem-or-APIDatasetDirectoryItem_": {
                "properties": {
                    "totalItemsCount": {
                        "type": "number",
                        "format": "double"
                    },
                    "items": {
                        "items": {
                            "anyOf": [
                                {
                                    "$ref": "#/components/schemas/APIAnnotation"
                                },
                                {
                                    "$ref": "#/components/schemas/APIDataset"
                                },
                                {
                                    "$ref": "#/components/schemas/APIDatasetFileItem"
                                },
                                {
                                    "$ref": "#/components/schemas/APIDatasetDirectoryItem"
                                }
                            ]
                        },
                        "type": "array"
                    },
                    "totalPagesCount": {
                        "type": "number",
                        "format": "double"
                    },
                    "hasNextPage": {
                        "type": "boolean"
                    }
                },
                "required": [
                    "totalItemsCount",
                    "items",
                    "totalPagesCount",
                    "hasNextPage"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "QueryResource.items": {
                "enum": [
                    "items"
                ],
                "type": "string"
            },
            "QueryResource.annotations": {
                "enum": [
                    "annotations"
                ],
                "type": "string"
            },
            "QueryResource.datasets": {
                "enum": [
                    "datasets"
                ],
                "type": "string"
            },
            "FilterQuery": {
                "properties": {
                    "context": {
                        "properties": {
                            "projects": {
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            "datasets": {
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            }
                        },
                        "type": "object"
                    },
                    "page": {
                        "type": "number",
                        "format": "double"
                    },
                    "pageSize": {
                        "type": "number",
                        "format": "double"
                    },
                    "resource": {
                        "anyOf": [
                            {
                                "$ref": "#/components/schemas/QueryResource.items"
                            },
                            {
                                "$ref": "#/components/schemas/QueryResource.annotations"
                            },
                            {
                                "$ref": "#/components/schemas/QueryResource.datasets"
                            }
                        ]
                    },
                    "filter": {
                        "$ref": "#/components/schemas/Dictionary"
                    },
                    "join": {
                        "$ref": "#/components/schemas/JoinQuery"
                    },
                    "sort": {
                        "$ref": "#/components/schemas/Dictionary"
                    },
                    "update": {
                        "$ref": "#/components/schemas/Dictionary"
                    },
                    "delete": {
                        "type": "boolean"
                    },
                    "select": {
                        "$ref": "#/components/schemas/Dictionary"
                    },
                    "limit": {
                        "type": "number",
                        "format": "double"
                    }
                },
                "required": [
                    "context",
                    "page",
                    "resource",
                    "filter"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "UpdateQuery": {
                "properties": {
                    "context": {
                        "properties": {
                            "projects": {
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            "datasets": {
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            }
                        },
                        "type": "object"
                    },
                    "page": {
                        "type": "number",
                        "format": "double"
                    },
                    "pageSize": {
                        "type": "number",
                        "format": "double"
                    },
                    "resource": {
                        "anyOf": [
                            {
                                "$ref": "#/components/schemas/QueryResource.items"
                            },
                            {
                                "$ref": "#/components/schemas/QueryResource.annotations"
                            },
                            {
                                "$ref": "#/components/schemas/QueryResource.datasets"
                            }
                        ]
                    },
                    "filter": {
                        "$ref": "#/components/schemas/Dictionary"
                    },
                    "join": {
                        "$ref": "#/components/schemas/JoinQuery"
                    },
                    "sort": {
                        "$ref": "#/components/schemas/Dictionary"
                    },
                    "update": {
                        "$ref": "#/components/schemas/Dictionary"
                    },
                    "delete": {
                        "type": "boolean"
                    },
                    "select": {
                        "$ref": "#/components/schemas/Dictionary"
                    },
                    "limit": {
                        "type": "number",
                        "format": "double"
                    },
                    "systemSpace": {
                        "type": "boolean"
                    }
                },
                "required": [
                    "context",
                    "page",
                    "resource",
                    "filter",
                    "update",
                    "systemSpace"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "DeleteQuery": {
                "properties": {
                    "context": {
                        "properties": {
                            "projects": {
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            "datasets": {
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            }
                        },
                        "type": "object"
                    },
                    "page": {
                        "type": "number",
                        "format": "double"
                    },
                    "pageSize": {
                        "type": "number",
                        "format": "double"
                    },
                    "resource": {
                        "anyOf": [
                            {
                                "$ref": "#/components/schemas/QueryResource.items"
                            },
                            {
                                "$ref": "#/components/schemas/QueryResource.annotations"
                            },
                            {
                                "$ref": "#/components/schemas/QueryResource.datasets"
                            }
                        ]
                    },
                    "filter": {
                        "$ref": "#/components/schemas/Dictionary"
                    },
                    "join": {
                        "$ref": "#/components/schemas/JoinQuery"
                    },
                    "sort": {
                        "$ref": "#/components/schemas/Dictionary"
                    },
                    "update": {
                        "$ref": "#/components/schemas/Dictionary"
                    },
                    "delete": {
                        "type": "boolean"
                    },
                    "select": {
                        "$ref": "#/components/schemas/Dictionary"
                    },
                    "limit": {
                        "type": "number",
                        "format": "double"
                    }
                },
                "required": [
                    "context",
                    "page",
                    "resource",
                    "filter",
                    "delete"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "RestoreAnnotationsRequest": {
                "properties": {
                    "annotations": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "annotations"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "ImportItemRequest": {
                "properties": {
                    "filename": {
                        "type": "string"
                    },
                    "storageId": {
                        "type": "string"
                    },
                    "size": {
                        "type": "number",
                        "format": "double"
                    }
                },
                "required": [
                    "filename",
                    "storageId"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "ResourceReference": {
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "type": {
                        "type": "string"
                    },
                    "metadata": {
                        "allOf": [
                            {
                                "properties": {
                                    "creator": {
                                        "type": "string"
                                    },
                                    "timestamp": {
                                        "type": "string",
                                        "format": "date-time"
                                    },
                                    "status": {
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            },
                            {
                                "$ref": "#/components/schemas/Partial_any_"
                            }
                        ]
                    }
                },
                "required": [
                    "id",
                    "type"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "ItemLink": {
                "properties": {
                    "type": {
                        "type": "string"
                    },
                    "itemId": {
                        "type": "string"
                    },
                    "frame": {
                        "type": "number",
                        "format": "double"
                    },
                    "time": {
                        "type": "number",
                        "format": "double"
                    }
                },
                "required": [
                    "type",
                    "itemId",
                    "frame",
                    "time"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "Modality": {
                "properties": {
                    "ref": {
                        "type": "string"
                    },
                    "refType": {
                        "$ref": "#/components/schemas/RefType"
                    },
                    "type": {
                        "$ref": "#/components/schemas/ModalityType"
                    },
                    "timestamp": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "name": {
                        "type": "string"
                    },
                    "mimetype": {
                        "type": "string"
                    }
                },
                "required": [
                    "ref",
                    "refType",
                    "type",
                    "timestamp"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "ItemSystemMetadata": {
                "properties": {
                    "datasetType": {
                        "allOf": [
                            {
                                "type": "string"
                            },
                            {
                                "$ref": "#/components/schemas/SystemDatasetType"
                            }
                        ]
                    },
                    "etlOptions": {
                        "$ref": "#/components/schemas/DatasetEtlOptions"
                    },
                    "scope": {
                        "$ref": "#/components/schemas/DatasetScope"
                    },
                    "originalname": {
                        "type": "string",
                        "description": "Original name of the item (usually the name of the file on the device it was uploaded from)"
                    },
                    "mimetype": {
                        "type": "string"
                    },
                    "size": {
                        "type": "number",
                        "format": "double"
                    },
                    "encoding": {
                        "type": "string"
                    },
                    "taskStatusLog": {
                        "items": {
                            "properties": {
                                "action": {
                                    "$ref": "#/components/schemas/ItemRefOperation"
                                },
                                "status": {
                                    "$ref": "#/components/schemas/TaskItemStatus"
                                }
                            },
                            "required": [
                                "action",
                                "status"
                            ],
                            "type": "object"
                        },
                        "type": "array"
                    },
                    "refs": {
                        "items": {
                            "$ref": "#/components/schemas/ResourceReference"
                        },
                        "type": "array",
                        "description": "References to other resources (i.e tasks, assignments, etc...)"
                    },
                    "isBinary": {
                        "type": "boolean",
                        "description": "Determines if item content is textual of binary"
                    },
                    "thumbnailId": {
                        "type": "string",
                        "description": "Thumbnail item id"
                    },
                    "thumbnailAnnotationsId": {
                        "type": "string",
                        "description": "Thumbnail (with annotations embedded) item id"
                    },
                    "itemLinks": {
                        "items": {
                            "$ref": "#/components/schemas/ItemLink"
                        },
                        "type": "array"
                    },
                    "modalities": {
                        "items": {
                            "$ref": "#/components/schemas/Modality"
                        },
                        "type": "array"
                    },
                    "systemDatasetType": {
                        "$ref": "#/components/schemas/SystemDatasetType",
                        "description": "Determines if item belongs to a platform system dataset, specifies which type of system dataset"
                    }
                },
                "required": [
                    "originalname",
                    "mimetype",
                    "size",
                    "encoding",
                    "isBinary"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "ItemMetadata": {
                "properties": {
                    "datasetType": {
                        "allOf": [
                            {
                                "type": "string"
                            },
                            {
                                "$ref": "#/components/schemas/SystemDatasetType"
                            }
                        ]
                    },
                    "etlOptions": {
                        "$ref": "#/components/schemas/DatasetEtlOptions"
                    },
                    "scope": {
                        "$ref": "#/components/schemas/DatasetScope"
                    },
                    "system": {
                        "$ref": "#/components/schemas/ItemSystemMetadata"
                    }
                },
                "required": [
                    "system"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "ItemAnnotatedStatus": {
                "type": "boolean"
            },
            "ItemRevision": {
                "properties": {
                    "version": {
                        "type": "number",
                        "format": "double"
                    },
                    "metadata": {
                        "$ref": "#/components/schemas/ItemMetadata"
                    },
                    "storageId": {
                        "type": "string"
                    }
                },
                "required": [
                    "version",
                    "metadata",
                    "storageId"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "MasterItemSpec": {
                "properties": {
                    "type": {
                        "$ref": "#/components/schemas/ItemSpecType"
                    }
                },
                "required": [
                    "type"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "ClonedItemSpec": {
                "properties": {
                    "type": {
                        "$ref": "#/components/schemas/ItemSpecType"
                    },
                    "masterDatasetItemId": {
                        "$ref": "#/components/schemas/ObjectID"
                    },
                    "parentDatasetItemId": {
                        "$ref": "#/components/schemas/ObjectID"
                    },
                    "datasetDriver": {
                        "anyOf": [
                            {
                                "$ref": "#/components/schemas/ObjectID"
                            },
                            {
                                "type": "string"
                            }
                        ]
                    },
                    "parentDatasetId": {
                        "anyOf": [
                            {
                                "$ref": "#/components/schemas/ObjectID"
                            },
                            {
                                "type": "string"
                            }
                        ]
                    }
                },
                "required": [
                    "type",
                    "masterDatasetItemId",
                    "parentDatasetItemId",
                    "datasetDriver",
                    "parentDatasetId"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "Context": {
                "properties": {
                    "org": {
                        "type": "string",
                        "nullable": true
                    },
                    "project": {
                        "type": "string",
                        "nullable": true
                    },
                    "creator": {
                        "type": "string"
                    },
                    "createdAt": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "updatedAt": {
                        "type": "string",
                        "format": "date-time"
                    }
                },
                "required": [
                    "creator",
                    "createdAt",
                    "updatedAt",
                    "creator",
                    "createdAt",
                    "updatedAt"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "ItemContext": {
                "properties": {
                    "org": {
                        "type": "string"
                    },
                    "project": {
                        "type": "string"
                    },
                    "creator": {
                        "type": "string"
                    },
                    "createdAt": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "updatedAt": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "dataset": {
                        "type": "string"
                    }
                },
                "required": [
                    "creator",
                    "createdAt",
                    "updatedAt",
                    "project",
                    "dataset"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "AuthZBlock_ItemContext_": {
                "properties": {
                    "scope": {
                        "type": "string"
                    },
                    "context": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/Context"
                            },
                            {
                                "$ref": "#/components/schemas/ItemContext"
                            }
                        ]
                    },
                    "access": {
                        "items": {},
                        "type": "array"
                    }
                },
                "required": [
                    "context"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "DatasetItem": {
                "properties": {
                    "_id": {
                        "$ref": "#/components/schemas/ObjectID"
                    },
                    "createdAt": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "datasetId": {
                        "type": "string"
                    },
                    "storageId": {
                        "type": "string"
                    },
                    "dir": {
                        "type": "string"
                    },
                    "filename": {
                        "type": "string"
                    },
                    "filename_collated": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "type": {
                        "type": "string",
                        "enum": [
                            "file",
                            "dir"
                        ]
                    },
                    "hidden": {
                        "type": "boolean"
                    },
                    "metadata": {
                        "$ref": "#/components/schemas/ItemMetadata"
                    },
                    "annotated": {
                        "$ref": "#/components/schemas/ItemAnnotatedStatus"
                    },
                    "revisions": {
                        "items": {
                            "$ref": "#/components/schemas/ItemRevision"
                        },
                        "type": "array"
                    },
                    "spec": {
                        "anyOf": [
                            {
                                "$ref": "#/components/schemas/MasterItemSpec"
                            },
                            {
                                "$ref": "#/components/schemas/ClonedItemSpec"
                            }
                        ]
                    },
                    "annotationsCount": {
                        "type": "number",
                        "format": "double"
                    },
                    "discardedCount": {
                        "type": "number",
                        "format": "double",
                        "deprecated": true
                    },
                    "authz": {
                        "$ref": "#/components/schemas/AuthZBlock_ItemContext_"
                    },
                    "creator": {
                        "type": "string"
                    },
                    "version": {
                        "type": "number",
                        "format": "double",
                        "description": "item version - monotonic, integer, increased every item update"
                    },
                    "updatedAt": {
                        "type": "string",
                        "format": "date-time",
                        "description": "\"updatedAt\" is a timestamp indicating the most recent modification date of an item.\n doesn\u2019t get updated on counter inc."
                    },
                    "updatedBy": {
                        "type": "string",
                        "description": "\"updatedBy\" refers to the identifier of the user who made the most recent update to an item.\n doesn\u2019t get updated on counter inc"
                    },
                    "description": {
                        "type": "string",
                        "description": "Item description - free text field"
                    },
                    "described": {
                        "type": "boolean",
                        "description": "Flags if the item has a description - here for mongo search and indexing purposes"
                    }
                },
                "required": [
                    "_id",
                    "createdAt",
                    "datasetId",
                    "storageId",
                    "dir",
                    "filename",
                    "filename_collated",
                    "name",
                    "type",
                    "hidden",
                    "metadata",
                    "annotated",
                    "spec",
                    "annotationsCount",
                    "discardedCount",
                    "authz",
                    "creator",
                    "version",
                    "updatedAt",
                    "updatedBy"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "SizeDistribution": {
                "properties": {},
                "type": "object",
                "additionalProperties": {
                    "type": "number",
                    "format": "double"
                }
            },
            "AnnotationType.BOX": {
                "enum": [
                    "box"
                ],
                "type": "string"
            },
            "AnnotationType.CLASS": {
                "enum": [
                    "class"
                ],
                "type": "string"
            },
            "AnnotationType.BINARY": {
                "enum": [
                    "binary"
                ],
                "type": "string"
            },
            "GenerateDatasetOptions": {
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "config id - used to identify a specific dataset generator output"
                    },
                    "topics": {
                        "properties": {
                            "annotations": {
                                "type": "string"
                            },
                            "items": {
                                "type": "string"
                            }
                        },
                        "required": [
                            "annotations",
                            "items"
                        ],
                        "type": "object",
                        "description": "when specified - will be used for topic names, regardless of any conventions"
                    },
                    "itemsCount": {
                        "type": "number",
                        "format": "double",
                        "description": "number of items in generated dataset"
                    },
                    "dirsCount": {
                        "type": "number",
                        "format": "double"
                    },
                    "maxDirDepth": {
                        "type": "number",
                        "format": "double"
                    },
                    "metadata": {
                        "properties": {
                            "sizeDistribution": {
                                "$ref": "#/components/schemas/SizeDistribution",
                                "description": "the dataset item size distribution"
                            },
                            "searchable": {
                                "type": "number",
                                "format": "double",
                                "description": "amount of metadata keys that will become searchable metadata keys"
                            },
                            "nulls": {
                                "type": "number",
                                "format": "double",
                                "description": "percent of the metadata values that will be removed from the generated items\nkey selection is random"
                            },
                            "valuesDistribution": {
                                "items": {
                                    "type": "number",
                                    "format": "double"
                                },
                                "type": "array",
                                "description": "list of numbers 0-1\neach number correlates to a key in the keys array\n1 means ALL items will have the same value for the corresponding key\n0 means NO items will have the same value for the corresponding key"
                            },
                            "minBytes": {
                                "type": "number",
                                "format": "double",
                                "description": "when specified - JSON size will be inflated into the specified size"
                            }
                        },
                        "required": [
                            "searchable",
                            "valuesDistribution"
                        ],
                        "type": "object"
                    },
                    "annotations": {
                        "properties": {
                            "metadata": {
                                "properties": {
                                    "sizeDistribution": {
                                        "$ref": "#/components/schemas/SizeDistribution",
                                        "description": "the dataset item size distribution"
                                    }
                                },
                                "type": "object"
                            },
                            "labels": {
                                "type": "number",
                                "format": "double",
                                "description": "number of distinct labels in dataset"
                            },
                            "countPerItem": {
                                "type": "number",
                                "format": "double",
                                "description": "how many annotations per item"
                            },
                            "types": {
                                "items": {
                                    "anyOf": [
                                        {
                                            "$ref": "#/components/schemas/AnnotationType.BOX"
                                        },
                                        {
                                            "$ref": "#/components/schemas/AnnotationType.CLASS"
                                        },
                                        {
                                            "$ref": "#/components/schemas/AnnotationType.BINARY"
                                        }
                                    ]
                                },
                                "type": "array",
                                "description": "which annotation types should be generated"
                            }
                        },
                        "required": [
                            "labels",
                            "countPerItem",
                            "types"
                        ],
                        "type": "object"
                    },
                },
                "required": [
                    "id",
                    "itemsCount",
                    "dirsCount",
                    "maxDirDepth",
                    "metadata"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "GenerationStrategyType": {
                "enum": [
                    "sequentially",
                    "parallel"
                ],
                "type": "string"
            },
            "Pick_StartInput_any_.maxBytes-or-maxMessages_": {
                "properties": {
                    "maxBytes": {
                        "type": "number",
                        "format": "double",
                        "description": "limits number of messages in a batch by its size"
                    },
                    "maxMessages": {
                        "type": "number",
                        "format": "double",
                        "description": "determines how many messages will be processed at once",
                        "default": "Infinity"
                    }
                },
                "type": "object",
                "description": "From T, pick a set of properties whose keys are in the union K"
            },
            "GeneratedDatasetTypes": {
                "enum": [
                    "simple1",
                    "simple2",
                    "simple3",
                    "simple4",
                    "simple5",
                    "manyKeys1",
                    "manyKeys2",
                    "manyKeys3",
                    "bigJSON1",
                    "bigJSON2",
                    "M_1",
                    "M_1_NO_COMP",
                    "M_2",
                    "M_4",
                    "M_6",
                    "M_10",
                    "M_25",
                    "M_5_PRODUCTION_DIST",
                    "M_25_PRODUCTION_DIST"
                ],
                "type": "string"
            },
            "Record_string.Pick_GenerateDatasetCommand._id-or-status-or-error__": {
                "properties": {},
                "type": "object",
                "description": "Construct a type with a set of properties K of type T"
            },
            "Awaited_ReturnType_typeofgenerateDatasets__": {
                "$ref": "#/components/schemas/Record_string.Pick_GenerateDatasetCommand._id-or-status-or-error__",
                "description": "Recursively unwraps the \"awaited type\" of a type. Non-promise \"thenables\" should resolve to `never`. This emulates the behavior of `await`."
            },
            "OneByOneLatencyBenchmarkMode": {
                "properties": {
                    "type": {
                        "type": "string",
                        "enum": [
                            "oneByOneLatency"
                        ],
                        "nullable": false
                    },
                    "count": {
                        "type": "number",
                        "format": "double",
                        "description": "number of times to execute each query test case"
                    }
                },
                "required": [
                    "type",
                    "count"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "ProfilingBenchmarkMode": {
                "properties": {
                    "type": {
                        "type": "string",
                        "enum": [
                            "profiling"
                        ],
                        "nullable": false,
                        "description": "command will execute query profile for each test case"
                    }
                },
                "required": [
                    "type"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "ConcurrencyBenchmarkMode": {
                "properties": {
                    "type": {
                        "type": "string",
                        "enum": [
                            "concurrency"
                        ],
                        "nullable": false
                    },
                    "concurrency": {
                        "type": "number",
                        "format": "double",
                        "description": "max number of concurrent queries"
                    },
                    "total": {
                        "type": "number",
                        "format": "double",
                        "description": "total number of queries to execute"
                    }
                },
                "required": [
                    "type",
                    "concurrency",
                    "total"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "BenchmarkMode": {
                "anyOf": [
                    {
                        "$ref": "#/components/schemas/OneByOneLatencyBenchmarkMode"
                    },
                    {
                        "$ref": "#/components/schemas/ProfilingBenchmarkMode"
                    },
                    {
                        "$ref": "#/components/schemas/ConcurrencyBenchmarkMode"
                    }
                ]
            },
            "QueryTestCases": {
                "enum": [
                    "baseLine",
                    "oneTerm",
                    "fiveTerms",
                    "tenTerms",
                    "twentyTerms",
                    "oneTermSortingOneCustomField",
                    "oneTermSortingTwoCustomFields",
                    "oneTermSortingThreeCustomFields",
                    "oneTermSortingOneIndexedField",
                    "fiveTermSortingOneIndexedField",
                    "FiveTermsJoinOneTerm",
                    "FiveTermsJoinTwoTerms",
                    "FiveTermsJoinThreeTerms"
                ],
                "type": "string"
            },
            "IndexingStrategyType": {
                "enum": [
                    "SeekableLZ4",
                    "indexed",
                    "SeekableJSON"
                ],
                "type": "string"
            },
            "ITermConfiguration": {
                "properties": {
                    "key": {
                        "type": "string"
                    },
                    "value": {},
                    "valueDistribution": {
                        "type": "number",
                        "format": "double"
                    }
                },
                "required": [
                    "key",
                    "value",
                    "valueDistribution"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "Pick_QueryGeneratorInput.avoidDbCache-or-selectIdsOnly-or-joinTerms-or-pageSize_": {
                "properties": {
                    "avoidDbCache": {
                        "type": "boolean",
                        "description": "When true - an arbitrary `$or` term will be added to the query to avoid DB cache",
                        "default": "true"
                    },
                    "selectIdsOnly": {
                        "type": "boolean",
                        "description": "Execute the same queries, but only return the ids of the items"
                    },
                    "joinTerms": {
                        "items": {
                            "$ref": "#/components/schemas/ITermConfiguration"
                        },
                        "type": "array"
                    },
                    "pageSize": {
                        "type": "number",
                        "format": "double",
                        "description": "Determines page size to use for the generated queries",
                        "default": "1000"
                    }
                },
                "type": "object",
                "description": "From T, pick a set of properties whose keys are in the union K"
            },
            "InferDatasetSchemaMode": {
                "enum": [
                    "report",
                    "update"
                ],
                "type": "string"
            },
            "DatasetType": {
                "enum": [
                    0,
                    1,
                    2
                ],
                "type": "number"
            },
            "DatasetContext": {
                "properties": {
                    "org": {
                        "type": "string"
                    },
                    "project": {
                        "type": "string"
                    },
                    "creator": {
                        "type": "string"
                    },
                    "createdAt": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "updatedAt": {
                        "type": "string",
                        "format": "date-time"
                    }
                },
                "required": [
                    "creator",
                    "createdAt",
                    "updatedAt",
                    "project"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "AuthZBlock_DatasetContext_": {
                "properties": {
                    "scope": {
                        "type": "string"
                    },
                    "context": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/Context"
                            },
                            {
                                "$ref": "#/components/schemas/DatasetContext"
                            }
                        ]
                    },
                    "access": {
                        "items": {},
                        "type": "array"
                    }
                },
                "required": [
                    "context"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "AllowedTypes": {
                "type": "string",
                "enum": [
                    "string",
                    "number",
                    "boolean"
                ]
            },
            "SchemaEntry": {
                "properties": {
                    "type": {
                        "$ref": "#/components/schemas/AllowedTypes"
                    }
                },
                "required": [
                    "type"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "SchemaMap": {
                "properties": {
                    "keys": {
                        "properties": {},
                        "additionalProperties": {
                            "$ref": "#/components/schemas/SchemaEntry"
                        },
                        "type": "object"
                    },
                    "version": {
                        "type": "number",
                        "format": "double"
                    }
                },
                "required": [
                    "keys",
                    "version"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "DatasetSchemaMap": {
                "properties": {
                    "items": {
                        "$ref": "#/components/schemas/SchemaMap"
                    }
                },
                "required": [
                    "items"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "ItemMetadataSchema": {
                "properties": {
                    "datasetId": {
                        "type": "string"
                    }
                },
                "required": [
                    "datasetId"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "Partial_Dataset_": {
                "properties": {
                    "_id": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "creator": {
                        "type": "string"
                    },
                    "projects": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "driver": {
                        "anyOf": [
                            {
                                "$ref": "#/components/schemas/ObjectID"
                            },
                            {
                                "type": "string"
                            }
                        ]
                    },
                    "metadata": {
                        "$ref": "#/components/schemas/DatasetMetadata"
                    },
                    "type": {
                        "$ref": "#/components/schemas/DatasetType"
                    },
                    "readableType": {
                        "type": "string"
                    },
                    "createdAt": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "updatedAt": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "updatedBy": {
                        "type": "string"
                    },
                    "accessLevel": {
                        "type": "string",
                        "enum": [
                            "private",
                            "project"
                        ]
                    },
                    "itemsCount": {
                        "type": "number",
                        "format": "double",
                        "description": "Count all 'file' type items in dataset"
                    },
                    "annotatedCount": {
                        "type": "number",
                        "format": "double",
                        "description": "Count all items that has annotations in the dataset"
                    },
                    "annotationsCount": {
                        "type": "number",
                        "format": "double",
                        "description": "Count the number of annotations In the dataset"
                    },
                    "_indexed": {
                        "type": "boolean",
                        "description": "Determines if this dataset is indexed to elasticsearch"
                    },
                    "_markForDeletion": {
                        "type": "boolean",
                        "description": "Determines if this dataset is marked for deletion"
                    },
                    "readonly": {
                        "type": "boolean",
                        "description": "Determines if this dataset is in readonly mode and cannot be modified"
                    },
                    "expirationOptions": {
                        "$ref": "#/components/schemas/ExpirationOptions",
                        "description": "Specifies the parameters by which items are marked as expired"
                    },
                    "authz": {
                        "$ref": "#/components/schemas/AuthZBlock_DatasetContext_"
                    },
                    "_syncStatus": {
                        "type": "string",
                        "enum": [
                            "failed"
                        ],
                        "nullable": false,
                        "description": "determines status of S2 sync for this dataset"
                    },
                    "indexDriver": {
                        "$ref": "#/components/schemas/DatasetIndexDrivers",
                        "description": "determines which index driver is used for this datasets"
                    },
                    "enableSyncWithCloned": {
                        "type": "boolean",
                        "description": "Flag that determines if it is allowed to sync the specified dataset if it is"
                    },
                    "_schema": {
                        "$ref": "#/components/schemas/DatasetSchemaMap"
                    },
                    "schema": {
                        "$ref": "#/components/schemas/ItemMetadataSchema"
                    }
                },
                "type": "object",
                "description": "Make all properties in T optional"
            },
            "InferDatasetSchemaSpec": {
                "properties": {
                    "mode": {
                        "$ref": "#/components/schemas/InferDatasetSchemaMode"
                    },
                    "indexDriver": {
                        "$ref": "#/components/schemas/DatasetIndexDrivers"
                    },
                    "batchSize": {
                        "type": "number",
                        "format": "double",
                        "description": "how many items will be included in each batch",
                        "default": "1K"
                    },
                    "filter": {
                        "$ref": "#/components/schemas/Partial_Dataset_",
                        "description": "Dataset filter - pattern for query"
                    },
                    "datasetId": {
                        "type": "string"
                    },
                    "migrateCommandId": {
                        "$ref": "#/components/schemas/ObjectId",
                        "description": "MigrateDatasetIndexDriver CommandId"
                    }
                },
                "required": [
                    "mode",
                    "indexDriver",
                    "batchSize",
                    "datasetId"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "DriverType": {
                "type": "string",
                "enum": [
                    "mongo",
                    "gcs",
                    "s3",
                    "noop",
                    "fs",
                    "azureblob",
                    "invalid",
                    "azureDatalakeGen2"
                ],
                "nullable": false
            },
            "APIDriverConfiguration": {
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "type": {
                        "$ref": "#/components/schemas/DriverType"
                    },
                    "creator": {
                        "type": "string"
                    },
                    "createdAt": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "name": {
                        "type": "string"
                    },
                    "projectId": {
                        "type": "string"
                    }
                },
                "required": [
                    "id",
                    "type",
                    "creator",
                    "createdAt",
                    "name",
                    "projectId"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "S3IntegrationConfig": {
                "properties": {
                    "key": {
                        "type": "string"
                    },
                    "secret": {
                        "type": "string"
                    }
                },
                "required": [
                    "key",
                    "secret"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "GcsIntegrationConfig": {
                "properties": {
                    "privateKey": {}
                },
                "required": [
                    "privateKey"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "AzureBlobIntegrationConfig": {
                "properties": {
                    "accountName": {
                        "type": "string"
                    },
                    "clientId": {
                        "type": "string"
                    },
                    "tenantId": {
                        "type": "string"
                    },
                    "clientSecret": {
                        "type": "string"
                    }
                },
                "required": [
                    "accountName",
                    "clientId",
                    "tenantId",
                    "clientSecret"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "MetaData": {
                "properties": {
                    "system": {
                        "properties": {
                            "projectId": {
                                "type": "string"
                            }
                        },
                        "required": [
                            "projectId"
                        ],
                        "type": "object"
                    }
                },
                "required": [
                    "system"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "IntegrationType": {
                "enum": [
                    "mongo",
                    "gcs",
                    "s3",
                    "azureblob",
                    "fs",
                    "aws-sts",
                    "aws-cross",
                    "gcp-cross",
                    "key_value",
                    "private-registry",
                    "mongo",
                    "gcs",
                    "s3",
                    "azureblob",
                    "fs",
                    "aws-sts",
                    "aws-cross",
                    "gcp-cross",
                    "key_value",
                    "private-registry"
                ],
                "type": "string"
            },
            "EnvUserPasswordAuthentication": {
                "description": "Represents a User/Password Authentication mechanism",
                "properties": {
                    "username": {
                        "type": "string"
                    },
                    "password": {
                        "type": "string"
                    }
                },
                "required": [
                    "username",
                    "password"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "KeyFileAuthentication": {
                "description": "Represents an ssh key file Authentication mechanism",
                "properties": {
                    "filepath": {
                        "type": "string"
                    }
                },
                "required": [
                    "filepath"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "DriverContext": {
                "properties": {
                    "org": {
                        "type": "string"
                    },
                    "project": {
                        "type": "string"
                    },
                    "creator": {
                        "type": "string"
                    },
                    "createdAt": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "updatedAt": {
                        "type": "string",
                        "format": "date-time"
                    }
                },
                "required": [
                    "creator",
                    "createdAt",
                    "updatedAt",
                    "project"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "AuthZBlock_DriverContext_": {
                "properties": {
                    "scope": {
                        "type": "string"
                    },
                    "context": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/Context"
                            },
                            {
                                "$ref": "#/components/schemas/DriverContext"
                            }
                        ]
                    },
                    "access": {
                        "items": {},
                        "type": "array"
                    }
                },
                "required": [
                    "context"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "S3DriverPayload": {
                "properties": {
                    "type": {
                        "$ref": "#/components/schemas/DriverType"
                    },
                    "creator": {
                        "type": "string"
                    },
                    "authentication": {
                        "anyOf": [
                            {
                                "$ref": "#/components/schemas/EnvUserPasswordAuthentication"
                            },
                            {
                                "$ref": "#/components/schemas/KeyFileAuthentication"
                            }
                        ]
                    },
                    "_id": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "$ref": "#/components/schemas/ObjectID"
                            }
                        ]
                    },
                    "createdAt": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "name": {
                        "type": "string"
                    },
                    "authz": {
                        "$ref": "#/components/schemas/AuthZBlock_DriverContext_"
                    },
                    "metadata": {
                        "$ref": "#/components/schemas/MetaData"
                    },
                    "integrationId": {
                        "type": "string"
                    },
                    "integrationType": {
                        "$ref": "#/components/schemas/IntegrationType"
                    },
                    "allowExternalDelete": {
                        "type": "boolean"
                    },
                    "allowExternalModification": {
                        "type": "boolean"
                    },
                    "region": {
                        "type": "string"
                    },
                    "bucketName": {
                        "type": "string"
                    },
                    "path": {
                        "type": "string"
                    },
                    "storageClass": {
                        "type": "string"
                    }
                },
                "required": [
                    "type",
                    "creator",
                    "_id",
                    "createdAt",
                    "name",
                    "authz",
                    "metadata",
                    "integrationId",
                    "integrationType",
                    "allowExternalDelete",
                    "allowExternalModification"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "GcsDriverPayload": {
                "properties": {
                    "type": {
                        "$ref": "#/components/schemas/DriverType"
                    },
                    "creator": {
                        "type": "string"
                    },
                    "authentication": {
                        "anyOf": [
                            {
                                "$ref": "#/components/schemas/EnvUserPasswordAuthentication"
                            },
                            {
                                "$ref": "#/components/schemas/KeyFileAuthentication"
                            }
                        ]
                    },
                    "_id": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "$ref": "#/components/schemas/ObjectID"
                            }
                        ]
                    },
                    "createdAt": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "name": {
                        "type": "string"
                    },
                    "authz": {
                        "$ref": "#/components/schemas/AuthZBlock_DriverContext_"
                    },
                    "metadata": {
                        "$ref": "#/components/schemas/MetaData"
                    },
                    "integrationId": {
                        "type": "string"
                    },
                    "integrationType": {
                        "$ref": "#/components/schemas/IntegrationType"
                    },
                    "allowExternalDelete": {
                        "type": "boolean"
                    },
                    "allowExternalModification": {
                        "type": "boolean"
                    },
                    "bucket": {
                        "type": "string"
                    }
                },
                "required": [
                    "type",
                    "creator",
                    "_id",
                    "createdAt",
                    "name",
                    "authz",
                    "metadata",
                    "integrationId",
                    "integrationType",
                    "allowExternalDelete",
                    "allowExternalModification",
                    "bucket"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "AzureBlobDriverPayload": {
                "properties": {
                    "type": {
                        "$ref": "#/components/schemas/DriverType"
                    },
                    "creator": {
                        "type": "string"
                    },
                    "authentication": {
                        "anyOf": [
                            {
                                "$ref": "#/components/schemas/EnvUserPasswordAuthentication"
                            },
                            {
                                "$ref": "#/components/schemas/KeyFileAuthentication"
                            }
                        ]
                    },
                    "_id": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "$ref": "#/components/schemas/ObjectID"
                            }
                        ]
                    },
                    "createdAt": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "name": {
                        "type": "string"
                    },
                    "authz": {
                        "$ref": "#/components/schemas/AuthZBlock_DriverContext_"
                    },
                    "metadata": {
                        "$ref": "#/components/schemas/MetaData"
                    },
                    "integrationId": {
                        "type": "string"
                    },
                    "integrationType": {
                        "$ref": "#/components/schemas/IntegrationType"
                    },
                    "allowExternalDelete": {
                        "type": "boolean"
                    },
                    "allowExternalModification": {
                        "type": "boolean"
                    },
                    "containerName": {
                        "type": "string"
                    },
                    "path": {
                        "type": "string"
                    }
                },
                "required": [
                    "type",
                    "creator",
                    "_id",
                    "createdAt",
                    "name",
                    "authz",
                    "metadata",
                    "integrationId",
                    "integrationType",
                    "allowExternalDelete",
                    "allowExternalModification"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "Pick_FilesystemDriverConfiguration.mountPath_": {
                "properties": {
                    "mountPath": {
                        "type": "string"
                    }
                },
                "required": [
                    "mountPath"
                ],
                "type": "object",
                "description": "From T, pick a set of properties whose keys are in the union K"
            },
            "FSDriverPayload": {
                "$ref": "#/components/schemas/Pick_FilesystemDriverConfiguration.mountPath_"
            },
            "DriverPayload": {
                "properties": {
                    "type": {
                        "type": "string",
                        "enum": [
                            "mongo",
                            "gcs",
                            "s3",
                            "fs",
                            "azureblob"
                        ]
                    },
                    "creator": {
                        "type": "string"
                    },
                    "integrationId": {
                        "type": "string"
                    },
                    "integrationConfig": {
                        "anyOf": [
                            {
                                "$ref": "#/components/schemas/S3IntegrationConfig"
                            },
                            {
                                "$ref": "#/components/schemas/GcsIntegrationConfig"
                            },
                            {
                                "$ref": "#/components/schemas/AzureBlobIntegrationConfig"
                            }
                        ]
                    },
                    "metadata": {
                        "$ref": "#/components/schemas/MetaData"
                    },
                    "name": {
                        "type": "string"
                    },
                    "payload": {
                        "anyOf": [
                            {
                                "$ref": "#/components/schemas/S3DriverPayload"
                            },
                            {
                                "$ref": "#/components/schemas/GcsDriverPayload"
                            },
                            {
                                "$ref": "#/components/schemas/AzureBlobDriverPayload"
                            },
                            {
                                "$ref": "#/components/schemas/FSDriverPayload"
                            }
                        ]
                    }
                },
                "required": [
                    "type",
                    "creator",
                    "metadata",
                    "name",
                    "payload"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "Partial_S3DriverPayload_": {
                "properties": {
                    "region": {
                        "type": "string"
                    },
                    "bucketName": {
                        "type": "string"
                    },
                    "path": {
                        "type": "string"
                    },
                    "storageClass": {
                        "type": "string"
                    },
                    "metadata": {
                        "$ref": "#/components/schemas/MetaData"
                    },
                    "integrationId": {
                        "type": "string"
                    },
                    "integrationType": {
                        "$ref": "#/components/schemas/IntegrationType"
                    },
                    "allowExternalDelete": {
                        "type": "boolean"
                    },
                    "allowExternalModification": {
                        "type": "boolean"
                    },
                    "type": {
                        "$ref": "#/components/schemas/DriverType"
                    },
                    "creator": {
                        "type": "string"
                    },
                    "authentication": {
                        "anyOf": [
                            {
                                "$ref": "#/components/schemas/EnvUserPasswordAuthentication"
                            },
                            {
                                "$ref": "#/components/schemas/KeyFileAuthentication"
                            }
                        ]
                    },
                    "_id": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "$ref": "#/components/schemas/ObjectID"
                            }
                        ]
                    },
                    "createdAt": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "name": {
                        "type": "string"
                    },
                    "authz": {
                        "$ref": "#/components/schemas/AuthZBlock_DriverContext_"
                    }
                },
                "type": "object",
                "description": "Make all properties in T optional"
            },
            "Partial_GcsDriverPayload_": {
                "properties": {
                    "bucket": {
                        "type": "string"
                    },
                    "metadata": {
                        "$ref": "#/components/schemas/MetaData"
                    },
                    "integrationId": {
                        "type": "string"
                    },
                    "integrationType": {
                        "$ref": "#/components/schemas/IntegrationType"
                    },
                    "allowExternalDelete": {
                        "type": "boolean"
                    },
                    "allowExternalModification": {
                        "type": "boolean"
                    },
                    "type": {
                        "$ref": "#/components/schemas/DriverType"
                    },
                    "creator": {
                        "type": "string"
                    },
                    "authentication": {
                        "anyOf": [
                            {
                                "$ref": "#/components/schemas/EnvUserPasswordAuthentication"
                            },
                            {
                                "$ref": "#/components/schemas/KeyFileAuthentication"
                            }
                        ]
                    },
                    "_id": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "$ref": "#/components/schemas/ObjectID"
                            }
                        ]
                    },
                    "createdAt": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "name": {
                        "type": "string"
                    },
                    "authz": {
                        "$ref": "#/components/schemas/AuthZBlock_DriverContext_"
                    }
                },
                "type": "object",
                "description": "Make all properties in T optional"
            },
            "Partial_AzureBlobDriverPayload_": {
                "properties": {
                    "containerName": {
                        "type": "string"
                    },
                    "path": {
                        "type": "string"
                    },
                    "metadata": {
                        "$ref": "#/components/schemas/MetaData"
                    },
                    "integrationId": {
                        "type": "string"
                    },
                    "integrationType": {
                        "$ref": "#/components/schemas/IntegrationType"
                    },
                    "allowExternalDelete": {
                        "type": "boolean"
                    },
                    "allowExternalModification": {
                        "type": "boolean"
                    },
                    "type": {
                        "$ref": "#/components/schemas/DriverType"
                    },
                    "creator": {
                        "type": "string"
                    },
                    "authentication": {
                        "anyOf": [
                            {
                                "$ref": "#/components/schemas/EnvUserPasswordAuthentication"
                            },
                            {
                                "$ref": "#/components/schemas/KeyFileAuthentication"
                            }
                        ]
                    },
                    "_id": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "$ref": "#/components/schemas/ObjectID"
                            }
                        ]
                    },
                    "createdAt": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "name": {
                        "type": "string"
                    },
                    "authz": {
                        "$ref": "#/components/schemas/AuthZBlock_DriverContext_"
                    }
                },
                "type": "object",
                "description": "Make all properties in T optional"
            },
            "PartialDriverPayload": {
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "payload": {
                        "anyOf": [
                            {
                                "$ref": "#/components/schemas/Partial_S3DriverPayload_"
                            },
                            {
                                "$ref": "#/components/schemas/Partial_GcsDriverPayload_"
                            },
                            {
                                "$ref": "#/components/schemas/Partial_AzureBlobDriverPayload_"
                            }
                        ]
                    }
                },
                "required": [
                    "payload"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "APIFeatureSet": {
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "url": {
                        "type": "string"
                    },
                    "type": {
                        "type": "string"
                    },
                    "entityType": {
                        "type": "string"
                    },
                    "org": {
                        "type": "string"
                    },
                    "project": {
                        "type": "string"
                    },
                    "creator": {
                        "type": "string"
                    },
                    "createdAt": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "updatedAt": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "updatedBy": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "tags": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array",
                        "description": "tags - optional tag per feature  - matched by index"
                    },
                    "size": {
                        "type": "number",
                        "format": "double",
                        "description": "size - set size"
                    },
                    "authz": {
                        "$ref": "#/components/schemas/AuthZBlock_DatasetContext_"
                    }
                },
                "required": [
                    "id",
                    "url",
                    "type",
                    "entityType",
                    "project",
                    "creator",
                    "createdAt",
                    "updatedAt",
                    "updatedBy",
                    "name",
                    "tags",
                    "size",
                    "authz"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "CursorPage_APIFeatureSet_": {
                "properties": {
                    "totalItemsCount": {
                        "type": "number",
                        "format": "double"
                    },
                    "items": {
                        "items": {
                            "$ref": "#/components/schemas/APIFeatureSet"
                        },
                        "type": "array"
                    },
                    "totalPagesCount": {
                        "type": "number",
                        "format": "double"
                    },
                    "hasNextPage": {
                        "type": "boolean"
                    }
                },
                "required": [
                    "totalItemsCount",
                    "items",
                    "totalPagesCount",
                    "hasNextPage"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "FeatureSet": {
                "properties": {
                    "_id": {
                        "type": "string"
                    },
                    "type": {
                        "type": "string",
                        "description": "type - string of the feature type: 2d, 3d, modelFC, TSNE,PCA,FFT"
                    },
                    "entityType": {
                        "type": "string"
                    },
                    "project": {
                        "type": "string"
                    },
                    "org": {
                        "type": "string"
                    },
                    "creator": {
                        "type": "string"
                    },
                    "createdAt": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "updatedAt": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "updatedBy": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "tags": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array",
                        "description": "tags - optional tag per feature  - matched by index"
                    },
                    "size": {
                        "type": "number",
                        "format": "double",
                        "description": "size - set size"
                    },
                    "authz": {
                        "$ref": "#/components/schemas/AuthZBlock_DatasetContext_"
                    }
                },
                "required": [
                    "_id",
                    "type",
                    "entityType",
                    "project",
                    "creator",
                    "createdAt",
                    "updatedBy",
                    "name",
                    "tags",
                    "size",
                    "authz"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "PartialFeatureSet": {
                "properties": {
                    "_id": {
                        "type": "string"
                    },
                    "type": {
                        "type": "string"
                    },
                    "entityType": {
                        "type": "string"
                    },
                    "project": {
                        "type": "string"
                    },
                    "org": {
                        "type": "string"
                    },
                    "creator": {
                        "type": "string"
                    },
                    "createdAt": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "updatedAt": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "updatedBy": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "tags": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "size": {
                        "type": "number",
                        "format": "double"
                    },
                    "authz": {
                        "$ref": "#/components/schemas/AuthZBlock_DatasetContext_"
                    }
                },
                "type": "object",
                "additionalProperties": true
            },
            "APIFeatureVector": {
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "url": {
                        "type": "string"
                    },
                    "entityId": {
                        "type": "string"
                    },
                    "org": {
                        "type": "string"
                    },
                    "project": {
                        "type": "string"
                    },
                    "creator": {
                        "type": "string"
                    },
                    "createdAt": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "value": {
                        "items": {
                            "type": "number",
                            "format": "double"
                        },
                        "type": "array",
                        "description": "value - actual vector - immutable"
                    },
                    "featureSetId": {
                        "type": "string",
                        "description": "featureSetId - ref to a featureSet this vector is a part of"
                    },
                    "version": {
                        "type": "string",
                        "description": "version - version of the feature set generator"
                    },
                    "parentId": {
                        "type": "string",
                        "description": "parentId - used when FeatureVector is a subFeature"
                    },
                    "authz": {
                        "$ref": "#/components/schemas/AuthZBlock_DatasetContext_"
                    }
                },
                "required": [
                    "id",
                    "url",
                    "entityId",
                    "project",
                    "creator",
                    "createdAt",
                    "value",
                    "featureSetId",
                    "version",
                    "authz"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "FeatureVector": {
                "properties": {
                    "_id": {
                        "type": "string"
                    },
                    "entityId": {
                        "type": "string"
                    },
                    "createdAt": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "project": {
                        "type": "string"
                    },
                    "org": {
                        "type": "string"
                    },
                    "creator": {
                        "type": "string"
                    },
                    "authz": {
                        "$ref": "#/components/schemas/AuthZBlock_DatasetContext_"
                    },
                    "value_blob": {
                        "type": "string",
                        "format": "byte",
                        "description": "value_blob\n\nvector as saved to the db\nwill not be fetched from the database\nnot readable or usable"
                    },
                    "value": {
                        "items": {
                            "type": "number",
                            "format": "double"
                        },
                        "type": "array",
                        "description": "value - actual readable vector"
                    },
                    "featureSetId": {
                        "type": "string",
                        "description": "featureSetId - ref to a featureSet this vector is a part of"
                    },
                    "version": {
                        "type": "string",
                        "description": "version - version of the feature set generator"
                    },
                    "parentId": {
                        "type": "string",
                        "description": "parentId - used when FeatureVector is a subFeature"
                    }
                },
                "required": [
                    "_id",
                    "entityId",
                    "createdAt",
                    "project",
                    "creator",
                    "authz",
                    "value",
                    "featureSetId",
                    "version"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "CursorPage_APIFeatureVector_": {
                "properties": {
                    "totalItemsCount": {
                        "type": "number",
                        "format": "double"
                    },
                    "items": {
                        "items": {
                            "$ref": "#/components/schemas/APIFeatureVector"
                        },
                        "type": "array"
                    },
                    "totalPagesCount": {
                        "type": "number",
                        "format": "double"
                    },
                    "hasNextPage": {
                        "type": "boolean"
                    }
                },
                "required": [
                    "totalItemsCount",
                    "items",
                    "totalPagesCount",
                    "hasNextPage"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "ProjectStorageRequest": {
                "properties": {
                    "projectId": {
                        "type": "string"
                    },
                    "external": {
                        "type": "boolean"
                    }
                },
                "required": [
                    "projectId",
                    "external"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "EditItemsStressInput": {
                "properties": {
                    "datasetName": {
                        "type": "string",
                        "description": "name of the dataset to be used"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "projectId to be used for testing"
                    },
                    "itemsPerClient": {
                        "type": "number",
                        "format": "double",
                        "description": "number of items each client will edit",
                        "default": "1000, in composeStressTestEditItems()"
                    },
                    "clients": {
                        "type": "number",
                        "format": "double",
                        "description": "number of concurrent clients",
                        "default": "1, in in composeStressTestEditItems()"
                    }
                },
                "required": [
                    "datasetName",
                    "projectId",
                    "itemsPerClient",
                    "clients"
                ],
                "type": "object",
                "description": "Type for composing EditItem object"
            },
            "IUploadItemsBenchmarkInput": {
                "properties": {
                    "indexDrivers": {
                        "items": {
                            "$ref": "#/components/schemas/IndexDriver"
                        },
                        "type": "array"
                    },
                    "itemsCount": {
                        "type": "number",
                        "format": "double"
                    }
                },
                "required": [
                    "indexDrivers",
                    "itemsCount"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "BenchmarkIngestionStrategyType": {
                "enum": [
                    "sequentially",
                    "batch"
                ],
                "type": "string"
            },
            "GeneratedDatasetConfig": {
                "properties": {
                    "seed": {
                        "$ref": "#/components/schemas/DatasetItem"
                    },
                    "options": {
                        "$ref": "#/components/schemas/GenerateDatasetOptions"
                    }
                },
                "required": [
                    "seed",
                    "options"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "AddItemsOperationInput": {
                "properties": {
                    "consumerOptions": {
                        "$ref": "#/components/schemas/Pick_StartInput_any_.maxBytes-or-maxMessages_"
                    },
                    "generatedDatasetConfig": {
                        "$ref": "#/components/schemas/GeneratedDatasetConfig"
                    },
                    "consumerAmount": {
                        "type": "number",
                        "format": "double"
                    },
                    "readAnnotations": {
                        "type": "boolean"
                    },
                    "projectId": {
                        "type": "string"
                    },
                    "datasetId": {
                        "type": "string"
                    },
                    "strategy": {
                        "$ref": "#/components/schemas/BenchmarkIngestionStrategyType"
                    },
                    "concurrency": {
                        "type": "number",
                        "format": "double"
                    },
                    "generatedDatasetType": {
                        "$ref": "#/components/schemas/GeneratedDatasetTypes"
                    }
                },
                "required": [
                    "generatedDatasetConfig",
                    "strategy"
                ],
                "type": "object"
            },
            "AddAnnotationsOperationInput": {
                "properties": {
                    "consumerOptions": {
                        "$ref": "#/components/schemas/Pick_StartInput_any_.maxBytes-or-maxMessages_"
                    },
                    "strategy": {
                        "$ref": "#/components/schemas/BenchmarkIngestionStrategyType"
                    },
                    "concurrency": {
                        "type": "number",
                        "format": "double"
                    },
                    "generatedDatasetConfig": {
                        "$ref": "#/components/schemas/GeneratedDatasetConfig"
                    },
                    "consumerAmount": {
                        "type": "number",
                        "format": "double"
                    },
                    "datasetId": {
                        "type": "string"
                    },
                    "generatedDatasetType": {
                        "$ref": "#/components/schemas/GeneratedDatasetTypes"
                    }
                },
                "required": [
                    "generatedDatasetConfig",
                    "datasetId"
                ],
                "type": "object"
            },
            "UploadItemsBenchmarkCommandV2Input": {
                "properties": {
                    "indexDriver": {
                        "$ref": "#/components/schemas/IndexDriver"
                    },
                    "itemsCount": {
                        "type": "number",
                        "format": "double"
                    },
                    "batchSize": {
                        "type": "number",
                        "format": "double"
                    },
                    "concurrency": {
                        "type": "number",
                        "format": "double"
                    },
                    "gateUrl": {
                        "type": "string"
                    }
                },
                "required": [
                    "indexDriver",
                    "itemsCount",
                    "batchSize",
                    "concurrency"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "APIOntologyV2": {
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "url": {
                        "type": "string"
                    },
                    "createdAt": {
                        "type": "string",
                        "format": "date-time",
                        "nullable": true
                    },
                    "updatedAt": {
                        "type": "string",
                        "format": "date-time",
                        "nullable": true
                    },
                    "updatedBy": {
                        "type": "string",
                        "nullable": true
                    },
                    "creator": {
                        "type": "string"
                    },
                    "metadata": {
                        "$ref": "#/components/schemas/APIMetadata"
                    },
                    "v2": {
                        "type": "boolean",
                        "enum": [
                            true
                        ],
                        "nullable": false
                    }
                },
                "required": [
                    "id",
                    "url",
                    "creator",
                    "metadata",
                    "v2"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "APILabelTree": {
                "properties": {
                    "children": {
                        "items": {
                            "$ref": "#/components/schemas/APILabelTree"
                        },
                        "type": "array",
                        "nullable": true
                    },
                    "value": {
                        "$ref": "#/components/schemas/APILabel"
                    }
                },
                "required": [
                    "value"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "APILabelDisplayImage": {
                "properties": {
                    "itemId": {
                        "type": "string"
                    },
                    "datasetId": {
                        "type": "string"
                    }
                },
                "required": [
                    "itemId",
                    "datasetId"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "APILabelDisplayData": {
                "properties": {
                    "displayImage": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/APILabelDisplayImage"
                            }
                        ],
                        "nullable": true
                    }
                },
                "type": "object",
                "additionalProperties": true
            },
            "APILabel": {
                "properties": {
                    "tag": {
                        "type": "string"
                    },
                    "displayLabel": {
                        "type": "string"
                    },
                    "color": {
                        "type": "string"
                    },
                    "attributes": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array",
                        "nullable": true
                    },
                    "displayData": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/APILabelDisplayData"
                            }
                        ],
                        "nullable": true
                    }
                },
                "required": [
                    "tag",
                    "displayLabel",
                    "color"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "APIOntology": {
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "url": {
                        "type": "string"
                    },
                    "createdAt": {
                        "type": "string",
                        "format": "date-time",
                        "nullable": true
                    },
                    "updatedAt": {
                        "type": "string",
                        "format": "date-time",
                        "nullable": true
                    },
                    "updatedBy": {
                        "type": "string",
                        "nullable": true
                    },
                    "creator": {
                        "type": "string"
                    },
                    "title": {
                        "type": "string"
                    },
                    "roots": {
                        "items": {
                            "$ref": "#/components/schemas/APILabelTree"
                        },
                        "type": "array"
                    },
                    "metadata": {
                        "$ref": "#/components/schemas/APIMetadata"
                    },
                    "attributes": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array",
                        "nullable": true
                    },
                    "errors": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array",
                        "nullable": true
                    }
                },
                "required": [
                    "id",
                    "url",
                    "creator",
                    "title",
                    "roots",
                    "metadata"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "CreateOntologyPayloadV2": {
                "properties": {
                    "roots": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array",
                        "nullable": true
                    },
                    "attributes": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array",
                        "nullable": true
                    },
                    "structureIds": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array",
                        "nullable": true
                    },
                    "projectIds": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "system": {
                        "type": "boolean",
                        "nullable": true
                    },
                    "v2": {
                        "type": "boolean",
                        "nullable": true
                    }
                },
                "required": [
                    "projectIds"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "LabelDisplayImage": {
                "properties": {
                    "itemId": {
                        "type": "string"
                    },
                    "datasetId": {
                        "type": "string"
                    }
                },
                "required": [
                    "itemId",
                    "datasetId"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "LabelDisplayData": {
                "properties": {
                    "displayImage": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/LabelDisplayImage"
                            }
                        ],
                        "nullable": true
                    }
                },
                "type": "object",
                "additionalProperties": true
            },
            "CreateLabelPayloadV1": {
                "properties": {
                    "tag": {
                        "type": "string"
                    },
                    "displayLabel": {
                        "type": "string",
                        "nullable": true
                    },
                    "color": {
                        "type": "string",
                        "nullable": true
                    },
                    "attributes": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array",
                        "nullable": true
                    },
                    "displayData": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/LabelDisplayData"
                            }
                        ],
                        "nullable": true
                    }
                },
                "required": [
                    "tag"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "CreateLabelPayloadTreeV1": {
                "properties": {
                    "value": {
                        "$ref": "#/components/schemas/CreateLabelPayloadV1"
                    },
                    "children": {
                        "items": {
                            "$ref": "#/components/schemas/CreateLabelPayloadTreeV1"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "value",
                    "children"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "CreateOntologyPayload": {
                "properties": {
                    "roots": {
                        "items": {
                            "$ref": "#/components/schemas/CreateLabelPayloadTreeV1"
                        },
                        "type": "array",
                        "nullable": true
                    },
                    "title": {
                        "type": "string",
                        "nullable": true
                    },
                    "projectIds": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array",
                        "nullable": true
                    },
                    "system": {
                        "type": "boolean",
                        "nullable": true
                    },
                    "attributes": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array",
                        "nullable": true
                    }
                },
                "type": "object",
                "additionalProperties": true
            },
            "APIOntologyConfigurationV2": {
                "properties": {
                    "creator": {
                        "type": "string",
                        "nullable": true
                    },
                    "metadata": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/APIMetadata"
                            }
                        ],
                        "nullable": true
                    }
                },
                "type": "object",
                "additionalProperties": true
            },
            "CreateLabelPayload": {
                "properties": {
                    "tag": {
                        "type": "string"
                    },
                    "displayLabel": {
                        "type": "string",
                        "nullable": true
                    },
                    "color": {
                        "type": "string",
                        "nullable": true
                    },
                    "attributes": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array",
                        "nullable": true
                    }
                },
                "required": [
                    "tag"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "AddLabelsNodePayload": {
                "properties": {
                    "labelsNode": {
                        "items": {
                            "$ref": "#/components/schemas/CreateLabelPayload"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "labelsNode"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "UpdateLabelsNodePayload": {
                "properties": {
                    "labelsNode": {
                        "items": {
                            "$ref": "#/components/schemas/CreateLabelPayload"
                        },
                        "type": "array"
                    },
                    "upsert": {
                        "type": "boolean",
                        "nullable": true
                    }
                },
                "required": [
                    "labelsNode"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "AttributeType": {
                "enum": [
                    "options",
                    "boolean",
                    "range",
                    "freeText",
                    "number"
                ],
                "type": "string"
            },
            "AttributeCreationPayload": {
                "properties": {
                    "title": {
                        "type": "string"
                    },
                    "key": {
                        "type": "string"
                    },
                    "scope": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array",
                        "nullable": true
                    },
                    "optional": {
                        "type": "boolean",
                        "nullable": true
                    },
                    "multi": {
                        "type": "boolean",
                        "nullable": true
                    },
                    "type": {
                        "$ref": "#/components/schemas/AttributeType"
                    },
                    "values": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array",
                        "nullable": true
                    },
                    "range": {
                        "nullable": true
                    }
                },
                "required": [
                    "title",
                    "key",
                    "type"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "UpsertRequestPayload_AttributeCreationPayload_": {
                "properties": {
                    "items": {
                        "items": {
                            "$ref": "#/components/schemas/AttributeCreationPayload"
                        },
                        "type": "array"
                    },
                    "upsert": {
                        "type": "boolean",
                        "nullable": true
                    }
                },
                "required": [
                    "items"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "APIOntologyCursor": {
                "properties": {
                    "totalItemsCount": {
                        "type": "number",
                        "format": "double"
                    },
                    "items": {
                        "items": {
                            "anyOf": [
                                {
                                    "$ref": "#/components/schemas/APIOntologyV2"
                                },
                                {
                                    "$ref": "#/components/schemas/APIOntology"
                                }
                            ]
                        },
                        "type": "array"
                    },
                    "totalPagesCount": {
                        "type": "number",
                        "format": "double"
                    },
                    "hasNextPage": {
                        "type": "boolean"
                    }
                },
                "required": [
                    "totalItemsCount",
                    "items",
                    "totalPagesCount",
                    "hasNextPage"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "APILabelScopeV2": {
                "properties": {
                    "subtrees": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "labelIds": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "subtrees",
                    "labelIds"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "APIToolOptionsV2": {
                "properties": {
                    "labelScope": {
                        "$ref": "#/components/schemas/APILabelScopeV2"
                    },
                    "options": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/Dictionary"
                            }
                        ],
                        "nullable": true
                    }
                },
                "required": [
                    "labelScope"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "APIRecipeV2": {
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "url": {
                        "type": "string"
                    },
                    "createdAt": {
                        "type": "string",
                        "format": "date-time",
                        "nullable": true
                    },
                    "updatedAt": {
                        "type": "string",
                        "format": "date-time",
                        "nullable": true
                    },
                    "updatedBy": {
                        "type": "string",
                        "nullable": true
                    },
                    "creator": {
                        "type": "string"
                    },
                    "title": {
                        "type": "string"
                    },
                    "projectIds": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "ontology": {
                        "properties": {
                            "structureIds": {
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            "attributes": {
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            "labelScope": {
                                "allOf": [
                                    {
                                        "$ref": "#/components/schemas/APILabelScopeV2"
                                    }
                                ],
                                "nullable": true
                            },
                            "ontologyId": {
                                "type": "string"
                            }
                        },
                        "required": [
                            "structureIds",
                            "attributes",
                            "ontologyId"
                        ],
                        "type": "object"
                    },
                    "labelScript": {
                        "type": "string"
                    },
                    "toolsSettings": {
                        "properties": {},
                        "additionalProperties": {
                            "$ref": "#/components/schemas/APIToolOptionsV2"
                        },
                        "type": "object"
                    },
                    "uiSettings": {
                        "$ref": "#/components/schemas/Dictionary"
                    },
                    "metadata": {
                        "$ref": "#/components/schemas/APIMetadata"
                    },
                    "v2": {
                        "type": "boolean",
                        "enum": [
                            true
                        ],
                        "nullable": false
                    }
                },
                "required": [
                    "id",
                    "url",
                    "creator",
                    "title",
                    "projectIds",
                    "ontology",
                    "labelScript",
                    "toolsSettings",
                    "uiSettings",
                    "metadata",
                    "v2"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "APIRecipe": {
                "properties": {},
                "type": "object",
                "additionalProperties": true
            },
            "LabelScopeV2": {
                "properties": {
                    "subtrees": {
                        "items": {
                            "$ref": "#/components/schemas/ObjectID"
                        },
                        "type": "array"
                    },
                    "labelIds": {
                        "items": {
                            "$ref": "#/components/schemas/ObjectID"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "subtrees",
                    "labelIds"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "Pick_RecipeV2.title-or-projectIds-or-ontology_": {
                "properties": {
                    "title": {
                        "type": "string"
                    },
                    "projectIds": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "ontology": {
                        "properties": {
                            "structureIds": {
                                "items": {
                                    "$ref": "#/components/schemas/ObjectID"
                                },
                                "type": "array"
                            },
                            "attributes": {
                                "items": {
                                    "$ref": "#/components/schemas/ObjectID"
                                },
                                "type": "array"
                            },
                            "labelScope": {
                                "allOf": [
                                    {
                                        "$ref": "#/components/schemas/LabelScopeV2"
                                    }
                                ],
                                "nullable": true
                            },
                            "ontologyId": {
                                "$ref": "#/components/schemas/ObjectID"
                            }
                        },
                        "required": [
                            "structureIds",
                            "attributes",
                            "ontologyId"
                        ],
                        "type": "object"
                    }
                },
                "required": [
                    "title",
                    "projectIds",
                    "ontology"
                ],
                "type": "object",
                "description": "From T, pick a set of properties whose keys are in the union K"
            },
            "ToolOptions": {
                "properties": {
                    "labelScope": {
                        "$ref": "#/components/schemas/LabelScopeV2"
                    },
                    "options": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/Dictionary"
                            }
                        ],
                        "nullable": true
                    }
                },
                "required": [
                    "labelScope"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "Metadata": {
                "properties": {
                    "system": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/Dictionary"
                            }
                        ],
                        "nullable": true
                    }
                },
                "type": "object",
                "additionalProperties": true
            },
            "RecipeV2Context": {
                "properties": {
                    "org": {
                        "type": "string",
                        "nullable": true
                    },
                    "project": {
                        "type": "string",
                        "nullable": true
                    },
                    "creator": {
                        "type": "string"
                    },
                    "createdAt": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "updatedAt": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "ontology": {
                        "type": "string"
                    }
                },
                "required": [
                    "creator",
                    "createdAt",
                    "updatedAt",
                    "ontology"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "AuthZBlock_RecipeV2Context_": {
                "properties": {
                    "scope": {
                        "type": "string",
                        "nullable": true
                    },
                    "context": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/Context"
                            },
                            {
                                "$ref": "#/components/schemas/RecipeV2Context"
                            }
                        ]
                    },
                    "access": {
                        "items": {},
                        "type": "array",
                        "nullable": true
                    }
                },
                "required": [
                    "context"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "Partial_RecipeV2_": {
                "properties": {
                    "_id": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/ObjectID"
                            }
                        ],
                        "nullable": true
                    },
                    "creator": {
                        "type": "string",
                        "nullable": true
                    },
                    "title": {
                        "type": "string",
                        "nullable": true
                    },
                    "projectIds": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array",
                        "nullable": true
                    },
                    "ontology": {
                        "properties": {
                            "structureIds": {
                                "items": {
                                    "$ref": "#/components/schemas/ObjectID"
                                },
                                "type": "array"
                            },
                            "attributes": {
                                "items": {
                                    "$ref": "#/components/schemas/ObjectID"
                                },
                                "type": "array"
                            },
                            "labelScope": {
                                "allOf": [
                                    {
                                        "$ref": "#/components/schemas/LabelScopeV2"
                                    }
                                ],
                                "nullable": true
                            },
                            "ontologyId": {
                                "$ref": "#/components/schemas/ObjectID"
                            }
                        },
                        "required": [
                            "structureIds",
                            "attributes",
                            "ontologyId"
                        ],
                        "type": "object",
                        "nullable": true
                    },
                    "toolsSettings": {
                        "properties": {},
                        "additionalProperties": {
                            "$ref": "#/components/schemas/ToolOptions"
                        },
                        "type": "object",
                        "nullable": true
                    },
                    "uiSettings": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/Dictionary"
                            }
                        ],
                        "nullable": true
                    },
                    "metadata": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/Metadata"
                            }
                        ],
                        "nullable": true
                    },
                    "authz": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/AuthZBlock_RecipeV2Context_"
                            }
                        ],
                        "nullable": true
                    },
                    "createdAt": {
                        "type": "string",
                        "format": "date-time",
                        "nullable": true
                    },
                    "updatedAt": {
                        "type": "string",
                        "format": "date-time",
                        "nullable": true
                    },
                    "updatedBy": {
                        "type": "string",
                        "nullable": true
                    },
                    "v2": {
                        "type": "boolean",
                        "enum": [
                            true
                        ],
                        "nullable": true
                    }
                },
                "type": "object",
                "description": "Make all properties in T optional"
            },
            "RecipeV2Input": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/Pick_RecipeV2.title-or-projectIds-or-ontology_"
                    },
                    {
                        "$ref": "#/components/schemas/Partial_RecipeV2_"
                    }
                ]
            },
            "Pick_Recipe.title-or-projectIds-or-ontologyIds_": {
                "properties": {
                    "title": {
                        "type": "string"
                    },
                    "projectIds": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "ontologyIds": {
                        "items": {
                            "$ref": "#/components/schemas/ObjectID"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "title",
                    "projectIds",
                    "ontologyIds"
                ],
                "type": "object",
                "description": "From T, pick a set of properties whose keys are in the union K"
            },
            "InstructionAction": {
                "enum": [
                    "annotate",
                    "remove",
                    "change"
                ],
                "type": "string"
            },
            "InstructionScope": {
                "enum": [
                    "image",
                    "detail"
                ],
                "type": "string"
            },
            "ToolInstruction": {
                "properties": {
                    "scope": {
                        "$ref": "#/components/schemas/InstructionScope"
                    },
                    "action": {
                        "$ref": "#/components/schemas/InstructionAction"
                    },
                    "tool": {
                        "$ref": "#/components/schemas/AnnotationType"
                    },
                    "options": {
                        "allOf": [
                            {
                                "properties": {
                                    "minSize": {
                                        "type": "number",
                                        "format": "double",
                                        "nullable": true
                                    }
                                },
                                "type": "object"
                            },
                            {
                                "$ref": "#/components/schemas/Dictionary"
                            }
                        ]
                    },
                    "tags": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "scope",
                    "action",
                    "tool",
                    "options",
                    "tags"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "GoodExample": {
                "properties": {
                    "itemId": {
                        "type": "string"
                    },
                    "comments": {
                        "type": "string",
                        "nullable": true
                    },
                    "instructions": {
                        "items": {
                            "$ref": "#/components/schemas/ToolInstruction"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "itemId",
                    "instructions"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "Example": {
                "properties": {
                    "itemId": {
                        "type": "string"
                    },
                    "comments": {
                        "type": "string",
                        "nullable": true
                    }
                },
                "required": [
                    "itemId"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "BadExample": {
                "$ref": "#/components/schemas/Example"
            },
            "CustomAction": {
                "properties": {
                    "targets": {
                        "items": {
                            "properties": {
                                "labelId": {
                                    "type": "string"
                                },
                                "ontologyId": {
                                    "type": "string"
                                }
                            },
                            "required": [
                                "labelId",
                                "ontologyId"
                            ],
                            "type": "object"
                        },
                        "type": "array"
                    },
                    "controls": {
                        "type": "string",
                        "enum": [
                            "button",
                            "radio",
                            "checkbox"
                        ]
                    }
                },
                "required": [
                    "targets",
                    "controls"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "RecipeContext": {
                "properties": {
                    "org": {
                        "type": "string",
                        "nullable": true
                    },
                    "project": {
                        "type": "string",
                        "nullable": true
                    },
                    "creator": {
                        "type": "string"
                    },
                    "createdAt": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "updatedAt": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "ontology": {
                        "type": "string"
                    }
                },
                "required": [
                    "creator",
                    "createdAt",
                    "updatedAt",
                    "ontology"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "AuthZBlock_RecipeContext_": {
                "properties": {
                    "scope": {
                        "type": "string",
                        "nullable": true
                    },
                    "context": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/Context"
                            },
                            {
                                "$ref": "#/components/schemas/RecipeContext"
                            }
                        ]
                    },
                    "access": {
                        "items": {},
                        "type": "array",
                        "nullable": true
                    }
                },
                "required": [
                    "context"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "Partial_Recipe_": {
                "properties": {
                    "_id": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/ObjectID"
                            }
                        ],
                        "nullable": true
                    },
                    "creator": {
                        "type": "string",
                        "nullable": true
                    },
                    "title": {
                        "type": "string",
                        "nullable": true
                    },
                    "projectIds": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array",
                        "nullable": true
                    },
                    "description": {
                        "type": "string",
                        "nullable": true
                    },
                    "ontologyIds": {
                        "items": {
                            "$ref": "#/components/schemas/ObjectID"
                        },
                        "type": "array",
                        "nullable": true
                    },
                    "instructions": {
                        "items": {
                            "$ref": "#/components/schemas/ToolInstruction"
                        },
                        "type": "array",
                        "nullable": true
                    },
                    "examples": {
                        "properties": {
                            "bad": {
                                "items": {
                                    "$ref": "#/components/schemas/BadExample"
                                },
                                "type": "array"
                            },
                            "good": {
                                "items": {
                                    "$ref": "#/components/schemas/GoodExample"
                                },
                                "type": "array"
                            }
                        },
                        "required": [
                            "bad",
                            "good"
                        ],
                        "type": "object",
                        "nullable": true
                    },
                    "customActions": {
                        "items": {
                            "$ref": "#/components/schemas/CustomAction"
                        },
                        "type": "array",
                        "nullable": true
                    },
                    "uiSettings": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/Dictionary"
                            }
                        ],
                        "nullable": true
                    },
                    "metadata": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/Metadata"
                            }
                        ],
                        "nullable": true
                    },
                    "authz": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/AuthZBlock_RecipeContext_"
                            }
                        ],
                        "nullable": true
                    },
                    "deprecatedBy": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/ObjectID"
                            }
                        ],
                        "nullable": true
                    },
                    "createdAt": {
                        "type": "string",
                        "format": "date-time",
                        "nullable": true
                    },
                    "updatedAt": {
                        "type": "string",
                        "format": "date-time",
                        "nullable": true
                    },
                    "updatedBy": {
                        "type": "string",
                        "nullable": true
                    }
                },
                "type": "object",
                "description": "Make all properties in T optional"
            },
            "RecipeInput": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/Pick_Recipe.title-or-projectIds-or-ontologyIds_"
                    },
                    {
                        "$ref": "#/components/schemas/Partial_Recipe_"
                    }
                ]
            },
            "CloneRecipePayload": {
                "properties": {
                    "shallow": {
                        "type": "boolean",
                        "nullable": true
                    }
                },
                "type": "object",
                "additionalProperties": true
            },
            "PartialRecipePayloadV2": {
                "properties": {
                    "title": {
                        "type": "string",
                        "nullable": true
                    },
                    "projectIds": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array",
                        "nullable": true
                    },
                    "labelScript": {
                        "type": "string",
                        "nullable": true
                    },
                    "uiSettings": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/Dictionary"
                            }
                        ],
                        "nullable": true
                    },
                    "metadata": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/APIMetadata"
                            }
                        ],
                        "nullable": true
                    }
                },
                "type": "object",
                "additionalProperties": true
            },
            "APIInstruction": {
                "properties": {
                    "scope": {
                        "$ref": "#/components/schemas/InstructionScope"
                    },
                    "action": {
                        "$ref": "#/components/schemas/InstructionAction"
                    },
                    "tool": {
                        "$ref": "#/components/schemas/AnnotationType"
                    },
                    "options": {},
                    "tags": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "scope",
                    "action",
                    "tool",
                    "options",
                    "tags"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "APIGoodExample": {
                "properties": {
                    "itemId": {
                        "type": "string"
                    },
                    "comments": {
                        "type": "string",
                        "nullable": true
                    },
                    "instructions": {
                        "items": {
                            "$ref": "#/components/schemas/APIInstruction"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "itemId",
                    "instructions"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "APIBadExample": {
                "properties": {
                    "itemId": {
                        "type": "string"
                    },
                    "comments": {
                        "type": "string",
                        "nullable": true
                    }
                },
                "required": [
                    "itemId"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "APICustomAction": {
                "properties": {
                    "targets": {
                        "items": {
                            "properties": {
                                "labelId": {
                                    "type": "string"
                                },
                                "ontologyId": {
                                    "type": "string"
                                }
                            },
                            "required": [
                                "labelId",
                                "ontologyId"
                            ],
                            "type": "object"
                        },
                        "type": "array"
                    },
                    "controls": {
                        "type": "string",
                        "enum": [
                            "button",
                            "radio",
                            "checkbox"
                        ]
                    }
                },
                "required": [
                    "targets",
                    "controls"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "PartialRecipePayload": {
                "properties": {
                    "title": {
                        "type": "string",
                        "nullable": true
                    },
                    "projectIds": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array",
                        "nullable": true
                    },
                    "description": {
                        "type": "string",
                        "nullable": true
                    },
                    "ontologyIds": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array",
                        "nullable": true
                    },
                    "instructions": {
                        "items": {
                            "$ref": "#/components/schemas/APIInstruction"
                        },
                        "type": "array",
                        "nullable": true
                    },
                    "examples": {
                        "properties": {
                            "bad": {
                                "items": {
                                    "$ref": "#/components/schemas/APIBadExample"
                                },
                                "type": "array"
                            },
                            "good": {
                                "items": {
                                    "$ref": "#/components/schemas/APIGoodExample"
                                },
                                "type": "array"
                            }
                        },
                        "required": [
                            "bad",
                            "good"
                        ],
                        "type": "object",
                        "nullable": true
                    },
                    "customActions": {
                        "items": {
                            "$ref": "#/components/schemas/APICustomAction"
                        },
                        "type": "array",
                        "nullable": true
                    },
                    "uiSettings": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/Dictionary"
                            }
                        ],
                        "nullable": true
                    },
                    "metadata": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/APIMetadata"
                            }
                        ],
                        "nullable": true
                    }
                },
                "type": "object",
                "additionalProperties": true
            },
            "UpdateOntologyScopePayloadV2": {
                "properties": {
                    "labelScope": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/APILabelScopeV2"
                            }
                        ],
                        "nullable": true
                    },
                    "attributes": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array",
                        "nullable": true
                    },
                    "structureIds": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array",
                        "nullable": true
                    },
                    "override": {
                        "type": "boolean",
                        "nullable": true
                    }
                },
                "type": "object",
                "additionalProperties": true
            },
            "UpdateToolsSettingsPayloadV2": {
                "properties": {
                    "toolsSettings": {
                        "properties": {},
                        "additionalProperties": {
                            "$ref": "#/components/schemas/APIToolOptionsV2"
                        },
                        "type": "object",
                        "nullable": true
                    },
                    "override": {
                        "type": "boolean",
                        "nullable": true
                    }
                },
                "type": "object",
                "additionalProperties": true
            },
            "CursorPage_APIRecipeV2-or-APIRecipe_": {
                "properties": {
                    "totalItemsCount": {
                        "type": "number",
                        "format": "double"
                    },
                    "items": {
                        "items": {
                            "anyOf": [
                                {
                                    "$ref": "#/components/schemas/APIRecipeV2"
                                },
                                {
                                    "$ref": "#/components/schemas/APIRecipe"
                                }
                            ]
                        },
                        "type": "array"
                    },
                    "totalPagesCount": {
                        "type": "number",
                        "format": "double"
                    },
                    "hasNextPage": {
                        "type": "boolean"
                    }
                },
                "required": [
                    "totalItemsCount",
                    "items",
                    "totalPagesCount",
                    "hasNextPage"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "TaskType": {
                "enum": [
                    "annotation",
                    "qa"
                ],
                "type": "string"
            },
            "APITaskSpec": {
                "properties": {
                    "type": {
                        "$ref": "#/components/schemas/TaskType"
                    }
                },
                "required": [
                    "type"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "APISpawnTaskSpec": {
                "properties": {
                    "type": {
                        "$ref": "#/components/schemas/TaskType"
                    },
                    "parentTaskId": {
                        "type": "string"
                    }
                },
                "required": [
                    "type",
                    "parentTaskId"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "TaskStatus": {
                "enum": [
                    "open",
                    "dismissed",
                    "completed",
                    "completed with issues"
                ],
                "type": "string"
            },
            "ItemStatus": {
                "properties": {
                    "completed": {
                        "type": "number",
                        "format": "double"
                    },
                    "remaining": {
                        "type": "number",
                        "format": "double"
                    },
                    "actions": {
                        "properties": {},
                        "additionalProperties": {
                            "type": "number",
                            "format": "double"
                        },
                        "type": "object",
                        "nullable": true
                    }
                },
                "required": [
                    "completed",
                    "remaining"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "ItemAction": {
                "properties": {
                    "action": {
                        "type": "string",
                        "description": ""
                    },
                    "displayName": {
                        "type": "string",
                        "description": ""
                    },
                    "color": {
                        "type": "string",
                        "nullable": true,
                        "description": ""
                    },
                    "icon": {
                        "type": "string",
                        "nullable": true,
                        "description": ""
                    }
                },
                "required": [
                    "action",
                    "displayName",
                    "action",
                    "color",
                    "displayName"
                ],
                "type": "object",
                "additionalProperties": true,
                "description": ""
            },
            "Description": {
                "properties": {
                    "content": {
                        "type": "string"
                    },
                    "createdBy": {
                        "type": "string"
                    },
                    "updatedBy": {
                        "type": "string"
                    },
                    "createdAt": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "updatedAt": {
                        "type": "string",
                        "format": "date-time"
                    }
                },
                "required": [
                    "content",
                    "createdBy",
                    "updatedBy",
                    "createdAt",
                    "updatedAt"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "APITask": {
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "url": {
                        "type": "string"
                    },
                    "createdAt": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "updatedAt": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "updatedBy": {
                        "type": "string",
                        "nullable": true
                    },
                    "creator": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "taskOwner": {
                        "type": "string"
                    },
                    "dueDate": {
                        "type": "number",
                        "format": "double"
                    },
                    "datasetId": {
                        "type": "string"
                    },
                    "recipeId": {
                        "type": "string"
                    },
                    "projectId": {
                        "type": "string"
                    },
                    "spec": {
                        "anyOf": [
                            {
                                "$ref": "#/components/schemas/APITaskSpec"
                            },
                            {
                                "$ref": "#/components/schemas/APISpawnTaskSpec"
                            }
                        ]
                    },
                    "hasParent": {
                        "type": "boolean"
                    },
                    "query": {
                        "type": "string"
                    },
                    "assignmentIds": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "status": {
                        "$ref": "#/components/schemas/TaskStatus"
                    },
                    "metadata": {
                        "$ref": "#/components/schemas/APIMetadata"
                    },
                    "totalItems": {
                        "type": "number",
                        "format": "double"
                    },
                    "itemStatus": {
                        "$ref": "#/components/schemas/ItemStatus"
                    },
                    "progress": {
                        "type": "number",
                        "format": "double"
                    },
                    "forReview": {
                        "type": "number",
                        "format": "double"
                    },
                    "issues": {
                        "type": "number",
                        "format": "double"
                    },
                    "availableActions": {
                        "items": {
                            "$ref": "#/components/schemas/ItemAction"
                        },
                        "type": "array",
                        "nullable": true
                    },
                    "error": {
                        "type": "string",
                        "nullable": true
                    },
                    "priority": {
                        "type": "number",
                        "format": "double",
                        "nullable": true
                    },
                    "emptyInactiveAssignments": {
                        "type": "number",
                        "format": "double",
                        "nullable": true
                    },
                    "description": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/Description"
                            }
                        ],
                        "nullable": true
                    }
                },
                "required": [
                    "id",
                    "url",
                    "creator",
                    "name",
                    "createdAt",
                    "updatedAt",
                    "taskOwner",
                    "dueDate",
                    "datasetId",
                    "recipeId",
                    "projectId",
                    "spec",
                    "hasParent",
                    "query",
                    "assignmentIds",
                    "status",
                    "metadata",
                    "totalItems",
                    "itemStatus",
                    "progress",
                    "forReview",
                    "issues"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "TaskWorkload": {
                "properties": {
                    "assigneeId": {
                        "type": "string",
                        "description": ""
                    },
                    "load": {
                        "type": "number",
                        "format": "double",
                        "description": ""
                    }
                },
                "required": [
                    "assigneeId",
                    "load",
                    "assigneeId",
                    "load"
                ],
                "type": "object",
                "additionalProperties": true,
                "description": ""
            },
            "QueryFilter": {
                "properties": {
                    "context": {
                        "properties": {
                            "projectIds": {
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            }
                        },
                        "required": [
                            "projectIds"
                        ],
                        "type": "object"
                    },
                    "page": {
                        "type": "number",
                        "format": "double"
                    },
                    "pageSize": {
                        "type": "number",
                        "format": "double"
                    },
                    "resource": {
                        "$ref": "#/components/schemas/QueryResource"
                    },
                    "filter": {
                        "$ref": "#/components/schemas/Dictionary"
                    },
                    "sort": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/Dictionary"
                            }
                        ],
                        "nullable": true
                    }
                },
                "required": [
                    "context",
                    "page",
                    "pageSize",
                    "resource",
                    "filter"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "QualityTaskTypes": {
                "enum": [
                    "consensus",
                    "qualification",
                    "honeypot"
                ],
                "type": "string"
            },
            "TaskMetadata": {
                "properties": {
                    "system": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/Dictionary"
                            },
                            {
                                "properties": {
                                    "taskError": {
                                        "type": "string",
                                        "nullable": true
                                    },
                                    "workloadDistribution": {
                                        "items": {
                                            "$ref": "#/components/schemas/TaskWorkload"
                                        },
                                        "type": "array",
                                        "nullable": true
                                    },
                                    "nodeId": {
                                        "type": "string",
                                        "nullable": true
                                    },
                                    "pipelineId": {
                                        "type": "string",
                                        "nullable": true
                                    },
                                    "scoring": {
                                        "type": "boolean",
                                        "nullable": true
                                    },
                                    "webmInstalled": {
                                        "type": "boolean",
                                        "nullable": true
                                    },
                                    "disableWebm": {
                                        "type": "boolean",
                                        "nullable": true
                                    },
                                    "consensusAssignees": {
                                        "type": "number",
                                        "format": "double",
                                        "nullable": true
                                    },
                                    "consensusPercentage": {
                                        "type": "number",
                                        "format": "double",
                                        "nullable": true
                                    },
                                    "consensusTaskType": {
                                        "allOf": [
                                            {
                                                "$ref": "#/components/schemas/QualityTaskTypes"
                                            }
                                        ],
                                        "nullable": true
                                    },
                                    "relatedTasks": {
                                        "items": {
                                            "type": "string"
                                        },
                                        "type": "array",
                                        "nullable": true
                                    },
                                    "groups": {
                                        "items": {
                                            "type": "string"
                                        },
                                        "type": "array",
                                        "nullable": true
                                    },
                                    "allowedAssignees": {
                                        "items": {
                                            "type": "string"
                                        },
                                        "type": "array",
                                        "nullable": true
                                    },
                                    "maxBatchWorkload": {
                                        "type": "number",
                                        "format": "double",
                                        "nullable": true
                                    },
                                    "batchSize": {
                                        "type": "number",
                                        "format": "double",
                                        "nullable": true
                                    },
                                    "nextIndex": {
                                        "type": "number",
                                        "format": "double",
                                        "nullable": true
                                    }
                                },
                                "type": "object"
                            }
                        ],
                        "nullable": true
                    }
                },
                "type": "object",
                "additionalProperties": true
            },
            "Pick_Description.content_": {
                "properties": {
                    "content": {
                        "type": "string"
                    }
                },
                "required": [
                    "content"
                ],
                "type": "object",
                "description": "From T, pick a set of properties whose keys are in the union K"
            },
            "DescriptionInput": {
                "$ref": "#/components/schemas/Pick_Description.content_"
            },
            "TaskPayload": {
                "properties": {
                    "datasetId": {
                        "type": "string"
                    },
                    "recipeId": {
                        "type": "string"
                    },
                    "projectId": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "taskOwner": {
                        "type": "string"
                    },
                    "dueDate": {
                        "type": "number",
                        "format": "double"
                    },
                    "query": {
                        "type": "string"
                    },
                    "status": {
                        "type": "string",
                        "nullable": true
                    },
                    "assignmentIds": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array",
                        "nullable": true
                    },
                    "spec": {
                        "anyOf": [
                            {
                                "$ref": "#/components/schemas/APITaskSpec"
                            },
                            {
                                "$ref": "#/components/schemas/APISpawnTaskSpec"
                            }
                        ]
                    },
                    "workload": {
                        "items": {
                            "$ref": "#/components/schemas/TaskWorkload"
                        },
                        "type": "array",
                        "nullable": true
                    },
                    "limit": {
                        "type": "number",
                        "format": "double",
                        "nullable": true
                    },
                    "percentage": {
                        "type": "boolean",
                        "nullable": true
                    },
                    "asynced": {
                        "type": "boolean",
                        "nullable": true
                    },
                    "emptyTask": {
                        "type": "boolean",
                        "nullable": true
                    },
                    "checkIfExist": {
                        "properties": {
                            "query": {
                                "$ref": "#/components/schemas/QueryFilter"
                            }
                        },
                        "required": [
                            "query"
                        ],
                        "type": "object",
                        "nullable": true
                    },
                    "availableActions": {
                        "items": {
                            "$ref": "#/components/schemas/ItemAction"
                        },
                        "type": "array",
                        "nullable": true
                    },
                    "disableWebm": {
                        "type": "boolean",
                        "nullable": true
                    },
                    "metadata": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/TaskMetadata"
                            }
                        ],
                        "nullable": true
                    },
                    "priority": {
                        "type": "number",
                        "format": "double",
                        "nullable": true
                    },
                    "description": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/DescriptionInput"
                            }
                        ],
                        "nullable": true
                    }
                },
                "required": [
                    "datasetId",
                    "recipeId",
                    "projectId",
                    "name",
                    "taskOwner",
                    "dueDate",
                    "query",
                    "spec"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "AddToTaskPayload": {
                "properties": {
                    "query": {
                        "type": "string"
                    },
                    "workload": {
                        "items": {
                            "$ref": "#/components/schemas/TaskWorkload"
                        },
                        "type": "array",
                        "nullable": true
                    },
                    "limit": {
                        "type": "number",
                        "format": "double",
                        "nullable": true
                    },
                    "percentage": {
                        "type": "boolean",
                        "nullable": true
                    },
                    "asynced": {
                        "type": "boolean",
                        "nullable": true
                    },
                    "disableWebm": {
                        "type": "boolean",
                        "nullable": true
                    },
                    "groups": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array",
                        "nullable": true
                    }
                },
                "required": [
                    "query"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "RemoveFromTaskPayload": {
                "properties": {
                    "query": {
                        "type": "string"
                    },
                    "asynced": {
                        "type": "boolean",
                        "nullable": true
                    }
                },
                "required": [
                    "query"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "PartialTaskPayload": {
                "properties": {
                    "recipeId": {
                        "type": "string",
                        "nullable": true
                    },
                    "query": {
                        "type": "string",
                        "nullable": true
                    },
                    "name": {
                        "type": "string",
                        "nullable": true
                    },
                    "creator": {
                        "type": "string",
                        "nullable": true
                    },
                    "taskOwner": {
                        "type": "string",
                        "nullable": true
                    },
                    "priority": {
                        "type": "number",
                        "format": "double",
                        "nullable": true
                    },
                    "dueDate": {
                        "type": "number",
                        "format": "double",
                        "nullable": true
                    },
                    "status": {
                        "type": "string",
                        "nullable": true
                    },
                    "availableActions": {
                        "items": {
                            "$ref": "#/components/schemas/ItemAction"
                        },
                        "type": "array",
                        "nullable": true
                    },
                    "spec": {
                        "anyOf": [
                            {
                                "$ref": "#/components/schemas/APITaskSpec"
                            },
                            {
                                "$ref": "#/components/schemas/APISpawnTaskSpec"
                            }
                        ],
                        "nullable": true
                    },
                    "metadata": {
                        "$ref": "#/components/schemas/Dictionary"
                    },
                    "asynced": {
                        "type": "boolean",
                        "nullable": true
                    },
                    "description": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/DescriptionInput"
                            }
                        ],
                        "nullable": true
                    }
                },
                "required": [
                    "metadata"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "TaskContributorsAction": {
                "enum": [
                    "add",
                    "remove"
                ],
                "type": "string"
            },
            "UpdateContributorsPayload": {
                "properties": {
                    "action": {
                        "$ref": "#/components/schemas/TaskContributorsAction"
                    },
                    "assignees": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array",
                        "nullable": true
                    },
                    "groups": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array",
                        "nullable": true
                    }
                },
                "required": [
                    "action"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "APITaskCursor": {
                "properties": {
                    "totalItemsCount": {
                        "type": "number",
                        "format": "double"
                    },
                    "items": {
                        "items": {
                            "$ref": "#/components/schemas/APITask"
                        },
                        "type": "array"
                    },
                    "totalPagesCount": {
                        "type": "number",
                        "format": "double"
                    },
                    "hasNextPage": {
                        "type": "boolean"
                    }
                },
                "required": [
                    "totalItemsCount",
                    "items",
                    "totalPagesCount",
                    "hasNextPage"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "TaskRelativeInput": {
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    }
                },
                "required": [
                    "id",
                    "name"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "TaskQueueDetails": {
                "properties": {
                    "remaining": {
                        "type": "number",
                        "format": "double"
                    }
                },
                "required": [
                    "remaining"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "DeleteTaskPayload": {
                "properties": {
                    "asynced": {
                        "type": "boolean",
                        "nullable": true
                    },
                    "deleteWithPipeline": {
                        "type": "boolean",
                        "nullable": true
                    },
                    "emptyOnly": {
                        "type": "boolean",
                        "nullable": true
                    }
                },
                "type": "object",
                "additionalProperties": true
            },
            "CursorPage_any_": {
                "properties": {
                    "totalItemsCount": {
                        "type": "number",
                        "format": "double"
                    },
                    "items": {
                        "items": {},
                        "type": "array"
                    },
                    "totalPagesCount": {
                        "type": "number",
                        "format": "double"
                    },
                    "hasNextPage": {
                        "type": "boolean"
                    }
                },
                "required": [
                    "totalItemsCount",
                    "items",
                    "totalPagesCount",
                    "hasNextPage"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "APITaskCounters": {
                "properties": {
                    "activeProjects": {
                        "type": "number",
                        "format": "double"
                    },
                    "activeDatasets": {
                        "type": "number",
                        "format": "double"
                    },
                    "activeTasks": {
                        "type": "number",
                        "format": "double"
                    },
                    "tasksCount": {
                        "type": "number",
                        "format": "double"
                    }
                },
                "required": [
                    "activeProjects",
                    "activeDatasets",
                    "activeTasks",
                    "tasksCount"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "WorkflowsCounters": {
                "properties": {
                    "tasksCount": {
                        "type": "number",
                        "format": "double"
                    },
                    "assignmentsCount": {
                        "type": "number",
                        "format": "double"
                    },
                    "issuesCount": {
                        "type": "number",
                        "format": "double"
                    },
                    "reviewsCount": {
                        "type": "number",
                        "format": "double"
                    }
                },
                "required": [
                    "tasksCount",
                    "assignmentsCount",
                    "issuesCount",
                    "reviewsCount"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "APILabelV2": {
                "properties": {
                    "tag": {
                        "type": "string"
                    },
                    "displayLabel": {
                        "type": "string"
                    },
                    "color": {
                        "type": "string"
                    },
                    "attributes": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array",
                        "nullable": true
                    },
                    "displayData": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/APILabelDisplayData"
                            }
                        ],
                        "nullable": true
                    }
                },
                "required": [
                    "tag",
                    "displayLabel",
                    "color"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "APILabelTreeNodeV2": {
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "url": {
                        "type": "string"
                    },
                    "createdAt": {
                        "type": "string",
                        "format": "date-time",
                        "nullable": true
                    },
                    "updatedAt": {
                        "type": "string",
                        "format": "date-time",
                        "nullable": true
                    },
                    "updatedBy": {
                        "type": "string",
                        "nullable": true
                    },
                    "parent": {
                        "type": "string",
                        "nullable": true
                    },
                    "root": {
                        "type": "string"
                    },
                    "ontologyId": {
                        "type": "string"
                    },
                    "path": {
                        "type": "string"
                    },
                    "value": {
                        "$ref": "#/components/schemas/APILabelV2"
                    },
                    "hasChildren": {
                        "type": "boolean",
                        "nullable": true
                    },
                    "depth": {
                        "type": "number",
                        "format": "double"
                    },
                    "creator": {
                        "type": "string"
                    }
                },
                "required": [
                    "id",
                    "url",
                    "parent",
                    "root",
                    "ontologyId",
                    "path",
                    "value",
                    "depth",
                    "creator"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "CursorPage_APILabelTreeNodeV2_": {
                "properties": {
                    "totalItemsCount": {
                        "type": "number",
                        "format": "double"
                    },
                    "items": {
                        "items": {
                            "$ref": "#/components/schemas/APILabelTreeNodeV2"
                        },
                        "type": "array"
                    },
                    "totalPagesCount": {
                        "type": "number",
                        "format": "double"
                    },
                    "hasNextPage": {
                        "type": "boolean"
                    }
                },
                "required": [
                    "totalItemsCount",
                    "items",
                    "totalPagesCount",
                    "hasNextPage"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "FilterQueryInput": {
                "properties": {
                    "context": {
                        "properties": {
                            "projects": {
                                "items": {
                                    "type": "string"
                                },
                                "type": "array",
                                "nullable": true
                            },
                            "datasets": {
                                "items": {
                                    "type": "string"
                                },
                                "type": "array",
                                "nullable": true
                            },
                            "projectIds": {
                                "items": {
                                    "type": "string"
                                },
                                "type": "array",
                                "nullable": true
                            }
                        },
                        "type": "object"
                    },
                    "page": {
                        "type": "number",
                        "format": "double"
                    },
                    "pageSize": {
                        "type": "number",
                        "format": "double"
                    },
                    "resource": {
                        "type": "string"
                    },
                    "filter": {
                        "$ref": "#/components/schemas/Dictionary"
                    },
                    "join": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/Dictionary"
                            }
                        ],
                        "nullable": true
                    },
                    "update": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/Dictionary"
                            }
                        ],
                        "nullable": true
                    },
                    "delete": {
                        "type": "boolean",
                        "nullable": true
                    },
                    "sort": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/Dictionary"
                            }
                        ],
                        "nullable": true
                    },
                    "systemSpace": {
                        "type": "boolean",
                        "nullable": true
                    },
                    "references": {
                        "properties": {
                            "refs": {
                                "items": {
                                    "properties": {
                                        "id": {
                                            "type": "string"
                                        },
                                        "type": {
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "id",
                                        "type"
                                    ],
                                    "type": "object"
                                },
                                "type": "array"
                            },
                            "operation": {
                                "type": "string"
                            }
                        },
                        "required": [
                            "refs",
                            "operation"
                        ],
                        "type": "object",
                        "nullable": true
                    }
                },
                "required": [
                    "context",
                    "page",
                    "pageSize",
                    "resource",
                    "filter"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "UpdateLabelNodePayload": {
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "tag": {
                        "type": "string",
                        "nullable": true
                    },
                    "displayLabel": {
                        "type": "string",
                        "nullable": true
                    },
                    "color": {
                        "type": "string",
                        "nullable": true
                    },
                    "system": {
                        "type": "boolean",
                        "nullable": true
                    },
                    "displayData": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/LabelDisplayData"
                            }
                        ],
                        "nullable": true
                    }
                },
                "required": [
                    "id"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "APIAttributeSection": {
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "url": {
                        "type": "string"
                    },
                    "createdAt": {
                        "type": "string",
                        "format": "date-time",
                        "nullable": true
                    },
                    "updatedAt": {
                        "type": "string",
                        "format": "date-time",
                        "nullable": true
                    },
                    "updatedBy": {
                        "type": "string",
                        "nullable": true
                    },
                    "ontologyId": {
                        "type": "string"
                    },
                    "scope": {
                        "$ref": "#/components/schemas/APILabelScopeV2"
                    },
                    "key": {
                        "type": "string"
                    },
                    "type": {
                        "$ref": "#/components/schemas/AttributeType"
                    },
                    "values": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array",
                        "nullable": true
                    },
                    "range": {
                        "nullable": true
                    },
                    "creator": {
                        "type": "string"
                    }
                },
                "required": [
                    "id",
                    "url",
                    "ontologyId",
                    "scope",
                    "key",
                    "type",
                    "creator"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "CreateAttributePayload": {
                "properties": {
                    "key": {
                        "type": "string"
                    },
                    "type": {
                        "type": "string"
                    },
                    "scope": {
                        "properties": {
                            "labelIds": {
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            "subtrees": {
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            }
                        },
                        "required": [
                            "labelIds",
                            "subtrees"
                        ],
                        "type": "object",
                        "nullable": true
                    },
                    "values": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array",
                        "nullable": true
                    },
                    "range": {
                        "nullable": true
                    }
                },
                "required": [
                    "key",
                    "type"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "CursorPage_APIAttributeSection_": {
                "properties": {
                    "totalItemsCount": {
                        "type": "number",
                        "format": "double"
                    },
                    "items": {
                        "items": {
                            "$ref": "#/components/schemas/APIAttributeSection"
                        },
                        "type": "array"
                    },
                    "totalPagesCount": {
                        "type": "number",
                        "format": "double"
                    },
                    "hasNextPage": {
                        "type": "boolean"
                    }
                },
                "required": [
                    "totalItemsCount",
                    "items",
                    "totalPagesCount",
                    "hasNextPage"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "APIUpdateAttributePayload": {
                "properties": {
                    "key": {
                        "type": "string",
                        "nullable": true
                    },
                    "scope": {
                        "properties": {
                            "labelIds": {
                                "items": {
                                    "type": "string"
                                },
                                "type": "array",
                                "nullable": true
                            },
                            "subtrees": {
                                "items": {
                                    "type": "string"
                                },
                                "type": "array",
                                "nullable": true
                            }
                        },
                        "type": "object",
                        "nullable": true
                    },
                    "values": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array",
                        "nullable": true
                    },
                    "range": {
                        "nullable": true
                    }
                },
                "type": "object",
                "additionalProperties": true
            },
            "APIStructure": {
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "url": {
                        "type": "string"
                    },
                    "createdAt": {
                        "type": "string",
                        "format": "date-time",
                        "nullable": true
                    },
                    "updatedAt": {
                        "type": "string",
                        "format": "date-time",
                        "nullable": true
                    },
                    "updatedBy": {
                        "type": "string",
                        "nullable": true
                    },
                    "order": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "arcs": {
                        "items": {
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "type": "array"
                    },
                    "name": {
                        "type": "string"
                    },
                    "ontologyId": {
                        "type": "string"
                    },
                    "creator": {
                        "type": "string"
                    }
                },
                "required": [
                    "id",
                    "url",
                    "order",
                    "arcs",
                    "name",
                    "ontologyId",
                    "creator"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "CreateStructurePayload": {
                "properties": {
                    "order": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "arcs": {
                        "items": {
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "type": "array"
                    },
                    "name": {
                        "type": "string"
                    }
                },
                "required": [
                    "order",
                    "arcs",
                    "name"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "APIUpdateStructurePayload": {
                "properties": {
                    "order": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array",
                        "nullable": true
                    },
                    "arcs": {
                        "items": {
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "type": "array",
                        "nullable": true
                    },
                    "name": {
                        "type": "string",
                        "nullable": true
                    }
                },
                "type": "object",
                "additionalProperties": true
            },
            "CursorPage_APIStructure_": {
                "properties": {
                    "totalItemsCount": {
                        "type": "number",
                        "format": "double"
                    },
                    "items": {
                        "items": {
                            "$ref": "#/components/schemas/APIStructure"
                        },
                        "type": "array"
                    },
                    "totalPagesCount": {
                        "type": "number",
                        "format": "double"
                    },
                    "hasNextPage": {
                        "type": "boolean"
                    }
                },
                "required": [
                    "totalItemsCount",
                    "items",
                    "totalPagesCount",
                    "hasNextPage"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "ScoreType": {
                "enum": [
                    "annotation_iou",
                    "annotation_label",
                    "annotation_attribute",
                    "annotation_overall",
                    "label_confusion",
                    "item_overall",
                    "user_overall",
                    "user_confusion"
                ],
                "type": "string"
            },
            "APIScore": {
                "properties": {
                    "_id": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/ObjectID"
                            }
                        ],
                        "nullable": true
                    },
                    "creator": {
                        "type": "string",
                        "nullable": true
                    },
                    "createdAt": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "updatedAt": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "entityId": {
                        "type": "string"
                    },
                    "value": {
                        "type": "number",
                        "format": "double"
                    },
                    "type": {
                        "$ref": "#/components/schemas/ScoreType"
                    },
                    "context": {
                        "properties": {
                            "relative": {
                                "type": "string",
                                "nullable": true
                            },
                            "modelId": {
                                "type": "string",
                                "nullable": true
                            },
                            "itemId": {
                                "type": "string",
                                "nullable": true
                            },
                            "assignmentId": {
                                "type": "string",
                                "nullable": true
                            },
                            "userId": {
                                "type": "string",
                                "nullable": true
                            },
                            "taskId": {
                                "type": "string",
                                "nullable": true
                            },
                            "datasetId": {
                                "type": "string",
                                "nullable": true
                            },
                            "projectId": {
                                "type": "string",
                                "nullable": true
                            }
                        },
                        "type": "object"
                    },
                    "id": {
                        "type": "string"
                    }
                },
                "required": [
                    "entityId",
                    "value",
                    "type",
                    "context",
                    "id",
                    "createdAt",
                    "updatedAt"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "Score": {
                "properties": {
                    "_id": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/ObjectID"
                            }
                        ],
                        "nullable": true
                    },
                    "creator": {
                        "type": "string",
                        "nullable": true
                    },
                    "createdAt": {
                        "type": "string",
                        "format": "date-time",
                        "nullable": true
                    },
                    "updatedAt": {
                        "type": "string",
                        "format": "date-time",
                        "nullable": true
                    },
                    "entityId": {
                        "type": "string"
                    },
                    "value": {
                        "type": "number",
                        "format": "double"
                    },
                    "type": {
                        "$ref": "#/components/schemas/ScoreType"
                    },
                    "context": {
                        "properties": {
                            "relative": {
                                "type": "string",
                                "nullable": true
                            },
                            "modelId": {
                                "type": "string",
                                "nullable": true
                            },
                            "itemId": {
                                "type": "string",
                                "nullable": true
                            },
                            "assignmentId": {
                                "type": "string",
                                "nullable": true
                            },
                            "userId": {
                                "type": "string",
                                "nullable": true
                            },
                            "taskId": {
                                "type": "string",
                                "nullable": true
                            },
                            "datasetId": {
                                "type": "string",
                                "nullable": true
                            },
                            "projectId": {
                                "type": "string",
                                "nullable": true
                            }
                        },
                        "type": "object"
                    }
                },
                "required": [
                    "entityId",
                    "value",
                    "type",
                    "context"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "ScoreParameters": {
                "properties": {
                    "score": {
                        "properties": {
                            "context": {
                                "properties": {
                                    "userId": {
                                        "anyOf": [
                                            {
                                                "type": "string"
                                            },
                                            {
                                                "items": {
                                                    "type": "string"
                                                },
                                                "type": "array"
                                            }
                                        ],
                                        "nullable": true
                                    },
                                    "assignmentId": {
                                        "type": "string",
                                        "nullable": true
                                    },
                                    "taskId": {
                                        "type": "string",
                                        "nullable": true
                                    }
                                },
                                "type": "object",
                                "nullable": true
                            },
                            "type": {
                                "allOf": [
                                    {
                                        "$ref": "#/components/schemas/ScoreType"
                                    }
                                ],
                                "nullable": true
                            }
                        },
                        "type": "object"
                    },
                    "options": {
                        "properties": {
                            "includeHistogramItems": {
                                "type": "boolean",
                                "nullable": true
                            }
                        },
                        "type": "object",
                        "nullable": true
                    }
                },
                "required": [
                    "score"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "DeleteTaskItemScoresPayload": {
                "properties": {
                    "context": {
                        "properties": {
                            "relative": {
                                "type": "string",
                                "nullable": true
                            },
                            "userId": {
                                "type": "string",
                                "nullable": true
                            },
                            "itemId": {
                                "type": "string",
                                "nullable": true
                            },
                            "taskId": {
                                "type": "string"
                            }
                        },
                        "required": [
                            "taskId"
                        ],
                        "type": "object"
                    },
                    "entityId": {
                        "type": "string",
                        "nullable": true
                    }
                },
                "required": [
                    "context"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "AssignmentStatus": {
                "enum": [
                    "todo",
                    "in progress",
                    "done",
                    "completed with issues"
                ],
                "type": "string"
            },
            "APIAssignment": {
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "url": {
                        "type": "string"
                    },
                    "createdAt": {
                        "type": "string",
                        "format": "date-time",
                        "nullable": true
                    },
                    "updatedAt": {
                        "type": "string",
                        "format": "date-time",
                        "nullable": true
                    },
                    "updatedBy": {
                        "type": "string",
                        "nullable": true
                    },
                    "name": {
                        "type": "string"
                    },
                    "annotator": {
                        "type": "string"
                    },
                    "status": {
                        "$ref": "#/components/schemas/AssignmentStatus"
                    },
                    "projectId": {
                        "type": "string"
                    },
                    "metadata": {
                        "$ref": "#/components/schemas/APIMetadata"
                    },
                    "totalItems": {
                        "type": "number",
                        "format": "double"
                    },
                    "itemStatus": {
                        "$ref": "#/components/schemas/ItemStatus"
                    },
                    "taskType": {
                        "type": "string"
                    },
                    "progress": {
                        "type": "number",
                        "format": "double"
                    },
                    "forReview": {
                        "type": "number",
                        "format": "double"
                    },
                    "issues": {
                        "type": "number",
                        "format": "double"
                    },
                    "inRedistributeProcess": {
                        "type": "string",
                        "format": "date-time",
                        "nullable": true
                    },
                    "error": {
                        "type": "string",
                        "nullable": true
                    },
                    "priority": {
                        "type": "number",
                        "format": "double",
                        "nullable": true
                    }
                },
                "required": [
                    "id",
                    "url",
                    "name",
                    "annotator",
                    "status",
                    "projectId",
                    "metadata",
                    "totalItems",
                    "itemStatus",
                    "taskType",
                    "progress",
                    "forReview",
                    "issues"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "PartialAssignmentPayload": {
                "properties": {
                    "name": {
                        "type": "string",
                        "nullable": true
                    },
                    "metadata": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/Dictionary"
                            }
                        ],
                        "nullable": true
                    }
                },
                "type": "object",
                "additionalProperties": true
            },
            "APIAssignmentCursor": {
                "properties": {
                    "totalItemsCount": {
                        "type": "number",
                        "format": "double"
                    },
                    "items": {
                        "items": {
                            "$ref": "#/components/schemas/APIAssignment"
                        },
                        "type": "array"
                    },
                    "totalPagesCount": {
                        "type": "number",
                        "format": "double"
                    },
                    "hasNextPage": {
                        "type": "boolean"
                    }
                },
                "required": [
                    "totalItemsCount",
                    "items",
                    "totalPagesCount",
                    "hasNextPage"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "ReassignAssignmentPayload": {
                "properties": {
                    "annotator": {
                        "type": "string"
                    },
                    "asynced": {
                        "type": "boolean",
                        "nullable": true
                    }
                },
                "required": [
                    "annotator"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "AssignmentWorkload": {
                "properties": {
                    "assigneeId": {
                        "type": "string"
                    },
                    "load": {
                        "type": "number",
                        "format": "double"
                    }
                },
                "required": [
                    "assigneeId",
                    "load"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "RedistributeAssignmentPayload": {
                "properties": {
                    "workload": {
                        "items": {
                            "$ref": "#/components/schemas/AssignmentWorkload"
                        },
                        "type": "array"
                    },
                    "selectNotAnnotatedOnly": {
                        "type": "boolean",
                        "nullable": true
                    },
                    "asynced": {
                        "type": "boolean",
                        "nullable": true
                    },
                    "isSudoCtx": {
                        "type": "boolean",
                        "nullable": true
                    },
                    "allowToSkipAssignments": {
                        "type": "boolean",
                        "nullable": true
                    },
                    "query": {
                        "type": "string",
                        "nullable": true
                    }
                },
                "required": [
                    "workload"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "BatchAssignmentPayload": {
                "properties": {
                    "assignmentId": {
                        "type": "string"
                    },
                    "asynced": {
                        "type": "boolean",
                        "nullable": true
                    }
                },
                "required": [
                    "assignmentId"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "AssignmentStatusPayload": {
                "properties": {
                    "operation": {
                        "$ref": "#/components/schemas/ItemRefOperation"
                    },
                    "status": {
                        "type": "string",
                        "nullable": true
                    },
                    "returnLastStatus": {
                        "type": "boolean",
                        "nullable": true
                    },
                    "asynced": {
                        "type": "boolean",
                        "nullable": true
                    }
                },
                "required": [
                    "operation"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "AssignmentMetadata": {
                "properties": {
                    "system": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/Dictionary"
                            },
                            {
                                "properties": {
                                    "active": {
                                        "type": "boolean",
                                        "nullable": true
                                    },
                                    "consensusAssignment": {
                                        "type": "boolean",
                                        "nullable": true
                                    },
                                    "queueAssignment": {
                                        "type": "boolean",
                                        "nullable": true
                                    },
                                    "hidden": {
                                        "type": "boolean",
                                        "nullable": true
                                    },
                                    "type": {
                                        "type": "string",
                                        "enum": [
                                            "bucket"
                                        ],
                                        "nullable": true
                                    },
                                    "taskId": {
                                        "type": "string"
                                    },
                                    "dueDate": {
                                        "type": "number",
                                        "format": "double",
                                        "nullable": true
                                    },
                                    "datasetId": {
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "taskId",
                                    "datasetId"
                                ],
                                "type": "object"
                            }
                        ]
                    }
                },
                "required": [
                    "system"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "AssignmentContext": {
                "properties": {
                    "org": {
                        "type": "string",
                        "nullable": true
                    },
                    "project": {
                        "type": "string"
                    },
                    "creator": {
                        "type": "string"
                    },
                    "createdAt": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "updatedAt": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "dataset": {
                        "type": "string"
                    },
                    "recipe": {
                        "type": "string"
                    },
                    "task": {
                        "type": "string"
                    }
                },
                "required": [
                    "creator",
                    "createdAt",
                    "updatedAt",
                    "project",
                    "dataset",
                    "recipe",
                    "task"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "AuthZBlock_AssignmentContext_": {
                "properties": {
                    "scope": {
                        "type": "string",
                        "nullable": true
                    },
                    "context": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/Context"
                            },
                            {
                                "$ref": "#/components/schemas/AssignmentContext"
                            }
                        ]
                    },
                    "access": {
                        "items": {},
                        "type": "array",
                        "nullable": true
                    }
                },
                "required": [
                    "context"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "Partial_Assignment_": {
                "properties": {
                    "_id": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/ObjectID"
                            }
                        ],
                        "nullable": true
                    },
                    "name": {
                        "type": "string",
                        "nullable": true
                    },
                    "annotator": {
                        "type": "string",
                        "nullable": true
                    },
                    "projectId": {
                        "type": "string",
                        "nullable": true
                    },
                    "metadata": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/AssignmentMetadata"
                            }
                        ],
                        "nullable": true
                    },
                    "totalItems": {
                        "type": "number",
                        "format": "double",
                        "nullable": true
                    },
                    "itemStatus": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/ItemStatus"
                            }
                        ],
                        "nullable": true
                    },
                    "taskType": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/TaskType"
                            }
                        ],
                        "nullable": true
                    },
                    "forReview": {
                        "type": "number",
                        "format": "double",
                        "nullable": true
                    },
                    "issues": {
                        "type": "number",
                        "format": "double",
                        "nullable": true
                    },
                    "inRedistributeProcess": {
                        "type": "string",
                        "format": "date-time",
                        "nullable": true
                    },
                    "error": {
                        "type": "string",
                        "nullable": true
                    },
                    "authz": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/AuthZBlock_AssignmentContext_"
                            }
                        ],
                        "nullable": true
                    },
                    "priority": {
                        "type": "number",
                        "format": "double",
                        "nullable": true
                    },
                    "createdAt": {
                        "type": "string",
                        "format": "date-time",
                        "nullable": true
                    },
                    "updatedAt": {
                        "type": "string",
                        "format": "date-time",
                        "nullable": true
                    },
                    "updatedBy": {
                        "type": "string",
                        "nullable": true
                    }
                },
                "type": "object",
                "description": "Make all properties in T optional"
            },
            "GroupCtx": {
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    }
                },
                "required": [
                    "id",
                    "name"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "APIUser": {
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "url": {
                        "type": "string"
                    },
                    "createdAt": {
                        "type": "number",
                        "format": "double"
                    },
                    "updatedAt": {
                        "type": "number",
                        "format": "double"
                    },
                    "username": {
                        "type": "string"
                    },
                    "firstName": {
                        "type": "string"
                    },
                    "lastName": {
                        "type": "string"
                    },
                    "email": {
                        "type": "string"
                    },
                    "avatar": {
                        "type": "string"
                    },
                    "projects": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "groups": {
                        "items": {
                            "$ref": "#/components/schemas/GroupCtx"
                        },
                        "type": "array"
                    },
                    "org": {
                        "anyOf": [
                            {
                                "$ref": "#/components/schemas/APIOrg"
                            },
                            {
                                "type": "string"
                            }
                        ]
                    },
                    "orgs": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "type": {
                        "type": "string"
                    },
                    "lastLogin": {
                        "type": "number",
                        "format": "double"
                    },
                    "interest": {
                        "type": "string"
                    },
                    "boarded": {
                        "type": "boolean"
                    },
                    "hash": {
                        "type": "string"
                    },
                    "timezone": {
                        "type": "string"
                    },
                    "created": {
                        "type": "boolean"
                    },
                    "inviteEmail": {
                        "type": "string"
                    },
                    "status": {
                        "type": "string"
                    },
                    "member": {
                        "type": "string"
                    },
                    "guest": {
                        "properties": {
                            "name": {
                                "type": "string"
                            },
                            "org": {
                                "type": "string"
                            },
                            "id": {
                                "type": "string"
                            }
                        },
                        "required": [
                            "id"
                        ],
                        "type": "object"
                    },
                    "denyMembersManagement": {
                        "type": "boolean"
                    },
                    "defaultProjectRole": {
                        "$ref": "#/components/schemas/Role"
                    }
                },
                "required": [
                    "id",
                    "username",
                    "firstName",
                    "email",
                    "projects",
                    "groups",
                    "orgs",
                    "type",
                    "createdAt",
                    "updatedAt"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "APIOrg": {
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "url": {
                        "type": "string"
                    },
                    "createdAt": {
                        "type": "number",
                        "format": "double"
                    },
                    "updatedAt": {
                        "type": "number",
                        "format": "double"
                    },
                    "role": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "logoUrl": {
                        "type": "string"
                    },
                    "members": {
                        "anyOf": [
                            {
                                "items": {
                                    "$ref": "#/components/schemas/APIUser"
                                },
                                "type": "array"
                            },
                            {
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            }
                        ]
                    },
                    "groups": {
                        "anyOf": [
                            {
                                "items": {
                                    "$ref": "#/components/schemas/APIGroup"
                                },
                                "type": "array"
                            },
                            {
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            }
                        ]
                    },
                    "owner": {
                        "anyOf": [
                            {
                                "$ref": "#/components/schemas/APIUser"
                            },
                            {
                                "type": "string"
                            }
                        ]
                    },
                    "account": {
                        "anyOf": [
                            {
                                "$ref": "#/components/schemas/APIAccount"
                            },
                            {
                                "type": "string"
                            }
                        ]
                    },
                    "creator": {
                        "anyOf": [
                            {
                                "$ref": "#/components/schemas/APIUser"
                            },
                            {
                                "type": "string"
                            }
                        ]
                    },
                    "plan": {
                        "$ref": "#/components/schemas/OrgPlans"
                    },
                    "integrations": {
                        "anyOf": [
                            {
                                "items": {
                                    "$ref": "#/components/schemas/APIIntegration"
                                },
                                "type": "array"
                            },
                            {
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            }
                        ]
                    },
                    "industry": {
                        "type": "string"
                    },
                    "size": {
                        "type": "string"
                    }
                },
                "required": [
                    "id",
                    "name",
                    "members",
                    "groups",
                    "owner",
                    "account",
                    "creator",
                    "plan",
                    "integrations",
                    "createdAt",
                    "updatedAt"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "Role": {
                "enum": [
                    "owner",
                    "annotator",
                    "engineer",
                    "annotationManager",
                    "owner",
                    "annotator",
                    "engineer",
                    "annotationManager"
                ],
                "type": "string"
            },
            "APIGroup": {
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "url": {
                        "type": "string"
                    },
                    "createdAt": {
                        "type": "number",
                        "format": "double"
                    },
                    "updatedAt": {
                        "type": "number",
                        "format": "double"
                    },
                    "name": {
                        "type": "string"
                    },
                    "org": {
                        "anyOf": [
                            {
                                "$ref": "#/components/schemas/APIOrg"
                            },
                            {
                                "type": "string"
                            }
                        ]
                    },
                    "owner": {
                        "anyOf": [
                            {
                                "$ref": "#/components/schemas/APIUser"
                            },
                            {
                                "type": "string"
                            }
                        ]
                    },
                    "creator": {
                        "anyOf": [
                            {
                                "$ref": "#/components/schemas/APIUser"
                            },
                            {
                                "type": "string"
                            }
                        ]
                    },
                    "members": {
                        "anyOf": [
                            {
                                "items": {
                                    "$ref": "#/components/schemas/APIUser"
                                },
                                "type": "array"
                            },
                            {
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            }
                        ]
                    },
                    "defaultProjectRole": {
                        "$ref": "#/components/schemas/Role"
                    },
                    "projects": {
                        "anyOf": [
                            {
                                "items": {
                                    "$ref": "#/components/schemas/APIProject"
                                },
                                "type": "array"
                            },
                            {
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            }
                        ]
                    }
                },
                "required": [
                    "id",
                    "name",
                    "org",
                    "owner",
                    "creator",
                    "members",
                    "projects",
                    "createdAt",
                    "updatedAt"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "APIAccount": {
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "url": {
                        "type": "string"
                    },
                    "createdAt": {
                        "type": "number",
                        "format": "double"
                    },
                    "updatedAt": {
                        "type": "number",
                        "format": "double"
                    },
                    "name": {
                        "type": "string"
                    },
                    "owner": {
                        "anyOf": [
                            {
                                "$ref": "#/components/schemas/APIUser"
                            },
                            {
                                "type": "string"
                            }
                        ]
                    },
                    "org": {
                        "anyOf": [
                            {
                                "$ref": "#/components/schemas/APIOrg"
                            },
                            {
                                "type": "string"
                            }
                        ]
                    },
                    "creator": {
                        "anyOf": [
                            {
                                "$ref": "#/components/schemas/APIUser"
                            },
                            {
                                "type": "string"
                            }
                        ]
                    }
                },
                "required": [
                    "id",
                    "name",
                    "owner",
                    "org",
                    "creator",
                    "createdAt",
                    "updatedAt"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "FeatureConstraint": {
                "properties": {
                    "title": {
                        "type": "string"
                    },
                    "quota": {
                        "type": "number",
                        "format": "double"
                    },
                    "name": {
                        "type": "string"
                    }
                },
                "required": [
                    "title",
                    "quota",
                    "name"
                ],
                "type": "object"
            },
            "APIProject": {
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "url": {
                        "type": "string"
                    },
                    "createdAt": {
                        "type": "number",
                        "format": "double"
                    },
                    "updatedAt": {
                        "type": "number",
                        "format": "double"
                    },
                    "name": {
                        "type": "string"
                    },
                    "contributors": {
                        "anyOf": [
                            {
                                "items": {
                                    "$ref": "#/components/schemas/APIUser"
                                },
                                "type": "array"
                            },
                            {
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            }
                        ]
                    },
                    "groups": {
                        "anyOf": [
                            {
                                "items": {
                                    "$ref": "#/components/schemas/APIGroup"
                                },
                                "type": "array"
                            },
                            {
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            }
                        ]
                    },
                    "creator": {
                        "anyOf": [
                            {
                                "$ref": "#/components/schemas/APIUser"
                            },
                            {
                                "type": "string"
                            }
                        ]
                    },
                    "org": {
                        "anyOf": [
                            {
                                "$ref": "#/components/schemas/APIOrg"
                            },
                            {
                                "type": "string"
                            }
                        ]
                    },
                    "account": {
                        "anyOf": [
                            {
                                "$ref": "#/components/schemas/APIAccount"
                            },
                            {
                                "type": "string"
                            }
                        ]
                    },
                    "featureConstraints": {
                        "items": {
                            "$ref": "#/components/schemas/FeatureConstraint"
                        },
                        "type": "array"
                    },
                    "guests": {
                        "anyOf": [
                            {
                                "items": {
                                    "$ref": "#/components/schemas/APIProjectGuest"
                                },
                                "type": "array"
                            },
                            {
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            }
                        ]
                    },
                    "role": {
                        "type": "string"
                    },
                    "archived": {
                        "type": "boolean"
                    }
                },
                "required": [
                    "id",
                    "name",
                    "contributors",
                    "groups",
                    "creator",
                    "org",
                    "account",
                    "guests",
                    "createdAt",
                    "updatedAt"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "APIProjectGuest": {
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "url": {
                        "type": "string"
                    },
                    "createdAt": {
                        "type": "number",
                        "format": "double"
                    },
                    "updatedAt": {
                        "type": "number",
                        "format": "double"
                    },
                    "project": {
                        "anyOf": [
                            {
                                "$ref": "#/components/schemas/APIProject"
                            },
                            {
                                "type": "string"
                            }
                        ]
                    },
                    "guestOrg": {
                        "anyOf": [
                            {
                                "$ref": "#/components/schemas/APIOrg"
                            },
                            {
                                "type": "string"
                            }
                        ]
                    },
                    "name": {
                        "type": "string"
                    },
                    "type": {
                        "type": "string"
                    },
                    "creator": {
                        "anyOf": [
                            {
                                "$ref": "#/components/schemas/APIUser"
                            },
                            {
                                "type": "string"
                            }
                        ]
                    },
                    "archived": {
                        "type": "boolean"
                    }
                },
                "required": [
                    "id",
                    "project",
                    "guestOrg",
                    "name",
                    "type",
                    "creator",
                    "createdAt",
                    "updatedAt"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "OrgPlans": {
                "enum": [
                    "freemium",
                    "premium"
                ],
                "type": "string"
            },
            "APIIntegration": {
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "url": {
                        "type": "string"
                    },
                    "createdAt": {
                        "type": "number",
                        "format": "double"
                    },
                    "updatedAt": {
                        "type": "number",
                        "format": "double"
                    },
                    "name": {
                        "type": "string"
                    },
                    "type": {
                        "type": "string"
                    },
                    "org": {
                        "anyOf": [
                            {
                                "$ref": "#/components/schemas/APIOrg"
                            },
                            {
                                "type": "string"
                            }
                        ]
                    },
                    "creator": {
                        "anyOf": [
                            {
                                "$ref": "#/components/schemas/APIUser"
                            },
                            {
                                "type": "string"
                            }
                        ]
                    },
                    "metadata": {
                        "items": {
                            "$ref": "#/components/schemas/APIIntegrationMetadata"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "id",
                    "name",
                    "type",
                    "org",
                    "creator",
                    "metadata",
                    "createdAt",
                    "updatedAt"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "APIIntegrationMetadata": {
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "url": {
                        "type": "string"
                    },
                    "createdAt": {
                        "type": "number",
                        "format": "double"
                    },
                    "updatedAt": {
                        "type": "number",
                        "format": "double"
                    },
                    "name": {
                        "type": "string"
                    },
                    "value": {
                        "type": "string"
                    },
                    "integration": {
                        "anyOf": [
                            {
                                "$ref": "#/components/schemas/APIIntegration"
                            },
                            {
                                "type": "string"
                            }
                        ]
                    }
                },
                "required": [
                    "id",
                    "name",
                    "value",
                    "integration",
                    "createdAt",
                    "updatedAt"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "CreateAccountRequest": {
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "createdBy": {
                        "type": "string"
                    },
                    "org": {
                        "type": "string"
                    }
                },
                "required": [
                    "name",
                    "createdBy",
                    "org"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "EditAccountRequest": {
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "org": {
                        "type": "string"
                    }
                },
                "required": [
                    "name",
                    "org"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "CreateBotPayload": {
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "returnCredentials": {
                        "type": "boolean"
                    }
                },
                "type": "object",
                "additionalProperties": true
            },
            "CreateGroupPayload": {
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "orgId": {
                        "type": "string"
                    }
                },
                "required": [
                    "name",
                    "orgId"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "PatchGroupPayload": {
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "default_project_role": {
                        "type": "boolean"
                    }
                },
                "required": [
                    "name"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "DLEntityType": {
                "enum": [
                    "dataset",
                    "recipe",
                    "ontology",
                    "item",
                    "annotation",
                    "execution",
                    "task",
                    "assignment",
                    "service",
                    "package",
                    "project",
                    "model",
                    "member",
                    "group",
                    "org",
                    "account",
                    "subscription",
                    "plan",
                    "qouta"
                ],
                "type": "string"
            },
            "AuthUserAttributes": {
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "url": {
                        "type": "string"
                    },
                    "username": {
                        "type": "string"
                    },
                    "firstName": {
                        "type": "string"
                    },
                    "lastName": {
                        "type": "string"
                    },
                    "email": {
                        "type": "string"
                    },
                    "avatar": {
                        "type": "string"
                    },
                    "projects": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "groups": {
                        "items": {
                            "$ref": "#/components/schemas/GroupCtx"
                        },
                        "type": "array"
                    },
                    "org": {
                        "type": "string"
                    },
                    "orgs": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "type": {
                        "type": "string"
                    },
                    "lastLogin": {
                        "type": "number",
                        "format": "double"
                    },
                    "interest": {
                        "type": "string"
                    },
                    "boarded": {
                        "type": "boolean"
                    },
                    "hash": {
                        "type": "string"
                    },
                    "timezone": {
                        "type": "string"
                    },
                    "createdAt": {
                        "type": "number",
                        "format": "double"
                    },
                    "updatedAt": {
                        "type": "number",
                        "format": "double"
                    },
                    "orgRole": {
                        "type": "string"
                    },
                    "created": {
                        "type": "boolean"
                    },
                    "domain": {
                        "type": "string"
                    },
                    "given_name": {
                        "type": "string"
                    },
                    "returningUser": {
                        "type": "boolean"
                    },
                    "membershipType": {
                        "$ref": "#/components/schemas/DLEntityType"
                    },
                    "membershipEntityId": {
                        "type": "string"
                    },
                    "role": {
                        "$ref": "#/components/schemas/Role"
                    },
                    "superuser": {
                        "type": "boolean"
                    },
                    "picture": {
                        "type": "string"
                    },
                    "via": {
                        "type": "string"
                    }
                },
                "required": [
                    "id",
                    "username",
                    "firstName",
                    "email",
                    "type",
                    "createdAt",
                    "updatedAt",
                    "orgRole",
                    "created",
                    "domain",
                    "given_name",
                    "membershipType",
                    "membershipEntityId"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "OrgRole": {
                "enum": [
                    "owner",
                    "admin",
                    "member",
                    "worker",
                    "owner",
                    "admin",
                    "member",
                    "worker"
                ],
                "type": "string"
            },
            "APILogin": {
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "url": {
                        "type": "string"
                    },
                    "createdAt": {
                        "type": "number",
                        "format": "double"
                    },
                    "updatedAt": {
                        "type": "number",
                        "format": "double"
                    },
                    "userId": {
                        "type": "string"
                    },
                    "date": {
                        "type": "number",
                        "format": "double"
                    },
                    "orgId": {
                        "type": "string"
                    },
                    "orgRole": {
                        "$ref": "#/components/schemas/OrgRole"
                    },
                    "userAgent": {
                        "type": "string"
                    }
                },
                "required": [
                    "id",
                    "userId",
                    "date",
                    "userAgent"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "CursorPage_APILogin_": {
                "properties": {
                    "totalItemsCount": {
                        "type": "number",
                        "format": "double"
                    },
                    "items": {
                        "items": {
                            "$ref": "#/components/schemas/APILogin"
                        },
                        "type": "array"
                    },
                    "totalPagesCount": {
                        "type": "number",
                        "format": "double"
                    },
                    "hasNextPage": {
                        "type": "boolean"
                    }
                },
                "required": [
                    "totalItemsCount",
                    "items",
                    "totalPagesCount",
                    "hasNextPage"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "LoginsLogQuery": {
                "properties": {
                    "order": {
                        "type": "string",
                        "enum": [
                            "ASC",
                            "DESC"
                        ]
                    },
                    "orderBy": {
                        "type": "string",
                        "enum": [
                            "id",
                            "sequelize",
                            "destroy",
                            "restore",
                            "update",
                            "increment",
                            "decrement",
                            "addHook",
                            "removeHook",
                            "hasHook",
                            "hasHooks",
                            "_creationAttributes",
                            "orgId",
                            "_attributes",
                            "validate",
                            "isNewRecord",
                            "where",
                            "userId",
                            "date",
                            "orgRole",
                            "userAgent",
                            "dataValues",
                            "getDataValue",
                            "setDataValue",
                            "get",
                            "set",
                            "setAttributes",
                            "changed",
                            "previous",
                            "save",
                            "reload",
                            "equals",
                            "equalsOneOf",
                            "toJSON",
                            "isSoftDeleted",
                            "_model"
                        ],
                        "nullable": false
                    },
                    "page": {
                        "type": "number",
                        "format": "double"
                    },
                    "pageSize": {
                        "type": "number",
                        "format": "double"
                    },
                    "groupId": {
                        "type": "string"
                    },
                    "orgRole": {
                        "$ref": "#/components/schemas/OrgRole"
                    },
                    "userId": {
                        "type": "string"
                    },
                    "toDate": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "fromDate": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "orgId": {
                        "type": "string"
                    }
                },
                "required": [
                    "orgId"
                ],
                "type": "object"
            },
            "INTEGRATION_TYPE": {
                "enum": [
                    "s3",
                    "aws-sts",
                    "aws-cross",
                    "gcp-cross",
                    "gcs",
                    "azureblob",
                    "key_value",
                    "private-registry"
                ],
                "type": "string"
            },
            "IntegrationBody": {
                "properties": {
                    "credentials": {
                        "properties": {
                            "options": {
                                "$ref": "#/components/schemas/Dictionary"
                            },
                            "type": {
                                "$ref": "#/components/schemas/INTEGRATION_TYPE"
                            }
                        },
                        "required": [
                            "options",
                            "type"
                        ],
                        "type": "object"
                    },
                    "name": {
                        "type": "string"
                    },
                    "integrationId": {
                        "type": "string"
                    }
                },
                "required": [
                    "integrationId"
                ],
                "type": "object"
            },
            "OrgSize": {
                "enum": [
                    "small",
                    "medium",
                    "enterprise"
                ],
                "type": "string"
            },
            "OrgIndustry": {
                "enum": [
                    "automotive",
                    "medical",
                    "retail",
                    "agriculture",
                    "sports",
                    "aerialImagery",
                    "media",
                    "other"
                ],
                "type": "string"
            },
            "APIOrgUser": {
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "url": {
                        "type": "string"
                    },
                    "createdAt": {
                        "type": "number",
                        "format": "double"
                    },
                    "updatedAt": {
                        "type": "number",
                        "format": "double"
                    },
                    "member": {
                        "anyOf": [
                            {
                                "$ref": "#/components/schemas/APIUser"
                            },
                            {
                                "type": "string"
                            }
                        ]
                    },
                    "org": {
                        "anyOf": [
                            {
                                "$ref": "#/components/schemas/APIOrg"
                            },
                            {
                                "type": "string"
                            }
                        ]
                    },
                    "role": {
                        "anyOf": [
                            {
                                "$ref": "#/components/schemas/OrgRole"
                            },
                            {
                                "type": "string"
                            }
                        ]
                    },
                    "status": {
                        "type": "string"
                    },
                    "inviteEmail": {
                        "type": "string"
                    },
                    "defaultProjectRole": {
                        "$ref": "#/components/schemas/Role"
                    }
                },
                "required": [
                    "id",
                    "member",
                    "org",
                    "role",
                    "status",
                    "inviteEmail",
                    "createdAt",
                    "updatedAt"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "APIOrgDomain": {
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "url": {
                        "type": "string"
                    },
                    "createdAt": {
                        "type": "number",
                        "format": "double"
                    },
                    "updatedAt": {
                        "type": "number",
                        "format": "double"
                    },
                    "org": {
                        "anyOf": [
                            {
                                "$ref": "#/components/schemas/APIOrg"
                            },
                            {
                                "type": "string"
                            }
                        ]
                    },
                    "domain": {
                        "type": "string"
                    }
                },
                "required": [
                    "id",
                    "org",
                    "domain",
                    "createdAt",
                    "updatedAt"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "GuestType": {
                "enum": [
                    "labeling",
                    "development"
                ],
                "type": "string"
            },
            "APIGuest": {
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "url": {
                        "type": "string"
                    },
                    "createdAt": {
                        "type": "number",
                        "format": "double"
                    },
                    "updatedAt": {
                        "type": "number",
                        "format": "double"
                    },
                    "name": {
                        "type": "string"
                    },
                    "guestOrg": {
                        "type": "string"
                    },
                    "project": {
                        "type": "string"
                    },
                    "type": {
                        "anyOf": [
                            {
                                "$ref": "#/components/schemas/GuestType"
                            },
                            {
                                "type": "string"
                            }
                        ]
                    }
                },
                "required": [
                    "id",
                    "name",
                    "guestOrg",
                    "project",
                    "type"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "CreateGuestPayload": {
                "properties": {
                    "denyMembersManagement": {
                        "type": "boolean"
                    },
                    "type": {
                        "$ref": "#/components/schemas/GuestType"
                    },
                    "name": {
                        "type": "string"
                    },
                    "guestEmail": {
                        "type": "string"
                    }
                },
                "required": [
                    "type",
                    "name",
                    "guestEmail"
                ],
                "type": "object"
            },
            "CreateProjectPayload": {
                "properties": {
                    "account": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    }
                },
                "required": [
                    "name"
                ],
                "type": "object"
            },
            "APIMembership": {
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "url": {
                        "type": "string"
                    },
                    "createdAt": {
                        "type": "number",
                        "format": "double"
                    },
                    "updatedAt": {
                        "type": "number",
                        "format": "double"
                    },
                    "member": {
                        "anyOf": [
                            {
                                "$ref": "#/components/schemas/APIUser"
                            },
                            {
                                "type": "string"
                            }
                        ]
                    },
                    "project": {
                        "anyOf": [
                            {
                                "$ref": "#/components/schemas/APIProject"
                            },
                            {
                                "type": "string"
                            }
                        ]
                    },
                    "role": {
                        "anyOf": [
                            {
                                "$ref": "#/components/schemas/Role"
                            },
                            {
                                "type": "string"
                            },
                            {
                                "type": "string",
                                "enum": [
                                    "superuser"
                                ]
                            }
                        ]
                    },
                    "creator": {
                        "anyOf": [
                            {
                                "$ref": "#/components/schemas/APIUser"
                            },
                            {
                                "type": "string"
                            }
                        ]
                    },
                    "via": {
                        "type": "string"
                    },
                    "domain": {
                        "type": "string"
                    },
                    "canAddGroups": {
                        "type": "boolean"
                    },
                    "denyMembersManagement": {
                        "type": "boolean"
                    },
                    "status": {
                        "type": "string"
                    },
                    "archived": {
                        "type": "boolean"
                    }
                },
                "required": [
                    "id",
                    "member",
                    "project",
                    "role",
                    "creator",
                    "via",
                    "createdAt",
                    "updatedAt"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "AddMembersBatchPayload": {
                "properties": {
                    "via": {
                        "type": "string"
                    },
                    "denyMembersManagement": {
                        "type": "boolean"
                    },
                    "skip_response": {
                        "type": "boolean"
                    },
                    "skip_welcome_email": {
                        "type": "boolean"
                    },
                    "role": {
                        "$ref": "#/components/schemas/Role"
                    },
                    "users": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "role",
                    "users"
                ],
                "type": "object"
            },
            "ClientContributor": {
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "email": {
                        "type": "string"
                    },
                    "username": {
                        "type": "string"
                    },
                    "firstName": {
                        "type": "string"
                    },
                    "lastName": {
                        "type": "string"
                    },
                    "avatar": {
                        "type": "string"
                    },
                    "domain": {
                        "type": "string"
                    },
                    "lastLogin": {
                        "type": "number",
                        "format": "double"
                    },
                    "createdAt": {
                        "type": "number",
                        "format": "double"
                    },
                    "role": {
                        "$ref": "#/components/schemas/Role"
                    },
                    "type": {
                        "type": "string"
                    },
                    "groups": {
                        "items": {
                            "$ref": "#/components/schemas/GroupCtx"
                        },
                        "type": "array"
                    },
                    "guest": {
                        "properties": {
                            "org": {
                                "type": "string"
                            },
                            "name": {
                                "type": "string"
                            },
                            "id": {
                                "type": "string"
                            }
                        },
                        "required": [
                            "id"
                        ],
                        "type": "object"
                    },
                    "membershipType": {
                        "$ref": "#/components/schemas/DLEntityType"
                    },
                    "denyMembersManagement": {
                        "type": "boolean"
                    },
                    "membershipEntityId": {
                        "type": "string"
                    }
                },
                "required": [
                    "id",
                    "email",
                    "username",
                    "firstName",
                    "domain",
                    "createdAt",
                    "role",
                    "membershipType",
                    "membershipEntityId"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "AddMemberPayload": {
                "properties": {
                    "via": {
                        "type": "string"
                    },
                    "denyMembersManagement": {
                        "type": "boolean"
                    },
                    "can_add_groups": {
                        "type": "boolean"
                    },
                    "skip_welcome_email": {
                        "type": "boolean"
                    },
                    "skip_response": {
                        "type": "boolean"
                    },
                    "role": {
                        "$ref": "#/components/schemas/Role"
                    }
                },
                "required": [
                    "role"
                ],
                "type": "object"
            },
            "PatchMemberPayload": {
                "properties": {
                    "denyMembersManagement": {
                        "type": "boolean"
                    },
                    "role": {
                        "$ref": "#/components/schemas/Role"
                    }
                },
                "required": [
                    "role"
                ],
                "type": "object"
            },
            "UserInterest": {
                "enum": [
                    "dataManagement",
                    "dataScience",
                    "pipelines",
                    "annotation"
                ],
                "type": "string"
            },
            "updateMyDetailsPayload": {
                "properties": {
                    "cookieApproval": {
                        "type": "number",
                        "format": "double"
                    },
                    "interest": {
                        "$ref": "#/components/schemas/UserInterest"
                    },
                    "timezone": {
                        "type": "string"
                    },
                    "lastName": {
                        "type": "string"
                    },
                    "firstName": {
                        "type": "string"
                    },
                    "org": {
                        "type": "string",
                        "nullable": true
                    }
                },
                "type": "object"
            },
            "APIHashUser": {
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "url": {
                        "type": "string"
                    },
                    "createdAt": {
                        "type": "number",
                        "format": "double"
                    },
                    "updatedAt": {
                        "type": "number",
                        "format": "double"
                    },
                    "hash": {
                        "type": "string"
                    },
                    "username": {
                        "type": "string"
                    },
                    "avatar": {
                        "type": "string"
                    }
                },
                "required": [
                    "id",
                    "hash",
                    "username",
                    "avatar"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "PrecisionRecallInputRequest": {
                "properties": {
                    "modelId": {
                        "type": "string",
                        "description": "The model that calculated on it"
                    },
                    "datasetId": {
                        "type": "string",
                        "description": "The dataset that calculated on it"
                    },
                    "iouThreshold": {
                        "type": "number",
                        "format": "double",
                        "description": "The iouThreshold of the calculation"
                    },
                    "metric": {
                        "type": "string",
                        "description": "The metric to calculation the confusion Matrix"
                    }
                },
                "required": [
                    "modelId",
                    "datasetId",
                    "iouThreshold"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "Error": {
                "properties": {
                    "stack": {
                        "type": "string"
                    }
                },
                "type": "object",
                "additionalProperties": true
            },
            "LineData": {
                "properties": {
                    "y": {
                        "type": "number",
                        "format": "double"
                    },
                    "x": {
                        "type": "number",
                        "format": "double"
                    }
                },
                "required": [
                    "y",
                    "x"
                ],
                "type": "object"
            },
            "MatrixData": {
                "properties": {
                    "matrix": {
                        "items": {
                            "items": {
                                "type": "number",
                                "format": "double"
                            },
                            "type": "array"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "matrix"
                ],
                "type": "object"
            },
            "SummaryData": {
                "properties": {
                    "summary": {
                        "$ref": "#/components/schemas/Dictionary"
                    }
                },
                "required": [
                    "summary"
                ],
                "type": "object"
            },
            "MetricData": {
                "anyOf": [
                    {
                        "$ref": "#/components/schemas/LineData"
                    },
                    {
                        "$ref": "#/components/schemas/MatrixData"
                    },
                    {
                        "$ref": "#/components/schemas/SummaryData"
                    }
                ]
            },
            "MetricRequest": {
                "properties": {
                    "modelId": {
                        "type": "string",
                        "description": "The model the metric was generated on"
                    },
                    "datasetId": {
                        "type": "string",
                        "description": "The dataset the metric was generated on"
                    },
                    "figure": {
                        "type": "string",
                        "description": "The figure of the metric"
                    },
                    "legend": {
                        "type": "string",
                        "description": "The legend of the metric"
                    },
                    "data": {
                        "$ref": "#/components/schemas/MetricData",
                        "description": "The metric data"
                    }
                },
                "required": [
                    "modelId",
                    "figure",
                    "data"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "MetricDataTypes": {
                "enum": [
                    "line",
                    "matrix",
                    "summary"
                ],
                "type": "string"
            },
            "EntityContext": {
                "properties": {
                    "project": {
                        "type": "string",
                        "description": ""
                    },
                    "creator": {
                        "type": "string",
                        "description": ""
                    },
                    "org": {
                        "type": "string",
                        "description": ""
                    }
                },
                "type": "object",
                "additionalProperties": true,
                "description": ""
            },
            "APIMetric": {
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "url": {
                        "type": "string"
                    },
                    "createdAt": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "updatedAt": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "modelId": {
                        "type": "string",
                        "description": "The model the metric was generated on"
                    },
                    "datasetId": {
                        "type": "string",
                        "description": "The dataset the metric was generated on"
                    },
                    "figure": {
                        "type": "string",
                        "description": "The figure of the metric"
                    },
                    "legend": {
                        "type": "string",
                        "description": "The legend of the metric"
                    },
                    "data": {
                        "$ref": "#/components/schemas/MetricData",
                        "description": "The metric data"
                    },
                    "type": {
                        "$ref": "#/components/schemas/MetricDataTypes"
                    },
                    "context": {
                        "$ref": "#/components/schemas/EntityContext"
                    }
                },
                "required": [
                    "id",
                    "url",
                    "createdAt",
                    "updatedAt",
                    "modelId",
                    "datasetId",
                    "figure",
                    "data",
                    "type",
                    "context"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "CursorPageAPISetting": {
                "properties": {
                    "totalItemsCount": {
                        "type": "number",
                        "format": "double"
                    },
                    "items": {
                        "items": {
                            "$ref": "#/components/schemas/APIMetric",
                            "anyOf": [
                                {
                                    "$ref": "#/components/schemas/APIFeatureFlag"
                                },
                                {
                                    "$ref": "#/components/schemas/APIUserSetting"
                                }
                            ]
                        },
                        "type": "array"
                    },
                    "totalPagesCount": {
                        "type": "number",
                        "format": "double"
                    },
                    "hasNextPage": {
                        "type": "boolean"
                    }
                },
                "required": [
                    "totalItemsCount",
                    "items",
                    "totalPagesCount",
                    "hasNextPage",
                    "totalItemsCount",
                    "items",
                    "totalPagesCount",
                    "hasNextPage"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "ModelOperationTypes": {
                "enum": [
                    "train",
                    "predict",
                    "evaluate",
                    "deploy"
                ],
                "type": "string"
            },
            "QueryModel": {
                "properties": {
                    "resource": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/QueryResource"
                            },
                            {
                                "$ref": "#/components/schemas/QueryResource"
                            }
                        ],
                        "nullable": true
                    },
                    "filter": {
                        "nullable": true
                    },
                    "sort": {
                        "nullable": true
                    },
                    "page": {
                        "type": "number",
                        "format": "double",
                        "nullable": true
                    },
                    "pageSize": {
                        "type": "number",
                        "format": "double",
                        "nullable": true
                    },
                    "type": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/ModelOperationTypes"
                            }
                        ],
                        "nullable": true
                    }
                },
                "required": [
                    "filter",
                    "filter"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "EntityScopeLevel": {
                "enum": [
                    "private",
                    "project",
                    "org",
                    "public"
                ],
                "type": "string"
            },
            "ModelStatus": {
                "enum": [
                    "created",
                    "pending",
                    "training",
                    "trained",
                    "deployed",
                    "failed"
                ],
                "type": "string"
            },
            "APIModelConfiguration": {
                "properties": {
                    "label_to_id_map": {
                        "properties": {},
                        "additionalProperties": {
                            "anyOf": [
                                {
                                    "type": "number",
                                    "format": "double"
                                },
                                {
                                    "type": "string"
                                }
                            ]
                        },
                        "type": "object",
                        "nullable": true
                    }
                },
                "type": "object",
                "additionalProperties": true
            },
            "ModelInputType": {
                "enum": [
                    "image",
                    "video",
                    "text",
                    "audio"
                ],
                "type": "string"
            },
            "ArtifactType": {
                "enum": [
                    "item",
                    "local",
                    "link"
                ],
                "type": "string"
            },
            "ItemArtifact": {
                "properties": {
                    "type": {
                        "$ref": "#/components/schemas/ArtifactType"
                    },
                    "itemId": {
                        "type": "string"
                    }
                },
                "required": [
                    "type",
                    "itemId"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "LocalArtifact": {
                "properties": {
                    "type": {
                        "$ref": "#/components/schemas/ArtifactType"
                    },
                    "localPath": {
                        "type": "string"
                    }
                },
                "required": [
                    "type"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "ModelOperationMetadata": {
                "properties": {
                    "datasets": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "services": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "executions": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    }
                },
                "type": "object"
            },
            "APIModelMetadataSubsets": {
                "properties": {
                    "train": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/Dictionary"
                            }
                        ],
                        "nullable": true
                    },
                    "validation": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/Dictionary"
                            }
                        ],
                        "nullable": true
                    }
                },
                "type": "object",
                "additionalProperties": true
            },
            "APIModelMetadataSystem": {
                "properties": {
                    "archived": {
                        "type": "boolean",
                        "nullable": true
                    },
                    "ontologyId": {
                        "type": "string",
                        "nullable": true
                    },
                    "train": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/ModelOperationMetadata"
                            }
                        ],
                        "nullable": true
                    },
                    "predict": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/ModelOperationMetadata"
                            }
                        ],
                        "nullable": true
                    },
                    "evaluate": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/ModelOperationMetadata"
                            }
                        ],
                        "nullable": true
                    },
                    "deploy": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/ModelOperationMetadata"
                            }
                        ],
                        "nullable": true
                    },
                    "subsets": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/APIModelMetadataSubsets"
                            }
                        ],
                        "nullable": true
                    }
                },
                "type": "object",
                "additionalProperties": true
            },
            "APIModelMetadata": {
                "properties": {
                    "system": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/APIModelMetadataSystem"
                            }
                        ],
                        "nullable": true
                    }
                },
                "type": "object",
                "additionalProperties": true
            },
            "APIModel": {
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "url": {
                        "type": "string"
                    },
                    "createdAt": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "updatedAt": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "name": {
                        "type": "string",
                        "description": "The models name"
                    },
                    "packageId": {
                        "type": "string",
                        "description": "The model this model is derived from"
                    },
                    "description": {
                        "type": "string",
                        "description": "description of the model\ndefault 'My model'"
                    },
                    "scope": {
                        "$ref": "#/components/schemas/EntityScopeLevel",
                        "description": "Field that shows the scope in which the model exists\ndefault 'private'"
                    },
                    "status": {
                        "$ref": "#/components/schemas/ModelStatus",
                        "description": "the current models status\ndefault ModelStatus.CREATED"
                    },
                    "tags": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array",
                        "description": "Tags related to the model\ndefault []"
                    },
                    "labels": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array",
                        "description": "Labels related to the model\ndefault []"
                    },
                    "configuration": {
                        "$ref": "#/components/schemas/APIModelConfiguration",
                        "description": "The configuration that the model was created with\ndefault {}"
                    },
                    "inputType": {
                        "$ref": "#/components/schemas/ModelInputType",
                        "description": "Model Input Type\ndefault ModelInputType.IMAGE"
                    },
                    "outputType": {
                        "$ref": "#/components/schemas/AnnotationType",
                        "description": "Model Output Type\ndefault AnnotationType.BOX"
                    },
                    "datasetId": {
                        "type": "string",
                        "description": "The datasets id that the model is connected to"
                    },
                    "artifacts": {
                        "items": {
                            "anyOf": [
                                {
                                    "$ref": "#/components/schemas/ItemArtifact"
                                },
                                {
                                    "$ref": "#/components/schemas/LocalArtifact"
                                }
                            ]
                        },
                        "type": "array",
                        "description": "the artifacts of the model\nan artifact indicates where the model binaries sit"
                    },
                    "context": {
                        "$ref": "#/components/schemas/EntityContext",
                        "description": "The context which the model exists in"
                    },
                    "moduleName": {
                        "type": "string",
                        "description": "The module name of the model"
                    },
                    "metadata": {
                        "$ref": "#/components/schemas/APIModelMetadata"
                    }
                },
                "required": [
                    "id",
                    "url",
                    "createdAt",
                    "updatedAt",
                    "name",
                    "packageId",
                    "description",
                    "scope",
                    "status",
                    "tags",
                    "labels",
                    "configuration",
                    "inputType",
                    "outputType",
                    "context",
                    "moduleName"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "CreateModelRequest": {
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The models name"
                    },
                    "packageId": {
                        "type": "string",
                        "description": "The model this model is derived from"
                    },
                    "description": {
                        "type": "string",
                        "nullable": true,
                        "description": "description of the model\ndefault 'My model'"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "the id of the project the model belongs to"
                    },
                    "scope": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/EntityScopeLevel"
                            }
                        ],
                        "nullable": true,
                        "description": "Field that shows the scope in which the model exists\ndefault 'project'"
                    },
                    "status": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/ModelStatus"
                            }
                        ],
                        "nullable": true,
                        "description": "the current models status\ndefault ModelStatus.CREATED"
                    },
                    "tags": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array",
                        "nullable": true,
                        "description": "Tags related to the model\ndefault []"
                    },
                    "labels": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array",
                        "nullable": true,
                        "description": "Labels related to the model"
                    },
                    "configuration": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/APIModelConfiguration"
                            }
                        ],
                        "nullable": true,
                        "description": "The configuration that the model was created with\ndefault {}"
                    },
                    "inputType": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/ModelInputType"
                            }
                        ],
                        "nullable": true,
                        "description": "Model Input Type\ndefault ModelInputType.IMAGE"
                    },
                    "outputType": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/AnnotationType"
                            }
                        ],
                        "nullable": true,
                        "description": "Model Output Type\ndefault AnnotationType.BOX"
                    },
                    "datasetId": {
                        "type": "string",
                        "nullable": true,
                        "description": "The datasets id that the model is connected to"
                    },
                    "artifacts": {
                        "items": {
                            "anyOf": [
                                {
                                    "$ref": "#/components/schemas/ItemArtifact"
                                },
                                {
                                    "$ref": "#/components/schemas/LocalArtifact"
                                }
                            ]
                        },
                        "type": "array",
                        "nullable": true,
                        "description": "the artifacts of the model\nan artifact indicates where the model binaries sit"
                    },
                    "metadata": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/APIModelMetadata"
                            }
                        ],
                        "nullable": true
                    },
                    "moduleName": {
                        "type": "string",
                        "nullable": true,
                        "description": "The module name of the model"
                    }
                },
                "required": [
                    "name",
                    "packageId",
                    "projectId"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "PatchModelRequest": {
                "properties": {
                    "name": {
                        "type": "string",
                        "nullable": true,
                        "description": "The models name"
                    },
                    "description": {
                        "type": "string",
                        "nullable": true,
                        "description": "description of the model"
                    },
                    "datasetId": {
                        "type": "string",
                        "nullable": true,
                        "description": "The datasets id that the model is connected to"
                    },
                    "artifacts": {
                        "items": {
                            "anyOf": [
                                {
                                    "$ref": "#/components/schemas/ItemArtifact"
                                },
                                {
                                    "$ref": "#/components/schemas/LocalArtifact"
                                }
                            ]
                        },
                        "type": "array",
                        "nullable": true,
                        "description": "the artifacts of the model\nan artifact indicates where the model binaries sit"
                    },
                    "scope": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/EntityScopeLevel"
                            }
                        ],
                        "nullable": true,
                        "description": "Field that shows the scope in which the model exists"
                    },
                    "status": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/ModelStatus"
                            }
                        ],
                        "nullable": true,
                        "description": "the current models status"
                    },
                    "tags": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array",
                        "nullable": true,
                        "description": "Tags related to the model"
                    },
                    "labels": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array",
                        "nullable": true,
                        "description": "Labels related to the model"
                    },
                    "configuration": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/APIModelConfiguration"
                            }
                        ],
                        "nullable": true,
                        "description": "The configuration that the model was created with"
                    },
                    "inputType": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/ModelInputType"
                            }
                        ],
                        "nullable": true,
                        "description": "Model Input Type"
                    },
                    "outputType": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/AnnotationType"
                            }
                        ],
                        "nullable": true,
                        "description": "Model Output Type"
                    },
                    "metadata": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/APIModelMetadata"
                            }
                        ],
                        "nullable": true
                    },
                    "moduleName": {
                        "type": "string",
                        "nullable": true,
                        "description": "The module name of the model"
                    }
                },
                "type": "object",
                "additionalProperties": true
            },
            "ExecutionStatus": {
                "type": "string",
                "enum": [
                    "created",
                    "in-progress",
                    "failed",
                    "success",
                    "canceled",
                    "rerun"
                ]
            },
            "ExecutionStatusReport": {
                "properties": {
                    "timestamp": {
                        "type": "string",
                        "format": "date-time",
                        "description": ""
                    },
                    "status": {
                        "$ref": "#/components/schemas/ExecutionStatus",
                        "enum": [
                            "created",
                            "in-progress",
                            "failed",
                            "success",
                            "canceled",
                            "rerun"
                        ],
                        "type": "string",
                        "description": ""
                    },
                    "message": {
                        "type": "string",
                        "description": ""
                    },
                    "percentComplete": {
                        "type": "number",
                        "format": "double",
                        "description": ""
                    },
                    "error": {
                        "$ref": "#/components/schemas/Dictionary"
                    },
                    "output": {
                        "$ref": "#/components/schemas/Dictionary"
                    },
                    "action": {
                        "type": "string",
                        "description": ""
                    },
                    "replicaId": {
                        "type": "string",
                        "description": ""
                    },
                    "replicaType": {
                        "type": "string",
                        "description": ""
                    }
                },
                "required": [
                    "timestamp",
                    "status",
                    "message",
                    "percentComplete",
                    "timestamp",
                    "status",
                    "message",
                    "percentComplete"
                ],
                "type": "object",
                "additionalProperties": true,
                "description": ""
            },
            "ExecutionPipelineStateReference": {
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "nodeId": {
                        "type": "string"
                    },
                    "executionId": {
                        "type": "string"
                    }
                },
                "required": [
                    "id",
                    "nodeId",
                    "executionId"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "IDate": {
                "anyOf": [
                    {
                        "type": "string",
                        "format": "date-time"
                    },
                    {
                        "type": "number",
                        "format": "double"
                    },
                    {
                        "type": "string"
                    }
                ]
            },
            "Execution": {
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "A globally unique identifier for the Entity."
                    },
                    "clientId": {
                        "type": "string",
                        "description": "A local identifier for the Entity, unique within the client."
                    },
                    "creator": {
                        "type": "string",
                        "description": "The creator of the Entity."
                    },
                    "createdAt": {
                        "type": "string",
                        "format": "date-time",
                        "description": "The date and time when the Entity was created."
                    },
                    "updatedAt": {
                        "type": "string",
                        "format": "date-time",
                        "description": "The date and time when the Entity was last updated."
                    },
                    "updatedBy": {
                        "type": "string",
                        "description": "The user who last updated the Entity."
                    },
                    "attempts": {
                        "type": "number",
                        "format": "double"
                    },
                    "maxAttempts": {
                        "type": "number",
                        "format": "double"
                    },
                    "toTerminate": {
                        "type": "boolean"
                    },
                    "input": {
                        "$ref": "#/components/schemas/Dictionary"
                    },
                    "output": {
                        "$ref": "#/components/schemas/Dictionary"
                    },
                    "feedbackQueue": {
                        "properties": {
                            "routing": {
                                "type": "string"
                            },
                            "exchange": {
                                "type": "string"
                            }
                        },
                        "required": [
                            "routing",
                            "exchange"
                        ],
                        "type": "object"
                    },
                    "status": {
                        "items": {
                            "$ref": "#/components/schemas/ExecutionStatusReport"
                        },
                        "type": "array"
                    },
                    "statusLog": {
                        "items": {
                            "$ref": "#/components/schemas/ExecutionStatusReport"
                        },
                        "type": "array"
                    },
                    "latestStatus": {
                        "$ref": "#/components/schemas/ExecutionStatusReport"
                    },
                    "duration": {
                        "type": "number",
                        "format": "double"
                    },
                    "projectId": {
                        "type": "string"
                    },
                    "functionName": {
                        "type": "string"
                    },
                    "serviceId": {
                        "type": "string"
                    },
                    "triggerId": {
                        "type": "string"
                    },
                    "serviceName": {
                        "type": "string"
                    },
                    "packageId": {
                        "type": "string"
                    },
                    "packageName": {
                        "type": "string"
                    },
                    "packageRevision": {
                        "type": "number",
                        "format": "double"
                    },
                    "serviceVersion": {
                        "type": "number",
                        "format": "double"
                    },
                    "pipeline": {
                        "$ref": "#/components/schemas/ExecutionPipelineStateReference"
                    }
                },
                "required": [
                    "id",
                    "createdAt",
                    "updatedAt",
                    "creator",
                    "attempts",
                    "maxAttempts",
                    "toTerminate",
                    "input",
                    "feedbackQueue",
                    "status",
                    "statusLog",
                    "latestStatus",
                    "duration",
                    "projectId",
                    "serviceId",
                    "packageId",
                    "packageName",
                    "packageRevision",
                    "serviceVersion"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "Partial_CreateModelRequest_": {
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The models name"
                    },
                    "packageId": {
                        "type": "string",
                        "description": "The model this model is derived from"
                    },
                    "description": {
                        "type": "string",
                        "nullable": true,
                        "description": "description of the model\ndefault 'My model'"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "the id of the project the model belongs to"
                    },
                    "scope": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/EntityScopeLevel"
                            }
                        ],
                        "nullable": true,
                        "description": "Field that shows the scope in which the model exists\ndefault 'project'"
                    },
                    "status": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/ModelStatus"
                            }
                        ],
                        "nullable": true,
                        "description": "the current models status\ndefault ModelStatus.CREATED"
                    },
                    "tags": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array",
                        "nullable": true,
                        "description": "Tags related to the model\ndefault []"
                    },
                    "labels": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array",
                        "nullable": true,
                        "description": "Labels related to the model"
                    },
                    "configuration": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/APIModelConfiguration"
                            }
                        ],
                        "nullable": true,
                        "description": "The configuration that the model was created with\ndefault {}"
                    },
                    "inputType": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/ModelInputType"
                            }
                        ],
                        "nullable": true,
                        "description": "Model Input Type\ndefault ModelInputType.IMAGE"
                    },
                    "outputType": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/AnnotationType"
                            }
                        ],
                        "nullable": true,
                        "description": "Model Output Type\ndefault AnnotationType.BOX"
                    },
                    "datasetId": {
                        "type": "string",
                        "nullable": true,
                        "description": "The datasets id that the model is connected to"
                    },
                    "artifacts": {
                        "items": {
                            "anyOf": [
                                {
                                    "$ref": "#/components/schemas/ItemArtifact"
                                },
                                {
                                    "$ref": "#/components/schemas/LocalArtifact"
                                }
                            ]
                        },
                        "type": "array",
                        "nullable": true,
                        "description": "the artifacts of the model\nan artifact indicates where the model binaries sit"
                    },
                    "metadata": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/APIModelMetadata"
                            }
                        ],
                        "nullable": true
                    },
                    "moduleName": {
                        "type": "string",
                        "nullable": true,
                        "description": "The module name of the model"
                    }
                },
                "type": "object",
                "description": "Make all properties in T optional"
            },
            "APICopyEnvironmentSpec": {
                "properties": {
                    "cloneModelRequest": {
                        "$ref": "#/components/schemas/Partial_CreateModelRequest_"
                    },
                    "fromDatasetId": {
                        "type": "string"
                    },
                    "fromProjectId": {
                        "type": "string"
                    },
                    "cloneDatasetName": {
                        "type": "string"
                    },
                    "fromDatasetFilter": {
                        "$ref": "#/components/schemas/Dictionary"
                    },
                    "fromArtifactItemId": {
                        "type": "string",
                        "nullable": true
                    },
                    "clonedModelId": {
                        "type": "string",
                        "nullable": true
                    },
                    "clonedBucketItemId": {
                        "type": "string",
                        "nullable": true
                    },
                    "clonedDatasetId": {
                        "type": "string",
                        "nullable": true
                    }
                },
                "required": [
                    "cloneModelRequest",
                    "fromDatasetId",
                    "fromProjectId",
                    "cloneDatasetName"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "ModelJoinMap": {
                "properties": {},
                "type": "object",
                "additionalProperties": {
                    "properties": {
                        "items": {
                            "items": {},
                            "type": "array"
                        },
                        "ids": {
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "modelName": {
                            "type": "string"
                        }
                    },
                    "required": [
                        "items",
                        "ids",
                        "modelName"
                    ],
                    "type": "object"
                }
            },
            "ServiceRuntime": {
                "description": "",
                "properties": {},
                "type": "object"
            },
            "ServiceVersions": {
                "description": "",
                "properties": {
                    "dtlpy": {
                        "type": "string",
                        "description": ""
                    },
                    "runner": {
                        "type": "string",
                        "description": ""
                    },
                    "proxy": {
                        "type": "string",
                        "description": ""
                    },
                    "verify": {
                        "type": "boolean",
                        "description": ""
                    }
                },
                "type": "object"
            },
            "Panel": {
                "description": "",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": ""
                    },
                    "role": {
                        "enum": [
                            "owner",
                            "annotator",
                            "engineer",
                            "annotationManager"
                        ],
                        "type": "string",
                        "description": ""
                    }
                },
                "type": "object",
                "required": [
                    "name",
                    "role"
                ]
            },
            "IServiceAppConfig": {
                "description": "",
                "properties": {
                    "isCustomServer": {
                        "type": "boolean",
                        "description": ""
                    }
                },
                "type": "object"
            },
            "Crashloop": {
                "description": "",
                "properties": {
                    "time": {
                        "type": "string",
                        "format": "date-time",
                        "description": ""
                    },
                    "action": {
                        "enum": [
                            "deactivate"
                        ],
                        "type": "string",
                        "description": ""
                    },
                    "reason": {
                        "enum": [
                            "depletion"
                        ],
                        "type": "string",
                        "description": ""
                    }
                },
                "type": "object",
                "required": [
                    "time",
                    "action"
                ]
            },
            "ServiceMode": {
                "description": "",
                "properties": {
                    "type": {
                        "enum": [
                            "debug",
                            "regular"
                        ],
                        "type": "string",
                        "description": ""
                    }
                },
                "type": "object",
                "required": [
                    "type"
                ]
            },
            "ServiceMetadata": {
                "description": "",
                "properties": {
                    "user": {
                        "$ref": "#/components/schemas/Dictionary"
                    },
                    "system": {
                        "$ref": "#/components/schemas/Dictionary"
                    },
                    "ml": {
                        "type": "object",
                        "properties": {
                            "modelId": {
                                "type": "string",
                                "description": ""
                            },
                            "modelOperation": {
                                "type": "string",
                                "description": ""
                            }
                        },
                        "description": ""
                    }
                },
                "type": "object"
            },
            "APIServiceCompositionElement": {
                "description": "",
                "properties": {
                    "state": {
                        "type": "object",
                        "properties": {
                            "status": {
                                "enum": [
                                    "uninstalled",
                                    "installed",
                                    "attached",
                                    "failed",
                                    "pause",
                                    "resume"
                                ],
                                "type": "string",
                                "description": ""
                            },
                            "serviceId": {
                                "type": "string",
                                "description": ""
                            },
                            "errorMessage": {
                                "type": "string",
                                "description": ""
                            },
                            "errorDate": {
                                "type": "string",
                                "format": "date-time",
                                "description": ""
                            }
                        },
                        "description": ""
                    },
                    "id": {
                        "type": "string",
                        "description": ""
                    },
                    "packageName": {
                        "type": "string",
                        "description": ""
                    },
                    "uiHooks": {
                        "type": "array",
                        "items": {
                            "type": "object"
                        },
                        "description": ""
                    },
                    "shareable": {
                        "type": "boolean",
                        "description": ""
                    },
                    "packageId": {
                        "type": "string",
                        "description": ""
                    },
                    "appId": {
                        "type": "string",
                        "description": ""
                    },
                    "packageRevision": {
                        "type": "string",
                        "description": ""
                    },
                    "initParams": {
                        "type": "object",
                        "description": ""
                    },
                    "runtime": {
                        "$ref": "#/components/schemas/ServiceRuntime"
                    },
                    "useUserJwt": {
                        "type": "boolean",
                        "description": ""
                    },
                    "botUserName": {
                        "type": "string",
                        "description": ""
                    },
                    "versions": {
                        "$ref": "#/components/schemas/ServiceVersions"
                    },
                    "moduleName": {
                        "type": "string",
                        "description": ""
                    },
                    "global": {
                        "type": "boolean",
                        "description": ""
                    },
                    "active": {
                        "type": "boolean",
                        "description": ""
                    },
                    "runExecutionAsProcess": {
                        "type": "boolean",
                        "description": ""
                    },
                    "executionTimeout": {
                        "type": "number",
                        "format": "double",
                        "description": ""
                    },
                    "drainTime": {
                        "type": "number",
                        "format": "double",
                        "description": ""
                    },
                    "onReset": {
                        "enum": [
                            "rerun",
                            "failed"
                        ],
                        "type": "string",
                        "description": ""
                    },
                    "name": {
                        "type": "string",
                        "description": ""
                    },
                    "projectId": {
                        "type": "string",
                        "description": ""
                    },
                    "driverId": {
                        "type": "string",
                        "description": ""
                    },
                    "version": {
                        "type": "string",
                        "description": ""
                    },
                    "url": {
                        "type": "string",
                        "description": ""
                    },
                    "createdAt": {
                        "type": "string",
                        "format": "date-time",
                        "description": ""
                    },
                    "updatedAt": {
                        "type": "string",
                        "format": "date-time",
                        "description": ""
                    },
                    "creator": {
                        "type": "string",
                        "description": ""
                    },
                    "maxAttempts": {
                        "type": "number",
                        "format": "double",
                        "description": ""
                    },
                    "secrets": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": ""
                    },
                    "panels": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Panel"
                        },
                        "description": ""
                    },
                    "config": {
                        "$ref": "#/components/schemas/IServiceAppConfig"
                    },
                    "type": {
                        "enum": [
                            "system",
                            "regular"
                        ],
                        "type": "string",
                        "description": ""
                    },
                    "crashloop": {
                        "$ref": "#/components/schemas/Crashloop"
                    },
                    "mode": {
                        "$ref": "#/components/schemas/ServiceMode"
                    },
                    "metadata": {
                        "$ref": "#/components/schemas/ServiceMetadata"
                    }
                },
                "type": "object",
                "required": [
                    "state",
                    "id",
                    "packageId",
                    "initParams",
                    "runtime",
                    "useUserJwt",
                    "botUserName",
                    "versions",
                    "moduleName",
                    "runExecutionAsProcess",
                    "executionTimeout",
                    "drainTime",
                    "onReset",
                    "name",
                    "projectId",
                    "driverId",
                    "version",
                    "url",
                    "createdAt",
                    "updatedAt",
                    "creator"
                ]
            },
            "TriggerOperation": {
                "description": "",
                "properties": {
                    "type": {
                        "enum": [
                            "pipeline",
                            "function",
                            "webhook",
                            "rabbitmq"
                        ],
                        "type": "string",
                        "description": ""
                    },
                    "functionName": {
                        "type": "string",
                        "description": ""
                    },
                    "url": {
                        "type": "string",
                        "description": ""
                    },
                    "webHookId": {
                        "type": "string",
                        "description": ""
                    },
                    "serviceId": {
                        "type": "string",
                        "description": ""
                    }
                },
                "type": "object",
                "required": [
                    "type"
                ]
            },
            "ICompositionTrigger": {
                "description": "",
                "properties": {
                    "namespace": {
                        "type": "string",
                        "description": ""
                    },
                    "name": {
                        "type": "string",
                        "description": ""
                    },
                    "triggerId": {
                        "type": "string",
                        "description": ""
                    },
                    "projectId": {
                        "type": "string",
                        "description": ""
                    },
                    "type": {
                        "enum": [
                            "Event",
                            "Cron"
                        ],
                        "type": "string",
                        "description": ""
                    },
                    "spec": {
                        "type": "object",
                        "properties": {
                            "resource": {
                                "enum": [
                                    "Dataset",
                                    "Item",
                                    "Annotation",
                                    "ItemStatus",
                                    "Task",
                                    "Assignment",
                                    "Model"
                                ],
                                "type": "string",
                                "description": ""
                            },
                            "actions": {
                                "type": "array",
                                "items": {
                                    "enum": [
                                        "Created",
                                        "Updated",
                                        "Deleted",
                                        "statusChanged",
                                        "taskAssigned",
                                        "Clone"
                                    ],
                                    "type": "string"
                                },
                                "description": ""
                            },
                            "executionMode": {
                                "enum": [
                                    "Once",
                                    "Always"
                                ],
                                "type": "string",
                                "description": ""
                            },
                            "filter": {
                                "type": "string",
                                "description": ""
                            },
                            "operation": {
                                "$ref": "#/components/schemas/TriggerOperation"
                            },
                            "cron": {
                                "type": "string",
                                "description": ""
                            },
                            "startAt": {
                                "type": "string",
                                "format": "date-time",
                                "description": ""
                            },
                            "endAt": {
                                "type": "string",
                                "format": "date-time",
                                "description": ""
                            },
                            "input": {
                                "$ref": "#/components/schemas/Dictionary"
                            }
                        },
                        "description": ""
                    }
                },
                "type": "object",
                "required": [
                    "name",
                    "projectId",
                    "type",
                    "spec"
                ]
            },
            "PartialModule": {
                "description": "Make all properties in T optional",
                "properties": {},
                "type": "object"
            },
            "PackageRequirement": {
                "description": "",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": ""
                    },
                    "version": {
                        "type": "string",
                        "description": ""
                    },
                    "operator": {
                        "enum": [
                            "==",
                            ">",
                            "<",
                            "<=",
                            ">="
                        ],
                        "type": "string",
                        "description": ""
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ]
            },
            "Codebase": {
                "description": "",
                "properties": {
                    "type": {
                        "enum": [
                            "item",
                            "git",
                            "filesystem",
                            "local"
                        ],
                        "type": "string",
                        "description": ""
                    }
                },
                "type": "object",
                "required": [
                    "type"
                ]
            },
            "ICompositionPackage": {
                "description": "",
                "properties": {
                    "state": {
                        "type": "object",
                        "properties": {
                            "status": {
                                "enum": [
                                    "installed",
                                    "deleted",
                                    "placed"
                                ],
                                "type": "string",
                                "description": ""
                            }
                        },
                        "description": ""
                    },
                    "packageId": {
                        "type": "string",
                        "description": ""
                    },
                    "codebaseId": {
                        "type": "string",
                        "description": ""
                    },
                    "entryFile": {
                        "type": "string",
                        "description": ""
                    },
                    "code": {
                        "type": "string",
                        "description": ""
                    },
                    "module": {
                        "$ref": "#/components/schemas/PartialModule"
                    },
                    "name": {
                        "type": "string",
                        "description": ""
                    },
                    "type": {
                        "enum": [
                            "codebase",
                            "code"
                        ],
                        "type": "string",
                        "description": ""
                    },
                    "requirements": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/PackageRequirement"
                        },
                        "description": ""
                    },
                    "codebase": {
                        "$ref": "#/components/schemas/Codebase"
                    },
                    "nodeId": {
                        "type": "string",
                        "description": ""
                    }
                },
                "type": "object",
                "required": [
                    "module",
                    "name"
                ]
            },
            "ICompositionTask": {
                "description": "",
                "properties": {
                    "datasetId": {
                        "type": "string",
                        "description": ""
                    },
                    "taskOwner": {
                        "type": "string",
                        "description": ""
                    },
                    "recipeId": {
                        "type": "string",
                        "description": ""
                    },
                    "name": {
                        "type": "string",
                        "description": ""
                    },
                    "dueDate": {
                        "type": "number",
                        "format": "double",
                        "description": ""
                    },
                    "state": {
                        "type": "object",
                        "properties": {
                            "status": {
                                "enum": [
                                    "open",
                                    "dismissed",
                                    "completed",
                                    "completed with issues",
                                    "in progress"
                                ],
                                "type": "string",
                                "description": ""
                            },
                            "taskId": {
                                "type": "string",
                                "description": ""
                            }
                        },
                        "description": ""
                    },
                    "metadata": {
                        "$ref": "#/components/schemas/Dictionary"
                    },
                    "workload": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/TaskWorkload"
                        },
                        "description": ""
                    },
                    "availableActions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ItemAction"
                        },
                        "description": ""
                    },
                    "nodeId": {
                        "type": "string",
                        "description": ""
                    },
                    "taskType": {
                        "enum": [
                            "annotation",
                            "qa"
                        ],
                        "type": "string",
                        "description": ""
                    }
                },
                "type": "object",
                "required": [
                    "datasetId",
                    "taskOwner",
                    "recipeId",
                    "name",
                    "dueDate",
                    "state",
                    "metadata",
                    "nodeId",
                    "taskType"
                ]
            },
            "IModel": {
                "description": "",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": ""
                    },
                    "name": {
                        "type": "string",
                        "description": "The models name"
                    },
                    "description": {
                        "type": "string",
                        "description": "description of the model"
                    },
                    "scope": {
                        "enum": [
                            "private",
                            "project",
                            "org",
                            "public"
                        ],
                        "type": "string",
                        "description": "Field that shows the scope in which the model exists"
                    },
                    "status": {
                        "enum": [
                            "created",
                            "pending",
                            "training",
                            "trained",
                            "deployed",
                            "failed"
                        ],
                        "type": "string",
                        "description": "the current models status"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags related to the model"
                    },
                    "labels": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Labels related to the model"
                    },
                    "configuration": {
                        "$ref": "#/components/schemas/Dictionary"
                    },
                    "inputType": {
                        "enum": [
                            "image",
                            "video",
                            "text",
                            "audio"
                        ],
                        "type": "string",
                        "description": "Model Input Type"
                    },
                    "outputType": {
                        "enum": [
                            "class",
                            "point",
                            "line",
                            "box",
                            "cube",
                            "segment",
                            "ellipse",
                            "binary",
                            "note",
                            "polyline",
                            "comparison",
                            "recording",
                            "subtitle",
                            "item_description",
                            "text_mark",
                            "pose",
                            "cube_3d",
                            "semantic_3d",
                            "polyline_3d",
                            "pdf_text",
                            "text",
                            "ref_image",
                            "ref_semantic_3d"
                        ],
                        "type": "string",
                        "description": "Model Output Type"
                    },
                    "datasetId": {
                        "type": "string",
                        "description": "The datasets id that the model is connected to"
                    },
                    "artifacts": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Dictionary"
                        },
                        "description": "the artifacts of the model\nan artifact indicates where the model binaries sit"
                    },
                    "context": {
                        "$ref": "#/components/schemas/EntityContext"
                    },
                    "moduleName": {
                        "type": "string",
                        "description": "The module name of the model"
                    },
                    "metadata": {
                        "$ref": "#/components/schemas/Dictionary"
                    }
                },
                "type": "object",
                "required": [
                    "name",
                    "description",
                    "scope",
                    "status",
                    "tags",
                    "labels",
                    "configuration",
                    "inputType",
                    "outputType",
                    "context"
                ]
            },
            "ICompositionElementState": {
                "description": "",
                "properties": {
                    "status": {
                        "enum": [
                            "uninstalled",
                            "installed",
                            "attached",
                            "failed",
                            "pause",
                            "resume"
                        ],
                        "type": "string",
                        "description": ""
                    },
                    "serviceId": {
                        "type": "string",
                        "description": ""
                    },
                    "executionId": {
                        "type": "string",
                        "description": ""
                    },
                    "errorMessage": {
                        "type": "string",
                        "description": ""
                    },
                    "errorDate": {
                        "type": "string",
                        "format": "date-time",
                        "description": ""
                    }
                },
                "type": "object",
                "required": [
                    "status"
                ]
            },
            "ServiceConfig": {
                "description": "",
                "properties": {
                    "initParams": {
                        "type": "object",
                        "description": ""
                    },
                    "runtime": {
                        "$ref": "#/components/schemas/ServiceRuntime"
                    },
                    "useUserJwt": {
                        "type": "boolean",
                        "description": ""
                    },
                    "botUserName": {
                        "type": "string",
                        "description": ""
                    },
                    "versions": {
                        "$ref": "#/components/schemas/ServiceVersions"
                    },
                    "moduleName": {
                        "type": "string",
                        "description": ""
                    },
                    "global": {
                        "type": "boolean",
                        "description": ""
                    },
                    "active": {
                        "type": "boolean",
                        "description": ""
                    },
                    "runExecutionAsProcess": {
                        "type": "boolean",
                        "description": ""
                    },
                    "executionTimeout": {
                        "type": "number",
                        "format": "double",
                        "description": ""
                    },
                    "onReset": {
                        "type": "string",
                        "description": ""
                    },
                    "name": {
                        "type": "string",
                        "description": ""
                    },
                    "maxAttempts": {
                        "type": "number",
                        "format": "double",
                        "description": ""
                    },
                    "secrets": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": ""
                    }
                },
                "type": "object"
            },
            "ICompositionModel": {
                "description": "",
                "properties": {
                    "model": {
                        "$ref": "#/components/schemas/IModel"
                    },
                    "state": {
                        "$ref": "#/components/schemas/ICompositionElementState"
                    },
                    "modelId": {
                        "type": "string",
                        "description": ""
                    },
                    "nodeId": {
                        "type": "string",
                        "description": ""
                    },
                    "serviceConfig": {
                        "$ref": "#/components/schemas/ServiceConfig"
                    },
                    "action": {
                        "enum": [
                            "train",
                            "predict",
                            "evaluate",
                            "deploy"
                        ],
                        "type": "string",
                        "description": ""
                    },
                    "metadata": {
                        "$ref": "#/components/schemas/Dictionary"
                    },
                    "inputs": {
                        "$ref": "#/components/schemas/Dictionary"
                    }
                },
                "type": "object"
            },
            "NotificationEntityContext": {
                "description": "",
                "properties": {
                    "project": {
                        "type": "string",
                        "description": ""
                    },
                    "org": {
                        "type": "string",
                        "description": ""
                    },
                    "creator": {
                        "type": "string",
                        "description": ""
                    }
                },
                "type": "object",
                "required": [
                    "project",
                    "org",
                    "creator"
                ]
            },
            "FilterTarget": {
                "description": "",
                "properties": {
                    "project": {
                        "type": "string",
                        "description": ""
                    },
                    "org": {
                        "type": "string",
                        "description": ""
                    },
                    "userId": {
                        "type": "string",
                        "description": ""
                    }
                },
                "type": "object"
            },
            "NotificationEventContext": {
                "description": "",
                "properties": {
                    "project": {
                        "type": "string",
                        "description": ""
                    },
                    "org": {
                        "type": "string",
                        "description": ""
                    },
                    "pipeline": {
                        "type": "string",
                        "description": ""
                    },
                    "service": {
                        "type": "string",
                        "description": ""
                    },
                    "node": {
                        "type": "string",
                        "description": ""
                    },
                    "taskId": {
                        "type": "string",
                        "description": ""
                    },
                    "assignmentId": {
                        "type": "string",
                        "description": ""
                    },
                    "userId": {
                        "type": "string",
                        "description": ""
                    },
                    "member": {
                        "type": "string",
                        "description": ""
                    },
                    "creator": {
                        "type": "string",
                        "description": ""
                    },
                    "model": {
                        "type": "string",
                        "description": ""
                    },
                    "modelOperation": {
                        "type": "string",
                        "description": ""
                    },
                    "package": {
                        "type": "string",
                        "description": ""
                    },
                    "cycle": {
                        "type": "string",
                        "description": ""
                    },
                    "trigger": {
                        "type": "string",
                        "description": ""
                    }
                },
                "type": "object"
            },
            "ICompositionFilter": {
                "description": "",
                "properties": {
                    "state": {
                        "type": "object",
                        "properties": {
                            "filterId": {
                                "type": "string",
                                "description": ""
                            },
                            "status": {
                                "enum": [
                                    "uninstalled",
                                    "installed",
                                    "attached",
                                    "failed",
                                    "pause",
                                    "resume"
                                ],
                                "type": "string",
                                "description": ""
                            },
                            "errorMessage": {
                                "type": "string",
                                "description": ""
                            },
                            "errorDate": {
                                "type": "string",
                                "format": "date-time",
                                "description": ""
                            }
                        },
                        "description": ""
                    },
                    "target": {
                        "$ref": "#/components/schemas/FilterTarget"
                    },
                    "notificationCode": {
                        "type": "string",
                        "description": ""
                    },
                    "contextMatch": {
                        "$ref": "#/components/schemas/NotificationEventContext"
                    },
                    "frequency": {
                        "$ref": "#/components/schemas/Dictionary"
                    },
                    "context": {
                        "$ref": "#/components/schemas/NotificationEntityContext"
                    },
                    "notificationId": {
                        "type": "string",
                        "description": ""
                    },
                    "channelId": {
                        "type": "string",
                        "description": ""
                    }
                },
                "type": "object",
                "required": [
                    "frequency",
                    "context"
                ]
            },
            "ICompositionChannel": {
                "description": "",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": ""
                    },
                    "icon": {
                        "type": "string",
                        "description": ""
                    },
                    "description": {
                        "type": "string",
                        "description": ""
                    },
                    "global": {
                        "type": "boolean",
                        "description": ""
                    },
                    "type": {
                        "enum": [
                            "email",
                            "application",
                            "internal"
                        ],
                        "type": "string",
                        "description": ""
                    },
                    "metadata": {
                        "type": "object",
                        "properties": {
                            "serviceName": {
                                "type": "string",
                                "description": ""
                            },
                            "functionName": {
                                "type": "string",
                                "description": ""
                            },
                            "codebase": {
                                "$ref": "#/components/schemas/Codebase"
                            }
                        },
                        "description": ""
                    },
                    "state": {
                        "type": "object",
                        "properties": {
                            "channelId": {
                                "type": "string",
                                "description": ""
                            },
                            "status": {
                                "enum": [
                                    "uninstalled",
                                    "failed",
                                    "paused",
                                    "active",
                                    "created"
                                ],
                                "type": "string",
                                "description": ""
                            },
                            "errorMessage": {
                                "type": "string",
                                "description": ""
                            },
                            "errorDate": {
                                "type": "string",
                                "format": "date-time",
                                "description": ""
                            }
                        },
                        "description": ""
                    },
                    "context": {
                        "$ref": "#/components/schemas/NotificationEntityContext"
                    },
                    "filters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ICompositionFilter"
                        },
                        "description": ""
                    }
                },
                "type": "object",
                "required": [
                    "name",
                    "global",
                    "type",
                    "metadata",
                    "context"
                ]
            },
            "APIComposition": {
                "description": "",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": ""
                    },
                    "url": {
                        "type": "string",
                        "description": ""
                    },
                    "name": {
                        "type": "string",
                        "description": ""
                    },
                    "creator": {
                        "type": "string",
                        "description": ""
                    },
                    "createdAt": {
                        "type": "string",
                        "format": "date-time",
                        "description": ""
                    },
                    "updatedAt": {
                        "type": "string",
                        "format": "date-time",
                        "description": ""
                    },
                    "projectId": {
                        "type": "string",
                        "description": ""
                    },
                    "orgId": {
                        "type": "string",
                        "description": ""
                    },
                    "spec": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/APIServiceCompositionElement"
                        },
                        "description": "Array of services details"
                    },
                    "status": {
                        "enum": [
                            "Created",
                            "Initializing",
                            "Installed",
                            "Reconfiguring",
                            "Activated",
                            "Deactivated",
                            "Uninstalled",
                            "Terminating",
                            "Terminated",
                            "Updating",
                            "Failure"
                        ],
                        "type": "string",
                        "description": ""
                    },
                    "terminated": {
                        "type": "boolean",
                        "description": ""
                    },
                    "errorText": {
                        "type": "object",
                        "description": ""
                    },
                    "triggers": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ICompositionTrigger"
                        },
                        "description": "Array of services details"
                    },
                    "packages": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ICompositionPackage"
                        },
                        "description": "Array of packages details"
                    },
                    "tasks": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ICompositionTask"
                        },
                        "description": "Array of tasks details"
                    },
                    "models": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ICompositionModel"
                        },
                        "description": "Array of models details"
                    },
                    "channels": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ICompositionChannel"
                        },
                        "description": "Array of channels details"
                    },
                    "secrets": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Array of integrations ids - each one will be added to the service deployment as an environment variable"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "url",
                    "name",
                    "creator",
                    "createdAt",
                    "updatedAt",
                    "projectId",
                    "orgId",
                    "spec",
                    "status",
                    "terminated"
                ]
            },
            "IPostComposition": {
                "description": "",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The composition name"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The project where the composition should be install the entities"
                    },
                    "triggers": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ICompositionTrigger"
                        },
                        "description": "An array of triggers"
                    },
                    "packages": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ICompositionPackage"
                        },
                        "description": "An array of packages"
                    },
                    "tasks": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ICompositionTask"
                        },
                        "description": "An array of tasks"
                    },
                    "spec": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/APIServiceCompositionElement"
                        },
                        "description": "An array of services"
                    },
                    "channels": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ICompositionChannel"
                        },
                        "description": "Array of channels details"
                    },
                    "driverId": {
                        "type": "string",
                        "description": "The user cluster driver id - defining the compute cluster the server should connect to"
                    }
                },
                "type": "object",
                "required": [
                    "name",
                    "projectId",
                    "spec",
                    "driverId"
                ]
            },
            "CursorPageAPIComposition": {
                "description": "",
                "properties": {
                    "totalItemsCount": {
                        "type": "number",
                        "format": "double",
                        "description": ""
                    },
                    "items": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/APIComposition"
                        },
                        "description": ""
                    },
                    "totalPagesCount": {
                        "type": "number",
                        "format": "double",
                        "description": ""
                    },
                    "hasNextPage": {
                        "type": "boolean",
                        "description": ""
                    }
                },
                "type": "object",
                "required": [
                    "totalItemsCount",
                    "items",
                    "totalPagesCount",
                    "hasNextPage"
                ]
            },
            "INodeConfig": {
                "description": "",
                "properties": {
                    "package": {
                        "type": "object",
                        "properties": {
                            "name": {
                                "type": "string",
                                "description": ""
                            },
                            "type": {
                                "enum": [
                                    "codebase",
                                    "code"
                                ],
                                "type": "string",
                                "description": ""
                            },
                            "entryFile": {
                                "type": "string",
                                "description": ""
                            },
                            "code": {
                                "type": "string",
                                "description": ""
                            },
                            "requirements": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/PackageRequirement"
                                },
                                "description": ""
                            },
                            "requirementsFilename": {
                                "type": "string",
                                "description": ""
                            },
                            "codebase": {
                                "$ref": "#/components/schemas/Codebase"
                            },
                            "codebaseFilename": {
                                "type": "string",
                                "description": ""
                            }
                        },
                        "description": ""
                    }
                },
                "type": "object"
            },
            "NodeNamespace": {
                "description": "",
                "properties": {
                    "projectName": {
                        "type": "string",
                        "description": ""
                    },
                    "serviceName": {
                        "type": "string",
                        "description": ""
                    },
                    "functionName": {
                        "type": "string",
                        "description": ""
                    },
                    "moduleName": {
                        "type": "string",
                        "description": ""
                    },
                    "packageName": {
                        "type": "string",
                        "description": ""
                    }
                },
                "type": "object",
                "required": [
                    "projectName",
                    "serviceName",
                    "functionName"
                ]
            },
            "IODescriptor": {
                "description": "",
                "properties": {
                    "type": {
                        "enum": [
                            "Dataset",
                            "Item",
                            "Annotation",
                            "Execution",
                            "Task",
                            "Assignment",
                            "Service",
                            "Package",
                            "Project",
                            "Json",
                            "String",
                            "Number",
                            "Integer",
                            "Float",
                            "Boolean",
                            "Model",
                            "Recipe",
                            "Dataset[]",
                            "Item[]",
                            "Annotation[]",
                            "Execution[]",
                            "Task[]",
                            "Assignment[]",
                            "Service[]",
                            "Package[]",
                            "Project[]",
                            "Json[]",
                            "String[]",
                            "Number[]",
                            "Integer[]",
                            "Float[]",
                            "Boolean[]",
                            "Model[]",
                            "Recipe[]"
                        ],
                        "type": "string",
                        "description": ""
                    },
                    "name": {
                        "type": "string",
                        "description": ""
                    },
                    "portId": {
                        "type": "string",
                        "description": ""
                    },
                    "displayName": {
                        "type": "string",
                        "description": ""
                    },
                    "color": {
                        "type": "string",
                        "description": ""
                    },
                    "actionIcon": {
                        "type": "string",
                        "description": ""
                    },
                    "actions": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": ""
                    },
                    "portPercentage": {
                        "type": "number",
                        "format": "double",
                        "description": ""
                    },
                    "defaultValue": {
                        "type": "object",
                        "description": ""
                    },
                    "variableName": {
                        "type": "string",
                        "description": ""
                    }
                },
                "type": "object",
                "required": [
                    "type",
                    "name",
                    "portId"
                ]
            },
            "INodeInfo": {
                "description": "",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": ""
                    },
                    "counts": {
                        "type": "object",
                        "properties": {
                            "pending": {
                                "type": "number",
                                "format": "double",
                                "description": ""
                            },
                            "inProgress": {
                                "type": "number",
                                "format": "double",
                                "description": ""
                            },
                            "failed": {
                                "type": "number",
                                "format": "double",
                                "description": ""
                            },
                            "success": {
                                "type": "number",
                                "format": "double",
                                "description": ""
                            },
                            "queue": {
                                "type": "number",
                                "format": "double",
                                "description": ""
                            }
                        },
                        "description": ""
                    },
                    "stats": {
                        "type": "object",
                        "properties": {
                            "avgMs": {
                                "type": "number",
                                "format": "double",
                                "description": ""
                            },
                            "avgPerDay": {
                                "type": "number",
                                "format": "double",
                                "description": ""
                            }
                        },
                        "description": ""
                    },
                    "status": {
                        "enum": [
                            "pending",
                            "in-progress",
                            "failed",
                            "success",
                            "queue"
                        ],
                        "type": "string",
                        "description": ""
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "counts"
                ]
            },
            "PipelineNodeDescriptor": {
                "description": "",
                "properties": {
                    "metadata": {
                        "$ref": "#/components/schemas/Dictionary"
                    },
                    "appName": {
                        "type": "string",
                        "description": ""
                    },
                    "dpkName": {
                        "type": "string",
                        "description": ""
                    },
                    "id": {
                        "type": "string",
                        "description": ""
                    },
                    "config": {
                        "$ref": "#/components/schemas/INodeConfig"
                    },
                    "namespace": {
                        "$ref": "#/components/schemas/NodeNamespace"
                    },
                    "inputs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/IODescriptor"
                        },
                        "description": ""
                    },
                    "outputs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/IODescriptor"
                        },
                        "description": ""
                    },
                    "type": {
                        "enum": [
                            "code",
                            "function",
                            "task",
                            "merge",
                            "split",
                            "ml",
                            "storage",
                            "api",
                            "custom",
                            "updateVariable"
                        ],
                        "type": "string",
                        "description": ""
                    },
                    "projectId": {
                        "type": "string",
                        "description": ""
                    },
                    "name": {
                        "type": "string",
                        "description": ""
                    },
                    "info": {
                        "$ref": "#/components/schemas/INodeInfo"
                    }
                },
                "type": "object",
                "required": [
                    "metadata",
                    "id",
                    "namespace",
                    "inputs",
                    "outputs",
                    "type",
                    "name"
                ]
            },
            "PipelineNodeSource": {
                "description": "",
                "properties": {
                    "nodeId": {
                        "type": "string",
                        "description": ""
                    },
                    "portId": {
                        "type": "string",
                        "description": ""
                    }
                },
                "type": "object",
                "required": [
                    "nodeId",
                    "portId"
                ]
            },
            "PipelineNodeTarget": {
                "description": "",
                "properties": {
                    "nodeId": {
                        "type": "string",
                        "description": ""
                    },
                    "portId": {
                        "type": "string",
                        "description": ""
                    }
                },
                "type": "object",
                "required": [
                    "nodeId",
                    "portId"
                ]
            },
            "PipelineConnection": {
                "description": "",
                "properties": {
                    "src": {
                        "$ref": "#/components/schemas/PipelineNodeSource"
                    },
                    "tgt": {
                        "$ref": "#/components/schemas/PipelineNodeTarget"
                    },
                    "condition": {
                        "type": "string",
                        "description": ""
                    }
                },
                "type": "object",
                "required": [
                    "src",
                    "tgt"
                ]
            },
            "IStartNodeTrigger": {
                "description": "",
                "properties": {
                    "type": {
                        "enum": [
                            "Event",
                            "Cron"
                        ],
                        "type": "string",
                        "description": ""
                    },
                    "spec": {
                        "type": "object",
                        "properties": {
                            "resource": {
                                "enum": [
                                    "Dataset",
                                    "Item",
                                    "Annotation",
                                    "ItemStatus",
                                    "Task",
                                    "Assignment",
                                    "Model"
                                ],
                                "type": "string",
                                "description": ""
                            },
                            "actions": {
                                "type": "array",
                                "items": {
                                    "enum": [
                                        "Created",
                                        "Updated",
                                        "Deleted",
                                        "statusChanged",
                                        "taskAssigned",
                                        "Clone"
                                    ],
                                    "type": "string"
                                },
                                "description": ""
                            },
                            "executionMode": {
                                "enum": [
                                    "Once",
                                    "Always"
                                ],
                                "type": "string",
                                "description": ""
                            },
                            "filter": {
                                "$ref": "#/components/schemas/Dictionary"
                            }
                        },
                        "description": ""
                    },
                    "name": {
                        "type": "string",
                        "description": ""
                    }
                },
                "type": "object",
                "required": [
                    "type",
                    "spec"
                ]
            },
            "IStartNode": {
                "description": "",
                "properties": {
                    "nodeId": {
                        "type": "string",
                        "description": ""
                    },
                    "type": {
                        "enum": [
                            "root",
                            "trigger"
                        ],
                        "type": "string",
                        "description": ""
                    },
                    "trigger": {
                        "$ref": "#/components/schemas/IStartNodeTrigger"
                    }
                },
                "type": "object",
                "required": [
                    "nodeId",
                    "type"
                ]
            },
            "IPipelineSettings": {
                "description": "",
                "properties": {
                    "defaultResumeOption": {
                        "enum": [
                            "terminateExistingCycles",
                            "resumeExistingCycles"
                        ],
                        "type": "string",
                        "description": ""
                    },
                    "keepTriggersActive": {
                        "type": "boolean",
                        "description": ""
                    },
                    "activeTriggerAskAgain": {
                        "type": "boolean",
                        "description": ""
                    },
                    "lastUpdate": {
                        "type": "object",
                        "properties": {
                            "updatedBy": {
                                "type": "string",
                                "description": ""
                            },
                            "updatedAt": {
                                "type": "string",
                                "format": "date-time",
                                "description": ""
                            }
                        },
                        "description": ""
                    }
                },
                "type": "object",
                "required": [
                    "lastUpdate"
                ]
            },
            "PipelineVariable": {
                "description": "",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": ""
                    },
                    "name": {
                        "type": "string",
                        "description": ""
                    },
                    "reference": {
                        "type": "string",
                        "description": ""
                    },
                    "creator": {
                        "type": "string",
                        "description": ""
                    },
                    "value": {
                        "type": "object",
                        "description": ""
                    },
                    "type": {
                        "enum": [
                            "Dataset",
                            "Item",
                            "Annotation",
                            "Execution",
                            "Task",
                            "Assignment",
                            "Service",
                            "Package",
                            "Project",
                            "Json",
                            "String",
                            "Number",
                            "Integer",
                            "Float",
                            "Boolean",
                            "Model",
                            "Recipe",
                            "Dataset[]",
                            "Item[]",
                            "Annotation[]",
                            "Execution[]",
                            "Task[]",
                            "Assignment[]",
                            "Service[]",
                            "Package[]",
                            "Project[]",
                            "Json[]",
                            "String[]",
                            "Number[]",
                            "Integer[]",
                            "Float[]",
                            "Boolean[]",
                            "Model[]",
                            "Recipe[]"
                        ],
                        "type": "string",
                        "description": ""
                    },
                    "createdAt": {
                        "type": "string",
                        "format": "date-time",
                        "description": ""
                    },
                    "updatedAt": {
                        "type": "string",
                        "format": "date-time",
                        "description": ""
                    },
                    "description": {
                        "type": "string",
                        "description": ""
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "name",
                    "reference",
                    "creator",
                    "value",
                    "type"
                ]
            },
            "APIPipeline": {
                "description": "",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": ""
                    },
                    "url": {
                        "type": "string",
                        "description": ""
                    },
                    "name": {
                        "type": "string",
                        "description": ""
                    },
                    "creator": {
                        "type": "string",
                        "description": ""
                    },
                    "createdAt": {
                        "type": "string",
                        "format": "date-time",
                        "description": ""
                    },
                    "updatedAt": {
                        "type": "string",
                        "format": "date-time",
                        "description": ""
                    },
                    "projectId": {
                        "type": "string",
                        "description": ""
                    },
                    "orgId": {
                        "type": "string",
                        "description": ""
                    },
                    "compositionId": {
                        "type": "string",
                        "description": ""
                    },
                    "nodes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/PipelineNodeDescriptor"
                        },
                        "description": ""
                    },
                    "connections": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/PipelineConnection"
                        },
                        "description": ""
                    },
                    "description": {
                        "type": "string",
                        "description": ""
                    },
                    "preview": {
                        "type": "string",
                        "description": ""
                    },
                    "startNodes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/IStartNode"
                        },
                        "description": ""
                    },
                    "status": {
                        "enum": [
                            "Created",
                            "Initializing",
                            "Installed",
                            "Reconfiguring",
                            "Activated",
                            "Deactivated",
                            "Uninstalled",
                            "Terminating",
                            "Terminated",
                            "Updating",
                            "Failure"
                        ],
                        "type": "string",
                        "description": ""
                    },
                    "settings": {
                        "$ref": "#/components/schemas/IPipelineSettings"
                    },
                    "variables": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/PipelineVariable"
                        },
                        "description": ""
                    },
                    "resetTimestamp": {
                        "type": "string",
                        "format": "date-time",
                        "description": ""
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "url",
                    "name",
                    "creator",
                    "createdAt",
                    "updatedAt",
                    "projectId",
                    "orgId",
                    "nodes",
                    "connections",
                    "description",
                    "preview",
                    "status"
                ]
            },
            "IPostPipeline": {
                "description": "",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": ""
                    },
                    "projectId": {
                        "type": "string",
                        "description": ""
                    },
                    "startNodes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/IStartNode"
                        },
                        "description": ""
                    },
                    "spec": {
                        "type": "object",
                        "description": ""
                    },
                    "compositionId": {
                        "type": "string",
                        "description": ""
                    },
                    "description": {
                        "type": "string",
                        "description": ""
                    },
                    "preview": {
                        "type": "string",
                        "description": ""
                    },
                    "nodes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/PipelineNodeDescriptor"
                        },
                        "description": ""
                    },
                    "connections": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/PipelineConnection"
                        },
                        "description": ""
                    },
                    "secrets": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Array of integrations ids - each one will be added to the service deployment as an environment variable"
                    },
                    "variables": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/PipelineVariable"
                        },
                        "description": ""
                    }
                },
                "type": "object",
                "required": [
                    "name",
                    "projectId",
                    "description",
                    "preview",
                    "nodes",
                    "connections",
                    "secrets"
                ]
            },
            "IPipelineExecutionCount": {
                "description": "",
                "properties": {
                    "status": {
                        "enum": [
                            "pending",
                            "in-progress",
                            "failed",
                            "success",
                            "queue",
                            "terminated",
                            "rerun"
                        ],
                        "type": "string",
                        "description": ""
                    },
                    "count": {
                        "type": "number",
                        "format": "double",
                        "description": ""
                    }
                },
                "type": "object",
                "required": [
                    "status",
                    "count"
                ]
            },
            "IExecutionCount": {
                "description": "",
                "properties": {
                    "status": {
                        "enum": [
                            "created",
                            "in-progress",
                            "failed",
                            "success",
                            "canceled",
                            "rerun"
                        ],
                        "type": "string",
                        "description": ""
                    },
                    "count": {
                        "type": "number",
                        "format": "double",
                        "description": ""
                    }
                },
                "type": "object",
                "required": [
                    "status",
                    "count"
                ]
            },
            "INodeExecutionCount": {
                "description": "",
                "properties": {
                    "nodeId": {
                        "type": "string",
                        "description": ""
                    },
                    "statusCount": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/IExecutionCount"
                        },
                        "description": ""
                    }
                },
                "type": "object",
                "required": [
                    "nodeId",
                    "statusCount"
                ]
            },
            "IExecutionStatistics": {
                "description": "",
                "properties": {
                    "avgTimePerExecution": {
                        "type": "number",
                        "format": "double",
                        "description": ""
                    },
                    "avgExecutionsPerDay": {
                        "type": "number",
                        "format": "double",
                        "description": ""
                    }
                },
                "type": "object",
                "required": [
                    "avgTimePerExecution",
                    "avgExecutionsPerDay"
                ]
            },
            "INodeExecutionStatistics": {
                "description": "",
                "properties": {
                    "nodeId": {
                        "type": "string",
                        "description": ""
                    },
                    "executionStatistics": {
                        "$ref": "#/components/schemas/IExecutionStatistics"
                    }
                },
                "type": "object",
                "required": [
                    "nodeId",
                    "executionStatistics"
                ]
            },
            "IPipelineStatistics": {
                "description": "",
                "properties": {
                    "pipelineExecutionCounters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/IPipelineExecutionCount"
                        },
                        "description": ""
                    },
                    "nodeExecutionsCounters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/INodeExecutionCount"
                        },
                        "description": ""
                    },
                    "pipelineExecutionStatistics": {
                        "$ref": "#/components/schemas/IExecutionStatistics"
                    },
                    "nodeExecutionStatistics": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/INodeExecutionStatistics"
                        },
                        "description": ""
                    }
                },
                "type": "object",
                "required": [
                    "pipelineExecutionCounters",
                    "nodeExecutionsCounters"
                ]
            },
            "ExecuteOptionsBatchQuery": {
                "description": "",
                "properties": {
                    "filter": {
                        "$ref": "#/components/schemas/Dictionary"
                    },
                    "resource": {
                        "enum": [
                            "triggers",
                            "executions",
                            "services",
                            "packages",
                            "annotations",
                            "items",
                            "labels",
                            "tasks",
                            "datasets",
                            "assignments",
                            "directory",
                            "pipeline",
                            "pipelineState",
                            "pipelineTemplate",
                            "composition",
                            "resourceExecution",
                            "apps",
                            "dpks"
                        ],
                        "type": "string",
                        "description": ""
                    },
                    "context": {
                        "type": "object",
                        "properties": {
                            "datasets": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                },
                                "description": ""
                            },
                            "items": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                },
                                "description": ""
                            }
                        },
                        "description": ""
                    }
                },
                "type": "object",
                "required": [
                    "filter",
                    "resource"
                ]
            },
            "ExecuteOptionsBatch": {
                "description": "",
                "properties": {
                    "query": {
                        "$ref": "#/components/schemas/ExecuteOptionsBatchQuery"
                    },
                    "args": {
                        "$ref": "#/components/schemas/Dictionary"
                    }
                },
                "type": "object",
                "required": [
                    "query"
                ]
            },
            "ExecuteOptions": {
                "description": "",
                "properties": {
                    "pipeline": {
                        "type": "object",
                        "properties": {
                            "id": {
                                "type": "string",
                                "description": ""
                            },
                            "nodeId": {
                                "type": "string",
                                "description": ""
                            },
                            "input": {
                                "type": "object",
                                "description": ""
                            }
                        },
                        "description": ""
                    },
                    "batch": {
                        "$ref": "#/components/schemas/ExecuteOptionsBatch"
                    }
                },
                "type": "object",
                "required": [
                    "batch"
                ]
            },
            "NodeDescriptor": {
                "description": "",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": ""
                    },
                    "config": {
                        "$ref": "#/components/schemas/INodeConfig"
                    },
                    "namespace": {
                        "$ref": "#/components/schemas/NodeNamespace"
                    },
                    "inputs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/IODescriptor"
                        },
                        "description": ""
                    },
                    "outputs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/IODescriptor"
                        },
                        "description": ""
                    },
                    "type": {
                        "enum": [
                            "code",
                            "function",
                            "task",
                            "merge",
                            "split",
                            "ml",
                            "storage",
                            "api",
                            "custom",
                            "updateVariable"
                        ],
                        "type": "string",
                        "description": ""
                    },
                    "projectId": {
                        "type": "string",
                        "description": ""
                    },
                    "name": {
                        "type": "string",
                        "description": ""
                    },
                    "info": {
                        "$ref": "#/components/schemas/INodeInfo"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "namespace",
                    "inputs",
                    "outputs",
                    "type",
                    "name"
                ]
            },
            "CompositionStatusDescriptor": {
                "description": "",
                "properties": {
                    "running": {
                        "type": "number",
                        "format": "double",
                        "description": ""
                    },
                    "failed": {
                        "type": "number",
                        "format": "double",
                        "description": ""
                    },
                    "pending": {
                        "type": "number",
                        "format": "double",
                        "description": ""
                    },
                    "standBy": {
                        "type": "number",
                        "format": "double",
                        "description": ""
                    }
                },
                "type": "object",
                "required": [
                    "running",
                    "failed",
                    "pending",
                    "standBy"
                ]
            },
            "CursorPageAPIPipeline": {
                "description": "",
                "properties": {
                    "totalItemsCount": {
                        "type": "number",
                        "format": "double",
                        "description": ""
                    },
                    "items": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/APIPipeline"
                        },
                        "description": ""
                    },
                    "totalPagesCount": {
                        "type": "number",
                        "format": "double",
                        "description": ""
                    },
                    "hasNextPage": {
                        "type": "boolean",
                        "description": ""
                    }
                },
                "type": "object",
                "required": [
                    "totalItemsCount",
                    "items",
                    "totalPagesCount",
                    "hasNextPage"
                ]
            },
            "Boolean": {
                "description": "",
                "properties": {},
                "type": "object"
            },
            "ExecutionIO": {
                "description": "",
                "properties": {
                    "type": {
                        "enum": [
                            "Dataset",
                            "Item",
                            "Annotation",
                            "Execution",
                            "Task",
                            "Assignment",
                            "Service",
                            "Package",
                            "Project",
                            "Json",
                            "String",
                            "Number",
                            "Integer",
                            "Float",
                            "Boolean",
                            "Model",
                            "Recipe",
                            "Dataset[]",
                            "Item[]",
                            "Annotation[]",
                            "Execution[]",
                            "Task[]",
                            "Assignment[]",
                            "Service[]",
                            "Package[]",
                            "Project[]",
                            "Json[]",
                            "String[]",
                            "Number[]",
                            "Integer[]",
                            "Float[]",
                            "Boolean[]",
                            "Model[]",
                            "Recipe[]"
                        ],
                        "type": "string",
                        "description": ""
                    },
                    "name": {
                        "type": "string",
                        "description": ""
                    },
                    "portId": {
                        "type": "string",
                        "description": ""
                    },
                    "value": {
                        "type": "object",
                        "description": ""
                    }
                },
                "type": "object",
                "required": [
                    "type",
                    "name",
                    "portId"
                ]
            },
            "IPipelineNodeState": {
                "description": "",
                "properties": {
                    "createdAt": {
                        "type": "string",
                        "format": "date-time",
                        "description": ""
                    },
                    "updatedAt": {
                        "type": "string",
                        "format": "date-time",
                        "description": ""
                    },
                    "id": {
                        "type": "string",
                        "description": ""
                    },
                    "namespace": {
                        "$ref": "#/components/schemas/NodeNamespace"
                    },
                    "status": {
                        "enum": [
                            "pending",
                            "in-progress",
                            "failed",
                            "success",
                            "queue"
                        ],
                        "type": "string",
                        "description": ""
                    },
                    "ports": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ExecutionIO"
                        },
                        "description": ""
                    },
                    "serviceId": {
                        "type": "string",
                        "description": ""
                    },
                    "metadata": {
                        "$ref": "#/components/schemas/Dictionary"
                    },
                    "projectId": {
                        "type": "string",
                        "description": ""
                    },
                    "name": {
                        "type": "string",
                        "description": ""
                    },
                    "type": {
                        "enum": [
                            "code",
                            "function",
                            "task",
                            "merge",
                            "split",
                            "ml",
                            "storage",
                            "api",
                            "custom",
                            "updateVariable"
                        ],
                        "type": "string",
                        "description": ""
                    }
                },
                "type": "object",
                "required": [
                    "createdAt",
                    "updatedAt",
                    "id",
                    "namespace",
                    "status",
                    "ports",
                    "serviceId",
                    "metadata",
                    "projectId",
                    "name",
                    "type"
                ]
            },
            "INodeTransitionError": {
                "description": "",
                "properties": {
                    "sourceNodeName": {
                        "type": "string",
                        "description": ""
                    },
                    "sourceNodeId": {
                        "type": "string",
                        "description": ""
                    },
                    "targetNodeName": {
                        "type": "string",
                        "description": ""
                    },
                    "targetNodeId": {
                        "type": "string",
                        "description": ""
                    },
                    "error": {
                        "type": "object",
                        "description": ""
                    },
                    "displayMessage": {
                        "type": "string",
                        "description": ""
                    }
                },
                "type": "object",
                "required": [
                    "sourceNodeName",
                    "sourceNodeId",
                    "targetNodeName",
                    "targetNodeId",
                    "error",
                    "displayMessage"
                ]
            },
            "APIPipelineState": {
                "description": "",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": ""
                    },
                    "url": {
                        "type": "string",
                        "description": ""
                    },
                    "pipelineId": {
                        "type": "string",
                        "description": ""
                    },
                    "createdAt": {
                        "type": "string",
                        "format": "date-time",
                        "description": ""
                    },
                    "updatedAt": {
                        "type": "string",
                        "format": "date-time",
                        "description": ""
                    },
                    "projectId": {
                        "type": "string",
                        "description": ""
                    },
                    "creator": {
                        "type": "string",
                        "description": ""
                    },
                    "executions": {
                        "type": "object",
                        "properties": {},
                        "description": ""
                    },
                    "nodes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/IPipelineNodeState"
                        },
                        "description": ""
                    },
                    "status": {
                        "enum": [
                            "pending",
                            "in-progress",
                            "failed",
                            "success",
                            "queue",
                            "terminated",
                            "rerun"
                        ],
                        "type": "string",
                        "description": ""
                    },
                    "maxAttempts": {
                        "type": "number",
                        "format": "double",
                        "description": ""
                    },
                    "transitionErrors": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/INodeTransitionError"
                        },
                        "description": ""
                    },
                    "mergeCount": {
                        "type": "object",
                        "properties": {},
                        "description": ""
                    },
                    "taskNodeItemCount": {
                        "type": "object",
                        "properties": {},
                        "description": ""
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "url",
                    "pipelineId",
                    "createdAt",
                    "updatedAt",
                    "executions",
                    "nodes",
                    "status",
                    "maxAttempts"
                ]
            },
            "CursorPageAPIPipelineState": {
                "description": "",
                "properties": {
                    "totalItemsCount": {
                        "type": "number",
                        "format": "double",
                        "description": ""
                    },
                    "items": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/APIPipelineState"
                        },
                        "description": ""
                    },
                    "totalPagesCount": {
                        "type": "number",
                        "format": "double",
                        "description": ""
                    },
                    "hasNextPage": {
                        "type": "boolean",
                        "description": ""
                    }
                },
                "type": "object",
                "required": [
                    "totalItemsCount",
                    "items",
                    "totalPagesCount",
                    "hasNextPage"
                ]
            },
            "IRerunCycleOptions": {
                "description": "",
                "properties": {
                    "method": {
                        "enum": [
                            "startFromNodes",
                            "startFromFailedExecutions",
                            "startFromBeginning"
                        ],
                        "type": "string",
                        "description": ""
                    },
                    "startNodeIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": ""
                    }
                },
                "type": "object",
                "required": [
                    "method"
                ]
            },
            "IExecuteOptionsBatch": {
                "description": "",
                "properties": {
                    "query": {
                        "$ref": "#/components/schemas/ExecuteOptionsBatchQuery"
                    },
                    "args": {
                        "$ref": "#/components/schemas/Dictionary"
                    }
                },
                "type": "object",
                "required": [
                    "query"
                ]
            },
            "IRerunCycleBatchOptions": {
                "description": "",
                "properties": {
                    "pipeline": {
                        "$ref": "#/components/schemas/IRerunCycleOptions"
                    },
                    "batch": {
                        "$ref": "#/components/schemas/IExecuteOptionsBatch"
                    }
                },
                "type": "object",
                "required": [
                    "batch"
                ]
            },
            "ServiceLogEntry": {
                "description": "",
                "properties": {
                    "message": {
                        "type": "string",
                        "description": ""
                    },
                    "timestamp": {
                        "type": "object",
                        "description": ""
                    },
                    "replicaId": {
                        "type": "string",
                        "description": ""
                    },
                    "executionId": {
                        "type": "string",
                        "description": ""
                    },
                    "functionName": {
                        "type": "string",
                        "description": ""
                    },
                    "level": {
                        "enum": [
                            "CRITICAL",
                            "ERROR",
                            "WARNING",
                            "INFO",
                            "DEBUG"
                        ],
                        "type": "string",
                        "description": ""
                    },
                    "modelId": {
                        "type": "string",
                        "description": ""
                    },
                    "modelOperation": {
                        "type": "string",
                        "description": ""
                    }
                },
                "type": "object",
                "required": [
                    "message",
                    "timestamp",
                    "replicaId"
                ]
            },
            "ExecutionLogs": {
                "description": "",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": ""
                    },
                    "inputs": {
                        "$ref": "#/components/schemas/Dictionary"
                    },
                    "output": {
                        "$ref": "#/components/schemas/Dictionary"
                    },
                    "functionName": {
                        "type": "string",
                        "description": ""
                    },
                    "logs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ServiceLogEntry"
                        },
                        "description": ""
                    },
                    "stop": {
                        "type": "boolean",
                        "description": ""
                    },
                    "checkpoint": {
                        "type": "string",
                        "description": ""
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "inputs",
                    "output",
                    "functionName",
                    "logs",
                    "stop"
                ]
            },
            "PipelineExecutionLogs": {
                "description": "",
                "properties": {
                    "nodeId": {
                        "type": "string",
                        "description": ""
                    },
                    "executions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ExecutionLogs"
                        },
                        "description": ""
                    }
                },
                "type": "object",
                "required": [
                    "nodeId",
                    "executions"
                ]
            },
            "LogQuery": {
                "description": "",
                "properties": {
                    "serviceId": {
                        "type": "string",
                        "description": ""
                    },
                    "follow": {
                        "type": "boolean",
                        "description": ""
                    },
                    "size": {
                        "type": "number",
                        "format": "double",
                        "description": ""
                    },
                    "checkpoint": {
                        "type": "string",
                        "description": ""
                    },
                    "direction": {
                        "enum": [
                            "asc",
                            "desc"
                        ],
                        "type": "string",
                        "description": ""
                    },
                    "start": {
                        "type": "string",
                        "format": "date-time",
                        "description": ""
                    },
                    "end": {
                        "type": "string",
                        "format": "date-time",
                        "description": ""
                    },
                    "executionId": {
                        "type": "object",
                        "description": ""
                    },
                    "functionName": {
                        "type": "string",
                        "description": ""
                    },
                    "replicaId": {
                        "type": "string",
                        "description": ""
                    },
                    "text": {
                        "type": "object",
                        "description": ""
                    },
                    "logLevel": {
                        "enum": [
                            "CRITICAL",
                            "ERROR",
                            "WARNING",
                            "INFO",
                            "DEBUG"
                        ],
                        "type": "string",
                        "description": ""
                    },
                    "pipelineId": {
                        "type": "string",
                        "description": ""
                    },
                    "nodeId": {
                        "type": "string",
                        "description": ""
                    },
                    "pipelineExecutionId": {
                        "type": "string",
                        "description": ""
                    },
                    "system": {
                        "type": "boolean",
                        "description": ""
                    },
                    "projectId": {
                        "type": "string",
                        "description": ""
                    },
                    "modelId": {
                        "type": "string",
                        "description": ""
                    },
                    "modelOperation": {
                        "type": "string",
                        "description": ""
                    },
                    "includeServiceLevel": {
                        "type": "boolean",
                        "description": ""
                    }
                },
                "type": "object"
            },
            "QueryString": {
                "description": "",
                "properties": {
                    "resource": {
                        "enum": [
                            "triggers",
                            "executions",
                            "services",
                            "packages",
                            "annotations",
                            "items",
                            "labels",
                            "tasks",
                            "datasets",
                            "assignments",
                            "directory",
                            "pipeline",
                            "pipelineState",
                            "pipelineTemplate",
                            "composition",
                            "resourceExecution",
                            "apps",
                            "dpks"
                        ],
                        "type": "string",
                        "description": ""
                    },
                    "filter": {
                        "type": "object",
                        "description": ""
                    },
                    "sort": {
                        "type": "object",
                        "description": ""
                    },
                    "page": {
                        "type": "number",
                        "format": "double",
                        "description": ""
                    },
                    "pageSize": {
                        "type": "number",
                        "format": "double",
                        "description": ""
                    }
                },
                "type": "object",
                "required": [
                    "resource",
                    "filter",
                    "sort",
                    "page",
                    "pageSize"
                ]
            },
            "CursorPageAPIPipelineTemplate": {
                "description": "",
                "properties": {
                    "totalItemsCount": {
                        "type": "number",
                        "format": "double",
                        "description": ""
                    },
                    "items": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/APIPipeline"
                        },
                        "description": ""
                    },
                    "totalPagesCount": {
                        "type": "number",
                        "format": "double",
                        "description": ""
                    },
                    "hasNextPage": {
                        "type": "boolean",
                        "description": ""
                    }
                },
                "type": "object",
                "required": [
                    "totalItemsCount",
                    "items",
                    "totalPagesCount",
                    "hasNextPage"
                ]
            },
            "APITemplateQuery": {
                "description": "",
                "properties": {
                    "global": {
                        "$ref": "#/components/schemas/CursorPageAPIPipelineTemplate"
                    },
                    "project": {
                        "$ref": "#/components/schemas/CursorPageAPIPipelineTemplate"
                    },
                    "org": {
                        "$ref": "#/components/schemas/CursorPageAPIPipelineTemplate"
                    }
                },
                "type": "object",
                "required": [
                    "global",
                    "project",
                    "org"
                ]
            },
            "QueryStringTemplate": {
                "description": "",
                "properties": {
                    "filter": {
                        "type": "object",
                        "description": ""
                    },
                    "sort": {
                        "type": "object",
                        "description": ""
                    },
                    "page": {
                        "type": "number",
                        "format": "double",
                        "description": ""
                    },
                    "pageSize": {
                        "type": "number",
                        "format": "double",
                        "description": ""
                    }
                },
                "type": "object",
                "required": [
                    "filter",
                    "sort",
                    "page",
                    "pageSize"
                ]
            },
            "TemplateQuery": {
                "description": "",
                "properties": {
                    "project": {
                        "$ref": "#/components/schemas/QueryStringTemplate"
                    },
                    "org": {
                        "$ref": "#/components/schemas/QueryStringTemplate"
                    },
                    "global": {
                        "$ref": "#/components/schemas/QueryStringTemplate"
                    }
                },
                "type": "object",
                "required": [
                    "project",
                    "org",
                    "global"
                ]
            },
            "CursorPageT": {
                "description": "",
                "properties": {
                    "totalItemsCount": {
                        "type": "number",
                        "format": "double",
                        "description": ""
                    },
                    "items": {
                        "enum": [
                            "APIComposition[]",
                            "APIPipeline[]",
                            "(APIPipelineState | IPipelineState)[]",
                            "ResourceExecution[]",
                            "APIDpk[]",
                            "APIApp[]"
                        ],
                        "type": "string",
                        "description": ""
                    },
                    "totalPagesCount": {
                        "type": "number",
                        "format": "double",
                        "description": ""
                    },
                    "hasNextPage": {
                        "type": "boolean",
                        "description": ""
                    }
                },
                "type": "object",
                "required": [
                    "totalItemsCount",
                    "items",
                    "totalPagesCount",
                    "hasNextPage"
                ]
            },
            "APITrigger": {
                "description": "",
                "properties": {
                    "type": {
                        "enum": [
                            "Event",
                            "Cron"
                        ],
                        "type": "string",
                        "description": ""
                    },
                    "id": {
                        "type": "string",
                        "description": ""
                    },
                    "url": {
                        "type": "string",
                        "description": ""
                    },
                    "createdAt": {
                        "type": "string",
                        "format": "date-time",
                        "description": ""
                    },
                    "updatedAt": {
                        "type": "string",
                        "format": "date-time",
                        "description": ""
                    },
                    "creator": {
                        "type": "string",
                        "description": ""
                    },
                    "name": {
                        "type": "string",
                        "description": ""
                    },
                    "projectId": {
                        "type": "string",
                        "description": ""
                    },
                    "active": {
                        "type": "boolean",
                        "description": ""
                    }
                },
                "type": "object",
                "required": [
                    "type",
                    "id",
                    "url",
                    "createdAt",
                    "updatedAt",
                    "creator",
                    "name",
                    "projectId",
                    "active"
                ]
            },
            "TriggersPage": {
                "description": "",
                "properties": {
                    "totalItemsCount": {
                        "type": "number",
                        "format": "double",
                        "description": ""
                    },
                    "items": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/APITrigger"
                        },
                        "description": ""
                    },
                    "totalPagesCount": {
                        "type": "number",
                        "format": "double",
                        "description": ""
                    },
                    "hasNextPage": {
                        "type": "boolean",
                        "description": ""
                    }
                },
                "type": "object",
                "required": [
                    "totalItemsCount",
                    "items",
                    "totalPagesCount",
                    "hasNextPage"
                ]
            },
            "CreateTriggerRequest": {
                "description": "",
                "properties": {
                    "type": {
                        "enum": [
                            "Event",
                            "Cron"
                        ],
                        "type": "string",
                        "description": ""
                    },
                    "name": {
                        "type": "string",
                        "description": ""
                    },
                    "projectId": {
                        "type": "string",
                        "description": ""
                    },
                    "active": {
                        "type": "boolean",
                        "description": ""
                    }
                },
                "type": "object",
                "required": [
                    "type",
                    "name",
                    "projectId",
                    "active"
                ]
            },
            "TriggerResourceInformationItem": {
                "description": "",
                "properties": {
                    "serviceId": {
                        "type": "string",
                        "description": ""
                    },
                    "serviceName": {
                        "type": "string",
                        "description": ""
                    },
                    "triggerId": {
                        "type": "string",
                        "description": ""
                    },
                    "triggerActions": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": ""
                    },
                    "packageModuleName": {
                        "type": "string",
                        "description": ""
                    },
                    "packageFunctionName": {
                        "type": "string",
                        "description": ""
                    },
                    "packageFunctionDescription": {
                        "type": "string",
                        "description": ""
                    }
                },
                "type": "object",
                "required": [
                    "serviceId",
                    "serviceName",
                    "triggerId",
                    "triggerActions",
                    "packageModuleName",
                    "packageFunctionName",
                    "packageFunctionDescription"
                ]
            },
            "TriggerResourceInformationPage": {
                "description": "",
                "properties": {
                    "totalItemsCount": {
                        "type": "number",
                        "format": "double",
                        "description": ""
                    },
                    "items": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/TriggerResourceInformationItem"
                        },
                        "description": ""
                    },
                    "totalPagesCount": {
                        "type": "number",
                        "format": "double",
                        "description": ""
                    },
                    "hasNextPage": {
                        "type": "boolean",
                        "description": ""
                    }
                },
                "type": "object",
                "required": [
                    "totalItemsCount",
                    "items",
                    "totalPagesCount",
                    "hasNextPage"
                ]
            },
            "TriggerResourceInformationQuery": {
                "description": "",
                "properties": {
                    "resource": {
                        "type": "string",
                        "description": ""
                    },
                    "entity": {
                        "type": "object",
                        "description": ""
                    },
                    "action": {
                        "type": "string",
                        "description": ""
                    }
                },
                "type": "object",
                "required": [
                    "resource",
                    "entity",
                    "action"
                ]
            },
            "AgentNotificationPayload": {
                "description": "",
                "properties": {
                    "action": {
                        "type": "string",
                        "description": ""
                    },
                    "message": {
                        "type": "string",
                        "description": ""
                    },
                    "notificationName": {
                        "type": "string",
                        "description": ""
                    },
                    "notificationPath": {
                        "type": "string",
                        "description": ""
                    }
                },
                "type": "object",
                "required": [
                    "action"
                ]
            },
            "ICacheRunner": {
                "description": "",
                "properties": {
                    "redisHost": {
                        "type": "string",
                        "description": ""
                    },
                    "numReplicas": {
                        "type": "number",
                        "format": "double",
                        "description": ""
                    },
                    "size": {
                        "enum": [
                            "large",
                            "medium",
                            "small"
                        ],
                        "type": "string",
                        "description": ""
                    },
                    "type": {
                        "enum": [
                            "ssd",
                            "standard"
                        ],
                        "type": "string",
                        "description": ""
                    },
                    "minReplica": {
                        "type": "number",
                        "format": "double",
                        "description": ""
                    },
                    "maxReplica": {
                        "type": "number",
                        "format": "double",
                        "description": ""
                    }
                },
                "type": "object",
                "required": [
                    "redisHost",
                    "numReplicas",
                    "size",
                    "type",
                    "minReplica",
                    "maxReplica"
                ]
            },
            "ICacheOptions": {
                "description": "",
                "properties": {
                    "org": {
                        "type": "object",
                        "properties": {
                            "name": {
                                "type": "string",
                                "description": ""
                            },
                            "id": {
                                "type": "string",
                                "description": ""
                            }
                        },
                        "description": ""
                    },
                    "driverId": {
                        "type": "string",
                        "description": ""
                    },
                    "runner": {
                        "$ref": "#/components/schemas/ICacheRunner"
                    }
                },
                "type": "object",
                "required": [
                    "org"
                ]
            },
            "APIService": {
                "description": "",
                "properties": {
                    "packageId": {
                        "type": "string",
                        "description": ""
                    },
                    "appId": {
                        "type": "string",
                        "description": ""
                    },
                    "packageRevision": {
                        "type": "string",
                        "description": ""
                    },
                    "initParams": {
                        "type": "object",
                        "description": ""
                    },
                    "runtime": {
                        "$ref": "#/components/schemas/ServiceRuntime"
                    },
                    "useUserJwt": {
                        "type": "boolean",
                        "description": ""
                    },
                    "botUserName": {
                        "type": "string",
                        "description": ""
                    },
                    "versions": {
                        "$ref": "#/components/schemas/ServiceVersions"
                    },
                    "moduleName": {
                        "type": "string",
                        "description": ""
                    },
                    "global": {
                        "type": "boolean",
                        "description": ""
                    },
                    "active": {
                        "type": "boolean",
                        "description": ""
                    },
                    "runExecutionAsProcess": {
                        "type": "boolean",
                        "description": ""
                    },
                    "executionTimeout": {
                        "type": "number",
                        "format": "double",
                        "description": ""
                    },
                    "drainTime": {
                        "type": "number",
                        "format": "double",
                        "description": ""
                    },
                    "onReset": {
                        "enum": [
                            "rerun",
                            "failed"
                        ],
                        "type": "string",
                        "description": ""
                    },
                    "name": {
                        "type": "string",
                        "description": ""
                    },
                    "projectId": {
                        "type": "string",
                        "description": ""
                    },
                    "driverId": {
                        "type": "string",
                        "description": ""
                    },
                    "id": {
                        "type": "string",
                        "description": ""
                    },
                    "version": {
                        "type": "string",
                        "description": ""
                    },
                    "url": {
                        "type": "string",
                        "description": ""
                    },
                    "createdAt": {
                        "type": "string",
                        "format": "date-time",
                        "description": ""
                    },
                    "updatedAt": {
                        "type": "string",
                        "format": "date-time",
                        "description": ""
                    },
                    "creator": {
                        "type": "string",
                        "description": ""
                    },
                    "maxAttempts": {
                        "type": "number",
                        "format": "double",
                        "description": ""
                    },
                    "secrets": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": ""
                    },
                    "panels": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Panel"
                        },
                        "description": ""
                    },
                    "config": {
                        "$ref": "#/components/schemas/IServiceAppConfig"
                    },
                    "type": {
                        "enum": [
                            "system",
                            "regular"
                        ],
                        "type": "string",
                        "description": ""
                    },
                    "crashloop": {
                        "$ref": "#/components/schemas/Crashloop"
                    },
                    "mode": {
                        "$ref": "#/components/schemas/ServiceMode"
                    },
                    "metadata": {
                        "$ref": "#/components/schemas/ServiceMetadata"
                    }
                },
                "type": "object",
                "required": [
                    "packageId",
                    "initParams",
                    "runtime",
                    "useUserJwt",
                    "botUserName",
                    "versions",
                    "moduleName",
                    "runExecutionAsProcess",
                    "executionTimeout",
                    "drainTime",
                    "onReset",
                    "name",
                    "projectId",
                    "driverId",
                    "id",
                    "version",
                    "url",
                    "createdAt",
                    "updatedAt",
                    "creator"
                ]
            },
            "ServicesPage": {
                "description": "",
                "properties": {
                    "totalItemsCount": {
                        "type": "number",
                        "format": "double",
                        "description": ""
                    },
                    "items": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/APIService"
                        },
                        "description": ""
                    },
                    "totalPagesCount": {
                        "type": "number",
                        "format": "double",
                        "description": ""
                    },
                    "hasNextPage": {
                        "type": "boolean",
                        "description": ""
                    }
                },
                "type": "object",
                "required": [
                    "totalItemsCount",
                    "items",
                    "totalPagesCount",
                    "hasNextPage"
                ]
            },
            "APIServicePatch": {
                "description": "",
                "properties": {
                    "packageRevision": {
                        "type": "string",
                        "description": ""
                    },
                    "initParams": {
                        "type": "object",
                        "description": ""
                    },
                    "runtime": {
                        "$ref": "#/components/schemas/ServiceRuntime"
                    },
                    "useUserJwt": {
                        "type": "boolean",
                        "description": ""
                    },
                    "versions": {
                        "$ref": "#/components/schemas/ServiceVersions"
                    },
                    "moduleName": {
                        "type": "string",
                        "description": ""
                    },
                    "global": {
                        "type": "boolean",
                        "description": ""
                    },
                    "active": {
                        "type": "boolean",
                        "description": ""
                    },
                    "runExecutionAsProcess": {
                        "type": "boolean",
                        "description": ""
                    },
                    "executionTimeout": {
                        "type": "number",
                        "format": "double",
                        "description": ""
                    },
                    "drainTime": {
                        "type": "number",
                        "format": "double",
                        "description": ""
                    },
                    "onReset": {
                        "type": "string",
                        "description": ""
                    },
                    "maxAttempts": {
                        "type": "number",
                        "format": "double",
                        "description": ""
                    },
                    "version": {
                        "type": "string",
                        "description": ""
                    },
                    "botUserName": {
                        "type": "string",
                        "description": ""
                    },
                    "driverId": {
                        "type": "string",
                        "description": ""
                    },
                    "secrets": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": ""
                    },
                    "type": {
                        "enum": [
                            "system",
                            "regular"
                        ],
                        "type": "string",
                        "description": ""
                    },
                    "mode": {
                        "$ref": "#/components/schemas/ServiceMode"
                    },
                    "metadata": {
                        "$ref": "#/components/schemas/ServiceMetadata"
                    },
                    "panels": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Panel"
                        },
                        "description": ""
                    },
                    "packageId": {
                        "type": "string",
                        "description": ""
                    },
                    "packageName": {
                        "type": "string",
                        "description": ""
                    }
                },
                "type": "object"
            },
            "ServiceLogsPage": {
                "description": "",
                "properties": {
                    "logs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ServiceLogEntry"
                        },
                        "description": ""
                    },
                    "stop": {
                        "type": "boolean",
                        "description": ""
                    },
                    "checkpoint": {
                        "type": "string",
                        "description": ""
                    }
                },
                "type": "object",
                "required": [
                    "logs",
                    "stop"
                ]
            },
            "APIReplicaStatusUpdate": {
                "description": "",
                "properties": {
                    "replicaId": {
                        "type": "string",
                        "description": ""
                    },
                    "status": {
                        "enum": [
                            "down",
                            "initializing",
                            "running",
                            "full",
                            "terminating",
                            "failed",
                            "paused"
                        ],
                        "type": "string",
                        "description": ""
                    },
                    "numRestarts": {
                        "type": "number",
                        "format": "double",
                        "description": ""
                    },
                    "uptime": {
                        "type": "number",
                        "format": "double",
                        "description": ""
                    }
                },
                "type": "object",
                "required": [
                    "replicaId",
                    "status",
                    "numRestarts",
                    "uptime"
                ]
            },
            "ServiceRuntimeStatus": {
                "description": "",
                "properties": {
                    "replicaId": {
                        "type": "string",
                        "description": ""
                    },
                    "status": {
                        "type": "boolean",
                        "description": ""
                    },
                    "createdAt": {
                        "type": "string",
                        "format": "date-time",
                        "description": ""
                    },
                    "reason": {
                        "enum": [
                            "ContainerCreating",
                            "CrashLoopBackOff",
                            "ErrImagePull",
                            "ImagePullBackOff",
                            "CreateContainerConfigError",
                            "InvalidImageName",
                            "CreateContainerError",
                            "Unschedulable",
                            "Pending",
                            "OOMKilled",
                            "Error",
                            "Completed",
                            "ContainerCannotRun",
                            "DeadlineExceeded",
                            "NodeLost",
                            "Evicted",
                            "UnexpectedAdmissionError",
                            "NodeAffinity",
                            "Shutdown"
                        ],
                        "type": "string",
                        "description": ""
                    },
                    "message": {
                        "type": "string",
                        "description": ""
                    },
                    "restartCount": {
                        "type": "number",
                        "format": "double",
                        "description": ""
                    },
                    "lastRestartTime": {
                        "type": "string",
                        "format": "date-time",
                        "description": ""
                    }
                },
                "type": "object",
                "required": [
                    "replicaId",
                    "status"
                ]
            },
            "APIServiceStatus": {
                "description": "",
                "properties": {
                    "numMessagesInQueue": {
                        "type": "number",
                        "format": "double",
                        "description": ""
                    },
                    "runtimeStatus": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ServiceRuntimeStatus"
                        },
                        "description": ""
                    }
                },
                "type": "object",
                "required": [
                    "numMessagesInQueue",
                    "runtimeStatus"
                ]
            },
            "DebugSession": {
                "description": "",
                "properties": {
                    "status": {
                        "enum": [
                            "placed",
                            "activate",
                            "deactivate"
                        ],
                        "type": "string",
                        "description": ""
                    },
                    "time": {
                        "type": "string",
                        "format": "date-time",
                        "description": ""
                    }
                },
                "type": "object",
                "required": [
                    "status"
                ]
            },
            "FunctionIO": {
                "description": "",
                "properties": {
                    "type": {
                        "enum": [
                            "Dataset",
                            "Item",
                            "Annotation",
                            "Execution",
                            "Task",
                            "Assignment",
                            "Service",
                            "Package",
                            "Project",
                            "Json",
                            "String",
                            "Number",
                            "Integer",
                            "Float",
                            "Boolean",
                            "Model",
                            "Recipe",
                            "Dataset[]",
                            "Item[]",
                            "Annotation[]",
                            "Execution[]",
                            "Task[]",
                            "Assignment[]",
                            "Service[]",
                            "Package[]",
                            "Project[]",
                            "Json[]",
                            "String[]",
                            "Number[]",
                            "Integer[]",
                            "Float[]",
                            "Boolean[]",
                            "Model[]",
                            "Recipe[]"
                        ],
                        "type": "string",
                        "description": ""
                    },
                    "name": {
                        "type": "string",
                        "description": ""
                    },
                    "value": {
                        "type": "object",
                        "description": ""
                    },
                    "actions": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": ""
                    }
                },
                "type": "object",
                "required": [
                    "type",
                    "name"
                ]
            },
            "Function": {
                "description": "Creates a new function.",
                "properties": {
                    "prototype": {
                        "type": "object",
                        "description": ""
                    },
                    "length": {
                        "type": "number",
                        "format": "double",
                        "description": ""
                    },
                    "arguments": {
                        "type": "object",
                        "description": ""
                    }
                },
                "type": "object",
                "required": [
                    "prototype",
                    "length",
                    "arguments",
                    "caller"
                ]
            },
            "Module": {
                "description": "",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": ""
                    },
                    "entryPoint": {
                        "type": "string",
                        "description": ""
                    },
                    "className": {
                        "type": "string",
                        "description": ""
                    },
                    "initInputs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/FunctionIO"
                        },
                        "description": ""
                    },
                    "functions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Function"
                        },
                        "description": ""
                    }
                },
                "type": "object",
                "required": [
                    "name",
                    "entryPoint",
                    "initInputs",
                    "functions"
                ]
            },
            "UiHook": {
                "description": "",
                "properties": {
                    "bindTo": {
                        "type": "string",
                        "description": ""
                    },
                    "config": {
                        "type": "object",
                        "description": ""
                    },
                    "icon": {
                        "type": "string",
                        "description": ""
                    },
                    "slots": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": ""
                    }
                },
                "type": "object",
                "required": [
                    "bindTo",
                    "config",
                    "icon",
                    "slots"
                ]
            },
            "DisplayScope": {
                "description": "",
                "properties": {
                    "resource": {
                        "enum": [
                            "annotation",
                            "item",
                            "dataset",
                            "datasetQuery",
                            "project",
                            "task",
                            "assignment"
                        ],
                        "type": "string",
                        "description": ""
                    },
                    "filter": {
                        "$ref": "#/components/schemas/Dictionary"
                    },
                    "panel": {
                        "enum": [
                            "browser",
                            "studio",
                            "table",
                            "all"
                        ],
                        "type": "string",
                        "description": ""
                    }
                },
                "type": "object",
                "required": [
                    "resource",
                    "filter"
                ]
            },
            "ExecutionPostAction": {
                "description": "",
                "properties": {
                    "type": {
                        "enum": [
                            "download",
                            "drawAnnotation",
                            "noAction"
                        ],
                        "type": "string",
                        "description": ""
                    }
                },
                "type": "object",
                "required": [
                    "type"
                ]
            },
            "DLFunctionDefaultInputSpec": {
                "description": "",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": ""
                    },
                    "value": {
                        "type": "object",
                        "description": ""
                    }
                },
                "type": "object",
                "required": [
                    "name",
                    "value"
                ]
            },
            "DLFunctionInputOptionsSpec": {
                "description": "",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": ""
                    },
                    "values": {
                        "type": "array",
                        "items": {
                            "type": "object"
                        },
                        "description": ""
                    }
                },
                "type": "object",
                "required": [
                    "name",
                    "values"
                ]
            },
            "UiSlot": {
                "description": "",
                "properties": {
                    "moduleName": {
                        "type": "string",
                        "description": ""
                    },
                    "functionName": {
                        "type": "string",
                        "description": ""
                    },
                    "displayName": {
                        "type": "string",
                        "description": ""
                    },
                    "displayScopes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/DisplayScope"
                        },
                        "description": ""
                    },
                    "postAction": {
                        "$ref": "#/components/schemas/ExecutionPostAction"
                    },
                    "displayIcon": {
                        "type": "string",
                        "description": ""
                    },
                    "defaultInputs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/DLFunctionDefaultInputSpec"
                        },
                        "description": ""
                    },
                    "inputOptions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/DLFunctionInputOptionsSpec"
                        },
                        "description": ""
                    }
                },
                "type": "object",
                "required": [
                    "moduleName",
                    "functionName",
                    "displayName",
                    "displayScopes",
                    "postAction"
                ]
            },
            "PackageMetadata": {
                "description": "",
                "properties": {
                    "user": {
                        "$ref": "#/components/schemas/Dictionary"
                    },
                    "system": {
                        "$ref": "#/components/schemas/Dictionary"
                    }
                },
                "type": "object"
            },
            "APIPackage": {
                "description": "",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": ""
                    },
                    "url": {
                        "type": "string",
                        "description": ""
                    },
                    "version": {
                        "type": "string",
                        "description": ""
                    },
                    "createdAt": {
                        "type": "string",
                        "format": "date-time",
                        "description": ""
                    },
                    "updatedAt": {
                        "type": "string",
                        "format": "date-time",
                        "description": ""
                    },
                    "creator": {
                        "type": "string",
                        "description": ""
                    },
                    "name": {
                        "type": "string",
                        "description": ""
                    },
                    "global": {
                        "type": "boolean",
                        "description": ""
                    },
                    "projectId": {
                        "type": "string",
                        "description": ""
                    },
                    "codebase": {
                        "$ref": "#/components/schemas/Codebase"
                    },
                    "modules": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Module"
                        },
                        "description": ""
                    },
                    "uiHooks": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/UiHook"
                        },
                        "description": ""
                    },
                    "slots": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/UiSlot"
                        },
                        "description": ""
                    },
                    "serviceConfig": {
                        "$ref": "#/components/schemas/ServiceConfig"
                    },
                    "type": {
                        "enum": [
                            "app",
                            "faas",
                            "ml"
                        ],
                        "type": "string",
                        "description": ""
                    },
                    "requirements": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/PackageRequirement"
                        },
                        "description": ""
                    },
                    "metadata": {
                        "$ref": "#/components/schemas/PackageMetadata"
                    },
                    "panels": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Panel"
                        },
                        "description": ""
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "url",
                    "version",
                    "createdAt",
                    "updatedAt",
                    "creator",
                    "name",
                    "global",
                    "projectId",
                    "codebase",
                    "modules",
                    "type"
                ]
            },
            "PackagesPage": {
                "description": "",
                "properties": {
                    "totalItemsCount": {
                        "type": "number",
                        "format": "double",
                        "description": ""
                    },
                    "items": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/APIPackage"
                        },
                        "description": ""
                    },
                    "totalPagesCount": {
                        "type": "number",
                        "format": "double",
                        "description": ""
                    },
                    "hasNextPage": {
                        "type": "boolean",
                        "description": ""
                    }
                },
                "type": "object",
                "required": [
                    "totalItemsCount",
                    "items",
                    "totalPagesCount",
                    "hasNextPage"
                ]
            },
            "IPipelineExecution": {
                "description": "",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": ""
                    },
                    "nodeId": {
                        "type": "string",
                        "description": ""
                    },
                    "executionId": {
                        "type": "string",
                        "description": ""
                    },
                    "archived": {
                        "type": "boolean",
                        "description": ""
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "nodeId",
                    "executionId"
                ]
            },
            "ExecutionModel": {
                "description": "",
                "properties": {
                    "modelId": {
                        "type": "string",
                        "description": ""
                    },
                    "modelOperation": {
                        "type": "string",
                        "description": ""
                    }
                },
                "type": "object"
            },
            "ItemStatusEvent": {
                "description": "",
                "properties": {
                    "pipelineId": {
                        "type": "string",
                        "description": ""
                    },
                    "nodeId": {
                        "type": "string",
                        "description": ""
                    },
                    "status": {
                        "type": "object",
                        "properties": {
                            "taskId": {
                                "type": "string",
                                "description": ""
                            },
                            "assignmentId": {
                                "type": "string",
                                "description": ""
                            },
                            "status": {
                                "type": "string",
                                "description": ""
                            },
                            "creator": {
                                "type": "string",
                                "description": ""
                            },
                            "timestamp": {
                                "type": "string",
                                "description": ""
                            }
                        },
                        "description": ""
                    },
                    "action": {
                        "type": "string",
                        "description": ""
                    }
                },
                "type": "object"
            },
            "ExecutionEventContext": {
                "description": "",
                "properties": {
                    "resource": {
                        "enum": [
                            "items",
                            "annotations",
                            "datasets",
                            "executions",
                            "items.status",
                            "tasks",
                            "assignments",
                            "recipes",
                            "ontologies",
                            "packages",
                            "compositions",
                            "pipelines",
                            "pipeline.run",
                            "services",
                            "triggers",
                            "models",
                            "settings",
                            "projects",
                            "users",
                            "groups",
                            "trigger_cmds",
                            "orgs",
                            "projectGuests",
                            "integrations",
                            "apps",
                            "dpk",
                            "billingResources",
                            "subscriptions",
                            "accounts",
                            "drivers",
                            "annotations.status"
                        ],
                        "type": "string",
                        "description": ""
                    },
                    "source": {
                        "type": "string",
                        "description": ""
                    },
                    "action": {
                        "type": "string",
                        "description": ""
                    },
                    "resourceId": {
                        "type": "string",
                        "description": ""
                    },
                    "userId": {
                        "type": "string",
                        "description": ""
                    },
                    "datasetId": {
                        "type": "string",
                        "description": ""
                    },
                    "projectId": {
                        "type": "string",
                        "description": ""
                    },
                    "body": {
                        "type": "object",
                        "description": ""
                    },
                    "itemStatusEvent": {
                        "$ref": "#/components/schemas/ItemStatusEvent"
                    }
                },
                "type": "object"
            },
            "APIExecution": {
                "description": "",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": ""
                    },
                    "url": {
                        "type": "string",
                        "description": ""
                    },
                    "createdAt": {
                        "type": "string",
                        "format": "date-time",
                        "description": ""
                    },
                    "updatedAt": {
                        "type": "string",
                        "format": "date-time",
                        "description": ""
                    },
                    "creator": {
                        "type": "string",
                        "description": ""
                    },
                    "attempts": {
                        "type": "number",
                        "format": "double",
                        "description": ""
                    },
                    "maxAttempts": {
                        "type": "number",
                        "format": "double",
                        "description": ""
                    },
                    "toTerminate": {
                        "type": "boolean",
                        "description": ""
                    },
                    "input": {
                        "$ref": "#/components/schemas/Dictionary"
                    },
                    "output": {
                        "$ref": "#/components/schemas/Dictionary"
                    },
                    "status": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ExecutionStatusReport"
                        },
                        "description": ""
                    },
                    "statusLog": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ExecutionStatusReport"
                        },
                        "description": ""
                    },
                    "latestStatus": {
                        "$ref": "#/components/schemas/ExecutionStatusReport"
                    },
                    "duration": {
                        "type": "number",
                        "format": "double",
                        "description": ""
                    },
                    "projectId": {
                        "type": "string",
                        "description": ""
                    },
                    "functionName": {
                        "type": "string",
                        "description": ""
                    },
                    "serviceId": {
                        "type": "string",
                        "description": ""
                    },
                    "triggerId": {
                        "type": "string",
                        "description": ""
                    },
                    "serviceName": {
                        "type": "string",
                        "description": "The service name where the execution was executed"
                    },
                    "moduleName": {
                        "type": "string",
                        "description": "The module containing the function code"
                    },
                    "packageId": {
                        "type": "string",
                        "description": ""
                    },
                    "packageName": {
                        "type": "string",
                        "description": ""
                    },
                    "packageRevision": {
                        "type": "object",
                        "description": ""
                    },
                    "serviceVersion": {
                        "type": "object",
                        "description": ""
                    },
                    "pipeline": {
                        "$ref": "#/components/schemas/IPipelineExecution"
                    },
                    "model": {
                        "$ref": "#/components/schemas/ExecutionModel"
                    },
                    "syncReplyTo": {
                        "type": "object",
                        "properties": {
                            "exchange": {
                                "type": "string",
                                "description": ""
                            },
                            "route": {
                                "type": "string",
                                "description": ""
                            }
                        },
                        "description": "Used when running execution in sync mode"
                    },
                    "eventContext": {
                        "$ref": "#/components/schemas/ExecutionEventContext"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "url",
                    "createdAt",
                    "updatedAt",
                    "creator",
                    "attempts",
                    "maxAttempts",
                    "toTerminate",
                    "input",
                    "status",
                    "statusLog",
                    "latestStatus",
                    "duration",
                    "projectId",
                    "serviceId",
                    "packageId",
                    "packageName",
                    "packageRevision",
                    "serviceVersion",
                    "syncReplyTo"
                ]
            },
            "ExecutionsPage": {
                "description": "",
                "properties": {
                    "totalItemsCount": {
                        "type": "number",
                        "format": "double",
                        "description": ""
                    },
                    "items": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/APIExecution"
                        },
                        "description": ""
                    },
                    "totalPagesCount": {
                        "type": "number",
                        "format": "double",
                        "description": ""
                    },
                    "hasNextPage": {
                        "type": "boolean",
                        "description": ""
                    }
                },
                "type": "object",
                "required": [
                    "totalItemsCount",
                    "items",
                    "totalPagesCount",
                    "hasNextPage"
                ]
            },
            "APIExecutionPatch": {
                "description": "",
                "properties": {
                    "duration": {
                        "type": "number",
                        "format": "double",
                        "description": ""
                    },
                    "serviceVersion": {
                        "type": "string",
                        "description": ""
                    }
                },
                "type": "object"
            },
            "ActivitiesDescriptor_": {
                "description": "",
                "properties": {},
                "type": "object",
                "additionalProperties": {}
            },
            "APIWebHook": {
                "description": "",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": ""
                    },
                    "url": {
                        "type": "string",
                        "description": ""
                    },
                    "project": {
                        "type": "string",
                        "description": ""
                    },
                    "creator": {
                        "type": "string",
                        "description": ""
                    },
                    "createdAt": {
                        "type": "string",
                        "format": "date-time",
                        "description": ""
                    },
                    "updatedAt": {
                        "type": "string",
                        "format": "date-time",
                        "description": ""
                    },
                    "name": {
                        "type": "string",
                        "description": ""
                    },
                    "httpMethod": {
                        "enum": [
                            "GET",
                            "POST"
                        ],
                        "type": "string",
                        "description": ""
                    },
                    "hookUrl": {
                        "type": "string",
                        "description": ""
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "url",
                    "project",
                    "creator",
                    "createdAt",
                    "updatedAt",
                    "name",
                    "httpMethod",
                    "hookUrl"
                ]
            },
            "WebHooksPage": {
                "description": "",
                "properties": {
                    "totalItemsCount": {
                        "type": "number",
                        "format": "double",
                        "description": ""
                    },
                    "items": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/APIWebHook"
                        },
                        "description": ""
                    },
                    "totalPagesCount": {
                        "type": "number",
                        "format": "double",
                        "description": ""
                    },
                    "hasNextPage": {
                        "type": "boolean",
                        "description": ""
                    }
                },
                "type": "object",
                "required": [
                    "totalItemsCount",
                    "items",
                    "totalPagesCount",
                    "hasNextPage"
                ]
            },
            "IDpkComponentPanel": {
                "description": "",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": ""
                    },
                    "minRole": {
                        "type": "string",
                        "description": ""
                    },
                    "supportedSlots": {
                        "type": "array",
                        "items": {
                            "type": "object",
                            "properties": {
                                "type": {
                                    "type": "string",
                                    "description": ""
                                },
                                "id": {
                                    "type": "string",
                                    "description": ""
                                },
                                "configuration": {
                                    "$ref": "#/components/schemas/Dictionary"
                                }
                            }
                        },
                        "description": ""
                    },
                    "icon": {
                        "type": "string",
                        "description": ""
                    },
                    "metadata": {
                        "$ref": "#/components/schemas/Dictionary"
                    },
                    "conditions": {
                        "$ref": "#/components/schemas/Dictionary"
                    },
                    "defaultSettings": {
                        "$ref": "#/components/schemas/Dictionary"
                    }
                },
                "type": "object",
                "required": [
                    "name",
                    "minRole",
                    "supportedSlots",
                    "icon",
                    "metadata"
                ]
            },
            "IDpkComponentModel": {
                "description": "",
                "properties": {
                    "metadata": {
                        "$ref": "#/components/schemas/Dictionary"
                    },
                    "operationType": {
                        "enum": [
                            "train",
                            "predict",
                            "evaluate",
                            "deploy"
                        ],
                        "type": "string",
                        "description": ""
                    },
                    "id": {
                        "type": "string",
                        "description": ""
                    },
                    "name": {
                        "type": "string",
                        "description": "The models name"
                    },
                    "description": {
                        "type": "string",
                        "description": "description of the model"
                    },
                    "scope": {
                        "enum": [
                            "private",
                            "project",
                            "org",
                            "public"
                        ],
                        "type": "string",
                        "description": "Field that shows the scope in which the model exists"
                    },
                    "status": {
                        "enum": [
                            "created",
                            "pending",
                            "training",
                            "trained",
                            "deployed",
                            "failed"
                        ],
                        "type": "string",
                        "description": "the current models status"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags related to the model"
                    },
                    "labels": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Labels related to the model"
                    },
                    "configuration": {
                        "$ref": "#/components/schemas/Dictionary"
                    },
                    "inputType": {
                        "enum": [
                            "image",
                            "video",
                            "text",
                            "audio"
                        ],
                        "type": "string",
                        "description": "Model Input Type"
                    },
                    "outputType": {
                        "enum": [
                            "class",
                            "point",
                            "line",
                            "box",
                            "cube",
                            "segment",
                            "ellipse",
                            "binary",
                            "note",
                            "polyline",
                            "comparison",
                            "recording",
                            "subtitle",
                            "item_description",
                            "text_mark",
                            "pose",
                            "cube_3d",
                            "semantic_3d",
                            "polyline_3d",
                            "pdf_text",
                            "text",
                            "ref_image",
                            "ref_semantic_3d"
                        ],
                        "type": "string",
                        "description": "Model Output Type"
                    },
                    "datasetId": {
                        "type": "string",
                        "description": "The datasets id that the model is connected to"
                    },
                    "artifacts": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Dictionary"
                        },
                        "description": "the artifacts of the model\nan artifact indicates where the model binaries sit"
                    },
                    "context": {
                        "$ref": "#/components/schemas/EntityContext"
                    },
                    "moduleName": {
                        "type": "string",
                        "description": "The module name of the model"
                    }
                },
                "type": "object",
                "required": [
                    "metadata",
                    "name",
                    "description",
                    "scope",
                    "status",
                    "tags",
                    "labels",
                    "configuration",
                    "inputType",
                    "outputType",
                    "context"
                ]
            },
            "PartialService": {
                "description": "Make all properties in T optional",
                "properties": {},
                "type": "object"
            },
            "IDpkComponentModule": {
                "description": "",
                "properties": {
                    "versions": {
                        "$ref": "#/components/schemas/ServiceVersions"
                    },
                    "config": {
                        "$ref": "#/components/schemas/IServiceAppConfig"
                    },
                    "serviceConfig": {
                        "$ref": "#/components/schemas/PartialService"
                    },
                    "name": {
                        "type": "string",
                        "description": ""
                    },
                    "entryPoint": {
                        "type": "string",
                        "description": ""
                    },
                    "className": {
                        "type": "string",
                        "description": ""
                    },
                    "initInputs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/FunctionIO"
                        },
                        "description": ""
                    },
                    "functions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Function"
                        },
                        "description": ""
                    }
                },
                "type": "object",
                "required": [
                    "name",
                    "entryPoint",
                    "initInputs",
                    "functions"
                ]
            },
            "IDpkComponentTrigger": {
                "description": "",
                "properties": {
                    "namespace": {
                        "type": "string",
                        "description": ""
                    },
                    "type": {
                        "enum": [
                            "Event",
                            "Cron"
                        ],
                        "type": "string",
                        "description": ""
                    },
                    "spec": {
                        "type": "object",
                        "properties": {
                            "resource": {
                                "enum": [
                                    "Dataset",
                                    "Item",
                                    "Annotation",
                                    "ItemStatus",
                                    "Task",
                                    "Assignment",
                                    "Model"
                                ],
                                "type": "string",
                                "description": ""
                            },
                            "actions": {
                                "type": "array",
                                "items": {
                                    "enum": [
                                        "Created",
                                        "Updated",
                                        "Deleted",
                                        "statusChanged",
                                        "taskAssigned",
                                        "Clone"
                                    ],
                                    "type": "string"
                                },
                                "description": ""
                            },
                            "executionMode": {
                                "enum": [
                                    "Once",
                                    "Always"
                                ],
                                "type": "string",
                                "description": ""
                            },
                            "filter": {
                                "type": "string",
                                "description": ""
                            },
                            "operation": {
                                "$ref": "#/components/schemas/TriggerOperation"
                            },
                            "cron": {
                                "type": "string",
                                "description": ""
                            },
                            "startAt": {
                                "type": "string",
                                "format": "date-time",
                                "description": ""
                            },
                            "endAt": {
                                "type": "string",
                                "format": "date-time",
                                "description": ""
                            },
                            "input": {
                                "$ref": "#/components/schemas/Dictionary"
                            }
                        },
                        "description": ""
                    },
                    "name": {
                        "type": "string",
                        "description": ""
                    }
                },
                "type": "object",
                "required": [
                    "namespace",
                    "type",
                    "spec"
                ]
            },
            "IDpkComponentService": {
                "description": "",
                "properties": {
                    "runExecutionAsProcess": {
                        "type": "boolean",
                        "description": ""
                    },
                    "executionTimeout": {
                        "type": "number",
                        "format": "double",
                        "description": ""
                    },
                    "drainTime": {
                        "type": "number",
                        "format": "double",
                        "description": ""
                    },
                    "onReset": {
                        "enum": [
                            "rerun",
                            "failed"
                        ],
                        "type": "string",
                        "description": ""
                    },
                    "runtime": {
                        "$ref": "#/components/schemas/ServiceRuntime"
                    },
                    "name": {
                        "type": "string",
                        "description": ""
                    },
                    "initParams": {
                        "$ref": "#/components/schemas/Dictionary"
                    },
                    "moduleName": {
                        "type": "string",
                        "description": ""
                    },
                    "panelNames": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": ""
                    },
                    "botUserName": {
                        "type": "string",
                        "description": ""
                    },
                    "maxAttempts": {
                        "type": "number",
                        "format": "double",
                        "description": ""
                    },
                    "useUserJwt": {
                        "type": "boolean",
                        "description": ""
                    },
                    "metadata": {
                        "$ref": "#/components/schemas/ServiceMetadata"
                    },
                    "versions": {
                        "$ref": "#/components/schemas/ServiceVersions"
                    },
                    "secrets": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": ""
                    },
                    "driverId": {
                        "type": "string",
                        "description": ""
                    },
                    "modelOperation": {
                        "enum": [
                            "train",
                            "predict",
                            "evaluate",
                            "deploy"
                        ],
                        "type": "string",
                        "description": ""
                    },
                    "operation": {
                        "enum": [
                            "install",
                            "none"
                        ],
                        "type": "string",
                        "description": ""
                    }
                },
                "type": "object",
                "required": [
                    "name",
                    "initParams",
                    "panelNames",
                    "maxAttempts"
                ]
            },
            "IDpkComponentToolbars": {
                "description": "",
                "properties": {
                    "displayName": {
                        "type": "string",
                        "description": ""
                    },
                    "conditions": {
                        "$ref": "#/components/schemas/Dictionary"
                    },
                    "invoke": {
                        "$ref": "#/components/schemas/Dictionary"
                    },
                    "location": {
                        "type": "string",
                        "description": ""
                    },
                    "icon": {
                        "type": "string",
                        "description": ""
                    }
                },
                "type": "object",
                "required": [
                    "displayName",
                    "invoke"
                ]
            },
            "APIDpk": {
                "description": "",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": ""
                    },
                    "name": {
                        "type": "string",
                        "description": ""
                    },
                    "url": {
                        "type": "string",
                        "description": ""
                    },
                    "version": {
                        "type": "string",
                        "description": ""
                    },
                    "categories": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": ""
                    },
                    "updatedAt": {
                        "type": "string",
                        "format": "date-time",
                        "description": ""
                    },
                    "createdAt": {
                        "type": "string",
                        "format": "date-time",
                        "description": ""
                    },
                    "creator": {
                        "type": "string",
                        "description": ""
                    },
                    "displayName": {
                        "type": "string",
                        "description": ""
                    },
                    "description": {
                        "type": "string",
                        "description": ""
                    },
                    "icon": {
                        "type": "string",
                        "description": ""
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": ""
                    },
                    "codebase": {
                        "$ref": "#/components/schemas/Codebase"
                    },
                    "trusted": {
                        "type": "boolean",
                        "description": ""
                    },
                    "scope": {
                        "type": "string",
                        "description": ""
                    },
                    "latest": {
                        "type": "boolean",
                        "description": ""
                    },
                    "components": {
                        "type": "object",
                        "properties": {
                            "panels": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/IDpkComponentPanel"
                                },
                                "description": ""
                            },
                            "models": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/IDpkComponentModel"
                                },
                                "description": ""
                            },
                            "modules": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/IDpkComponentModule"
                                },
                                "description": ""
                            },
                            "triggers": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/IDpkComponentTrigger"
                                },
                                "description": ""
                            },
                            "services": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/IDpkComponentService"
                                },
                                "description": ""
                            },
                            "toolbars": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/IDpkComponentToolbars"
                                },
                                "description": ""
                            },
                            "channels": {
                                "type": "array",
                                "items": {
                                    "type": "object"
                                },
                                "description": ""
                            }
                        },
                        "description": ""
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "name",
                    "url",
                    "version",
                    "updatedAt",
                    "createdAt",
                    "creator",
                    "displayName",
                    "description",
                    "icon",
                    "tags",
                    "codebase",
                    "scope",
                    "latest",
                    "components"
                ]
            },
            "APIPostDpk": {
                "description": "",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The app name"
                    },
                    "version": {
                        "type": "string",
                        "description": "The app version"
                    },
                    "categories": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of categories linked to the app"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "The display Name"
                    },
                    "description": {
                        "type": "string",
                        "description": "description of the dpk"
                    },
                    "icon": {
                        "type": "string",
                        "description": "icon style - should present in the ui platform"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of tags linked to the app"
                    },
                    "codebase": {
                        "$ref": "#/components/schemas/Codebase"
                    },
                    "scope": {
                        "type": "string",
                        "description": "the scope is belong to"
                    },
                    "trusted": {
                        "type": "boolean",
                        "description": ""
                    },
                    "components": {
                        "type": "object",
                        "properties": {
                            "panels": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/IDpkComponentPanel"
                                },
                                "description": "the panels component"
                            },
                            "models": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/IDpkComponentModel"
                                },
                                "description": "the models component"
                            },
                            "modules": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/IDpkComponentModule"
                                },
                                "description": "the modules component"
                            },
                            "triggers": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/IDpkComponentTrigger"
                                },
                                "description": "the triggers component"
                            },
                            "services": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/IDpkComponentService"
                                },
                                "description": "the services component"
                            },
                            "toolbars": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/IDpkComponentToolbars"
                                },
                                "description": "the toolbars component"
                            }
                        },
                        "description": ""
                    }
                },
                "type": "object",
                "required": [
                    "name",
                    "codebase",
                    "components"
                ]
            },
            "CursorPageAPIDpk": {
                "description": "",
                "properties": {
                    "totalItemsCount": {
                        "type": "number",
                        "format": "double",
                        "description": ""
                    },
                    "items": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/APIDpk"
                        },
                        "description": ""
                    },
                    "totalPagesCount": {
                        "type": "number",
                        "format": "double",
                        "description": ""
                    },
                    "hasNextPage": {
                        "type": "boolean",
                        "description": ""
                    }
                },
                "type": "object",
                "required": [
                    "totalItemsCount",
                    "items",
                    "totalPagesCount",
                    "hasNextPage"
                ]
            },
            "PartialAPIDpk": {
                "description": "Make all properties in T optional",
                "properties": {},
                "type": "object"
            },
            "APIApp": {
                "description": "",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": ""
                    },
                    "name": {
                        "type": "string",
                        "description": ""
                    },
                    "url": {
                        "type": "string",
                        "description": ""
                    },
                    "createdAt": {
                        "type": "string",
                        "format": "date-time",
                        "description": ""
                    },
                    "updatedAt": {
                        "type": "string",
                        "format": "date-time",
                        "description": ""
                    },
                    "creator": {
                        "type": "string",
                        "description": ""
                    },
                    "projectId": {
                        "type": "string",
                        "description": ""
                    },
                    "orgId": {
                        "type": "string",
                        "description": ""
                    },
                    "dpkName": {
                        "type": "string",
                        "description": ""
                    },
                    "dpkVersion": {
                        "type": "string",
                        "description": ""
                    },
                    "compositionId": {
                        "type": "string",
                        "description": ""
                    },
                    "scope": {
                        "enum": [
                            "system"
                        ],
                        "type": "string",
                        "description": ""
                    },
                    "routes": {
                        "$ref": "#/components/schemas/Dictionary"
                    },
                    "dpk": {
                        "$ref": "#/components/schemas/PartialAPIDpk"
                    },
                    "trusted": {
                        "type": "boolean",
                        "description": ""
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "name",
                    "url",
                    "createdAt",
                    "updatedAt",
                    "creator",
                    "projectId",
                    "orgId",
                    "dpkName",
                    "dpkVersion",
                    "compositionId",
                    "routes"
                ]
            },
            "APIPostApp": {
                "description": "",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The app name"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The project where the app should be install"
                    },
                    "dpkName": {
                        "type": "string",
                        "description": "A unique DPK app name"
                    },
                    "dpkVersion": {
                        "type": "string",
                        "description": "The version of the dpk app"
                    },
                    "scope": {
                        "enum": [
                            "system"
                        ],
                        "type": "string",
                        "description": "The app scope"
                    }
                },
                "type": "object",
                "required": [
                    "name",
                    "projectId",
                    "dpkName"
                ]
            },
            "APIPatchApp": {
                "description": "",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The app name"
                    },
                    "dpkName": {
                        "type": "string",
                        "description": "A unique DPK app name"
                    },
                    "dpkVersion": {
                        "type": "string",
                        "description": "The version of the dpk app"
                    },
                    "trusted": {
                        "type": "boolean",
                        "description": ""
                    }
                },
                "type": "object",
                "required": [
                    "name",
                    "dpkName"
                ]
            },
            "MigrationSpec": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/Dictionary"
                    },
                    {
                        "properties": {
                            "report": {
                                "type": "boolean"
                            },
                            "fix": {
                                "type": "boolean"
                            }
                        },
                        "type": "object"
                    }
                ]
            },
            "RemoveSettingTraceMigrationSpec": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/MigrationSpec"
                    },
                    {
                        "properties": {
                            "settingName": {
                                "anyOf": [
                                    {
                                        "type": "string"
                                    },
                                    {
                                        "items": {
                                            "type": "string"
                                        },
                                        "type": "array"
                                    }
                                ]
                            }
                        },
                        "required": [
                            "settingName"
                        ],
                        "type": "object"
                    }
                ]
            },
            "SettingsValueTypes": {
                "enum": [
                    "boolean",
                    "number",
                    "select",
                    "multi-select",
                    "string",
                    "object",
                    "array"
                ],
                "type": "string"
            },
            "PlatformEntityType": {
                "enum": [
                    "user",
                    "task",
                    "dataset",
                    "project",
                    "billing-project",
                    "org",
                    "billing-org"
                ],
                "type": "string"
            },
            "SettingScope": {
                "properties": {
                    "type": {
                        "anyOf": [
                            {
                                "$ref": "#/components/schemas/PlatformEntityType"
                            },
                            {
                                "type": "string",
                                "enum": [
                                    "DATALOOP"
                                ]
                            }
                        ]
                    },
                    "id": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "string",
                                "enum": [
                                    "*"
                                ]
                            }
                        ]
                    },
                    "role": {
                        "anyOf": [
                            {
                                "$ref": "#/components/schemas/Role"
                            },
                            {
                                "$ref": "#/components/schemas/OrgRole"
                            },
                            {
                                "type": "string",
                                "enum": [
                                    "*"
                                ]
                            }
                        ]
                    },
                    "preventOverride": {
                        "type": "boolean"
                    },
                    "visible": {
                        "type": "boolean"
                    }
                },
                "required": [
                    "type",
                    "id",
                    "role",
                    "preventOverride",
                    "visible"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "SettingsTypes": {
                "enum": [
                    "feature_flag",
                    "user_settings"
                ],
                "type": "string"
            },
            "APIFeatureFlag": {
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "defaultValue": {
                        "description": "the value that will be taken if no value was passed"
                    },
                    "name": {
                        "type": "string",
                        "description": "the name of the setting"
                    },
                    "value": {
                        "description": "the value of the setting"
                    },
                    "valueType": {
                        "$ref": "#/components/schemas/SettingsValueTypes",
                        "description": "the value type of the setting"
                    },
                    "scope": {
                        "$ref": "#/components/schemas/SettingScope",
                        "description": "the scope in which the setting is defined."
                    },
                    "metadata": {
                        "$ref": "#/components/schemas/Dictionary"
                    },
                    "settingType": {
                        "$ref": "#/components/schemas/SettingsTypes",
                        "description": "the setting type\ncan either be UserSetting or FeatureFlag"
                    },
                    "createdAt": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "createdBy": {
                        "type": "string"
                    },
                    "updatedAt": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "updatedBy": {
                        "type": "string"
                    },
                    "expiredAt": {
                        "type": "string",
                        "format": "date-time",
                        "description": "the date the feature flag expired"
                    },
                    "expired": {
                        "type": "boolean",
                        "description": "value of that is interpreted from the expired at date. it signals if the flag is expired or not"
                    }
                },
                "required": [
                    "id",
                    "defaultValue",
                    "name",
                    "value",
                    "valueType",
                    "scope",
                    "metadata",
                    "settingType",
                    "createdAt",
                    "createdBy",
                    "updatedAt",
                    "expired"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "SettingsSectionNames": {
                "enum": [
                    "Account",
                    "Contact",
                    "Applications",
                    "Studio",
                    "Platform",
                    "SDK"
                ],
                "type": "string"
            },
            "APIUserSetting": {
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "defaultValue": {
                        "description": "the value that will be taken if no value was passed"
                    },
                    "name": {
                        "type": "string",
                        "description": "the name of the setting"
                    },
                    "value": {
                        "description": "the value of the setting"
                    },
                    "valueType": {
                        "$ref": "#/components/schemas/SettingsValueTypes",
                        "description": "the value type of the setting"
                    },
                    "scope": {
                        "$ref": "#/components/schemas/SettingScope",
                        "description": "the scope in which the setting is defined."
                    },
                    "metadata": {
                        "$ref": "#/components/schemas/Dictionary"
                    },
                    "settingType": {
                        "$ref": "#/components/schemas/SettingsTypes",
                        "description": "the setting type\ncan either be UserSetting or FeatureFlag"
                    },
                    "createdAt": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "createdBy": {
                        "type": "string"
                    },
                    "updatedAt": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "updatedBy": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string",
                        "description": "description field for the user setting"
                    },
                    "inputs": {
                        "description": "inputs specified for the user setting"
                    },
                    "icon": {
                        "type": "string",
                        "description": "an icon for the setting"
                    },
                    "hint": {
                        "type": "string",
                        "description": "a hint for the setting"
                    },
                    "sectionName": {
                        "$ref": "#/components/schemas/SettingsSectionNames",
                        "description": "the main section that the setting belongs to"
                    },
                    "subSectionName": {
                        "type": "string",
                        "description": "the sub section that the setting belongs to"
                    }
                },
                "required": [
                    "id",
                    "defaultValue",
                    "name",
                    "value",
                    "valueType",
                    "scope",
                    "metadata",
                    "settingType",
                    "createdAt",
                    "createdBy",
                    "updatedAt",
                    "inputs",
                    "sectionName"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "IUserContext": {
                "properties": {
                    "userId": {
                        "type": "string",
                        "description": "ID of the User"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "ID of the Org"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "ID of the Project"
                    },
                    "taskId": {
                        "type": "string",
                        "description": "ID of the Task"
                    },
                    "datasetId": {
                        "type": "string",
                        "description": "ID of the Dataset"
                    }
                },
                "required": [
                    "userId"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "ResolverPayload": {
                "properties": {
                    "userCtx": {
                        "$ref": "#/components/schemas/IUserContext",
                        "description": "User Context"
                    },
                    "flags": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            }
                        ],
                        "description": "Specific flags to resolve"
                    }
                },
                "required": [
                    "userCtx"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "CreateSettingRequest": {
                "properties": {
                    "defaultValue": {
                        "description": "the value that will be taken if no value was passed"
                    },
                    "name": {
                        "type": "string",
                        "description": "the name of the setting"
                    },
                    "value": {
                        "description": "the value of the setting"
                    },
                    "valueType": {
                        "$ref": "#/components/schemas/SettingsValueTypes",
                        "description": "the value type of the setting"
                    },
                    "scope": {
                        "$ref": "#/components/schemas/SettingScope",
                        "description": "the scope in which the setting is defined."
                    },
                    "metadata": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/Dictionary"
                            }
                        ],
                        "nullable": true
                    },
                    "settingType": {
                        "$ref": "#/components/schemas/SettingsTypes",
                        "description": "the setting type\ncan either be UserSetting or FeatureFlag"
                    }
                },
                "required": [
                    "name",
                    "valueType",
                    "scope",
                    "settingType"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "CreateFeatureFlagRequest": {
                "properties": {
                    "defaultValue": {
                        "description": "the value that will be taken if no value was passed"
                    },
                    "name": {
                        "type": "string",
                        "description": "the name of the setting"
                    },
                    "value": {
                        "description": "the value of the setting"
                    },
                    "valueType": {
                        "$ref": "#/components/schemas/SettingsValueTypes",
                        "description": "the value type of the setting"
                    },
                    "scope": {
                        "$ref": "#/components/schemas/SettingScope",
                        "description": "the scope in which the setting is defined."
                    },
                    "metadata": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/Dictionary"
                            }
                        ],
                        "nullable": true
                    },
                    "settingType": {
                        "$ref": "#/components/schemas/SettingsTypes",
                        "description": "the setting type\ncan either be UserSetting or FeatureFlag"
                    },
                    "expiredAt": {
                        "type": "string",
                        "format": "date-time",
                        "nullable": true,
                        "description": "the date the feature flag expired"
                    }
                },
                "required": [
                    "name",
                    "valueType",
                    "scope",
                    "settingType"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "CreateUserSettingRequest": {
                "properties": {
                    "defaultValue": {
                        "description": "the value that will be taken if no value was passed"
                    },
                    "name": {
                        "type": "string",
                        "description": "the name of the setting"
                    },
                    "value": {
                        "description": "the value of the setting"
                    },
                    "valueType": {
                        "$ref": "#/components/schemas/SettingsValueTypes",
                        "description": "the value type of the setting"
                    },
                    "scope": {
                        "$ref": "#/components/schemas/SettingScope",
                        "description": "the scope in which the setting is defined."
                    },
                    "metadata": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/Dictionary"
                            }
                        ],
                        "nullable": true
                    },
                    "settingType": {
                        "$ref": "#/components/schemas/SettingsTypes",
                        "description": "the setting type\ncan either be UserSetting or FeatureFlag"
                    },
                    "description": {
                        "type": "string",
                        "nullable": true,
                        "description": "description field for the user setting"
                    },
                    "inputs": {
                        "description": "inputs specified for the user setting"
                    },
                    "icon": {
                        "type": "string",
                        "nullable": true,
                        "description": "an icon for the setting"
                    },
                    "hint": {
                        "type": "string",
                        "nullable": true,
                        "description": "a hint for the setting"
                    },
                    "sectionName": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/SettingsSectionNames"
                            }
                        ],
                        "nullable": true,
                        "description": "the main section that the setting belongs to"
                    },
                    "subSectionName": {
                        "type": "string",
                        "nullable": true,
                        "description": "the sub section that the setting belongs to"
                    }
                },
                "required": [
                    "name",
                    "valueType",
                    "scope",
                    "settingType",
                    "sectionName"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "Partial_SettingScope_": {
                "properties": {
                    "type": {
                        "anyOf": [
                            {
                                "$ref": "#/components/schemas/PlatformEntityType"
                            },
                            {
                                "type": "string",
                                "enum": [
                                    "DATALOOP"
                                ]
                            }
                        ],
                        "description": "The type for which the setting belongs"
                    },
                    "id": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "string",
                                "enum": [
                                    "*"
                                ]
                            }
                        ],
                        "description": "The id for which the setting belongs"
                    },
                    "role": {
                        "anyOf": [
                            {
                                "$ref": "#/components/schemas/Role"
                            },
                            {
                                "$ref": "#/components/schemas/OrgRole"
                            },
                            {
                                "type": "string",
                                "enum": [
                                    "*"
                                ]
                            }
                        ],
                        "description": "The role for which the setting belongs"
                    },
                    "preventOverride": {
                        "type": "boolean",
                        "description": "allow other settings to override this setting"
                    },
                    "visible": {
                        "type": "boolean",
                        "description": "a toggle if the setting is visible or not"
                    }
                },
                "type": "object",
                "description": "Make all properties in T optional"
            },
            "PatchFeatureFlagRequest": {
                "properties": {
                    "defaultValue": {
                        "description": "the value that will be taken if no value was passed"
                    },
                    "value": {
                        "description": "the value of the setting"
                    },
                    "valueType": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/SettingsValueTypes"
                            }
                        ],
                        "nullable": true,
                        "description": "the value type of the setting"
                    },
                    "scope": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/Partial_SettingScope_"
                            }
                        ],
                        "nullable": true,
                        "description": "the scope in which the setting is defined."
                    },
                    "metadata": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/Dictionary"
                            }
                        ],
                        "nullable": true
                    },
                    "expiredAt": {
                        "type": "string",
                        "format": "date-time",
                        "nullable": true,
                        "description": "the date the feature flag expired"
                    }
                },
                "type": "object",
                "additionalProperties": true
            },
            "PatchUserSettingRequest": {
                "properties": {
                    "defaultValue": {
                        "description": "the value that will be taken if no value was passed"
                    },
                    "value": {
                        "description": "the value of the setting"
                    },
                    "valueType": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/SettingsValueTypes"
                            }
                        ],
                        "nullable": true,
                        "description": "the value type of the setting"
                    },
                    "scope": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/Partial_SettingScope_"
                            }
                        ],
                        "nullable": true,
                        "description": "the scope in which the setting is defined."
                    },
                    "metadata": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/Dictionary"
                            }
                        ],
                        "nullable": true
                    },
                    "description": {
                        "type": "string",
                        "nullable": true,
                        "description": "description field for the user setting"
                    },
                    "inputs": {
                        "description": "inputs specified for the user setting"
                    },
                    "icon": {
                        "type": "string",
                        "nullable": true,
                        "description": "an icon for the setting"
                    },
                    "hint": {
                        "type": "string",
                        "nullable": true,
                        "description": "a hint for the setting"
                    },
                    "sectionName": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/SettingsSectionNames"
                            }
                        ],
                        "nullable": true,
                        "description": "the main section that the setting belongs to"
                    },
                    "subSectionName": {
                        "type": "string",
                        "nullable": true,
                        "description": "the sub section that the setting belongs to"
                    }
                },
                "type": "object",
                "additionalProperties": true
            },
            "CursorPage_APIUserSetting-or-APIFeatureFlag_": {
                "properties": {
                    "totalItemsCount": {
                        "type": "number",
                        "format": "double"
                    },
                    "items": {
                        "items": {
                            "anyOf": [
                                {
                                    "$ref": "#/components/schemas/APIUserSetting"
                                },
                                {
                                    "$ref": "#/components/schemas/APIFeatureFlag"
                                }
                            ]
                        },
                        "type": "array"
                    },
                    "totalPagesCount": {
                        "type": "number",
                        "format": "double"
                    },
                    "hasNextPage": {
                        "type": "boolean"
                    }
                },
                "required": [
                    "totalItemsCount",
                    "items",
                    "totalPagesCount",
                    "hasNextPage"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "IVersion": {
                "properties": {
                    "latestVersion": {
                        "type": "string"
                    },
                    "latestForcedVersion": {
                        "type": "boolean"
                    }
                },
                "required": [
                    "latestVersion",
                    "latestForcedVersion"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "UIHours": {
                "properties": {
                    "sum": {
                        "type": "number",
                        "format": "double"
                    },
                    "roles": {
                        "properties": {},
                        "additionalProperties": {
                            "type": "number",
                            "format": "double"
                        },
                        "type": "object"
                    }
                },
                "required": [
                    "sum",
                    "roles"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "APICallResourceDescriptor": {
                "properties": {
                    "sum": {
                        "type": "number",
                        "format": "double"
                    },
                    "actions": {
                        "properties": {},
                        "additionalProperties": {
                            "type": "number",
                            "format": "double"
                        },
                        "type": "object"
                    }
                },
                "required": [
                    "sum",
                    "actions"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "APICallSourceDescriptor": {
                "properties": {
                    "sum": {
                        "type": "number",
                        "format": "double"
                    },
                    "resources": {
                        "properties": {},
                        "additionalProperties": {
                            "$ref": "#/components/schemas/APICallResourceDescriptor"
                        },
                        "type": "object"
                    }
                },
                "required": [
                    "sum",
                    "resources"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "APICallDescriptor": {
                "properties": {
                    "ui": {
                        "$ref": "#/components/schemas/APICallSourceDescriptor"
                    },
                    "sdk": {
                        "$ref": "#/components/schemas/APICallSourceDescriptor"
                    },
                    "system": {
                        "$ref": "#/components/schemas/APICallSourceDescriptor"
                    },
                    "other": {
                        "$ref": "#/components/schemas/APICallSourceDescriptor"
                    },
                    "sum": {
                        "type": "number",
                        "format": "double"
                    }
                },
                "required": [
                    "ui",
                    "sdk",
                    "system",
                    "other",
                    "sum"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "StorageModificationSourceDescriptor": {
                "properties": {
                    "added": {
                        "type": "number",
                        "format": "double"
                    },
                    "removed": {
                        "type": "number",
                        "format": "double"
                    }
                },
                "required": [
                    "added",
                    "removed"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "StorageModificationDescriptor": {
                "properties": {
                    "ui": {
                        "$ref": "#/components/schemas/StorageModificationSourceDescriptor"
                    },
                    "sdk": {
                        "$ref": "#/components/schemas/StorageModificationSourceDescriptor"
                    },
                    "system": {
                        "$ref": "#/components/schemas/StorageModificationSourceDescriptor"
                    },
                    "other": {
                        "$ref": "#/components/schemas/StorageModificationSourceDescriptor"
                    },
                    "unknown": {
                        "$ref": "#/components/schemas/StorageModificationSourceDescriptor"
                    },
                    "total": {
                        "$ref": "#/components/schemas/StorageModificationSourceDescriptor"
                    }
                },
                "required": [
                    "ui",
                    "sdk",
                    "system",
                    "other",
                    "total"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "StorageDatasetDescriptor": {
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "modified": {
                        "$ref": "#/components/schemas/StorageModificationDescriptor"
                    }
                },
                "required": [
                    "id",
                    "modified"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "StorageDescriptor": {
                "properties": {
                    "totalModified": {
                        "$ref": "#/components/schemas/StorageModificationDescriptor"
                    },
                    "totalPersist": {
                        "type": "number",
                        "format": "double"
                    },
                    "datasets": {
                        "items": {
                            "$ref": "#/components/schemas/StorageDatasetDescriptor"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "totalModified",
                    "totalPersist",
                    "datasets"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "PodType": {
                "enum": [
                    "regular-xs",
                    "regular-s",
                    "regular-m",
                    "regular-l",
                    "highmem-xs",
                    "highmem-s",
                    "highmem-m",
                    "highmem-l",
                    "gpu-k80-s",
                    "gpu-k80-m",
                    "gpu-t4"
                ],
                "type": "string"
            },
            "ServiceType": {
                "enum": [
                    "system",
                    "regular"
                ],
                "type": "string"
            },
            "FaasUsageServiceInstanceDescriptor": {
                "properties": {
                    "serviceId": {
                        "type": "string"
                    },
                    "serviceName": {
                        "type": "string"
                    },
                    "instanceType": {
                        "$ref": "#/components/schemas/PodType"
                    },
                    "sum": {
                        "type": "number",
                        "format": "double"
                    },
                    "hours": {
                        "type": "number",
                        "format": "double"
                    },
                    "serviceType": {
                        "$ref": "#/components/schemas/ServiceType"
                    }
                },
                "required": [
                    "serviceId",
                    "serviceName",
                    "instanceType",
                    "sum",
                    "hours"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "FaasGlobalServiceDescriptor": {
                "properties": {
                    "serviceId": {
                        "type": "string"
                    },
                    "serviceName": {
                        "type": "string"
                    },
                    "calls": {
                        "type": "number",
                        "format": "double"
                    },
                    "totalDuration": {
                        "type": "number",
                        "format": "double"
                    }
                },
                "required": [
                    "serviceId",
                    "serviceName",
                    "calls",
                    "totalDuration"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "FaasUsageDescriptor": {
                "properties": {
                    "services": {
                        "items": {
                            "$ref": "#/components/schemas/FaasUsageServiceInstanceDescriptor"
                        },
                        "type": "array"
                    },
                    "globalServices": {
                        "items": {
                            "$ref": "#/components/schemas/FaasGlobalServiceDescriptor"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "services"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "ItemsCount": {
                "properties": {
                    "total": {
                        "type": "number",
                        "format": "double"
                    },
                    "totalAnnotated": {
                        "type": "number",
                        "format": "double"
                    }
                },
                "required": [
                    "total",
                    "totalAnnotated"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "APIUsageEntry": {
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "url": {
                        "type": "string"
                    },
                    "project": {
                        "type": "string"
                    },
                    "projectName": {
                        "type": "string"
                    },
                    "org": {
                        "type": "string"
                    },
                    "orgName": {
                        "type": "string"
                    },
                    "account": {
                        "type": "string"
                    },
                    "accountName": {
                        "type": "string"
                    },
                    "date": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "uiHours": {
                        "$ref": "#/components/schemas/UIHours"
                    },
                    "apiCalls": {
                        "$ref": "#/components/schemas/APICallDescriptor"
                    },
                    "storage": {
                        "$ref": "#/components/schemas/StorageDescriptor"
                    },
                    "faasUsage": {
                        "$ref": "#/components/schemas/FaasUsageDescriptor"
                    },
                    "items": {
                        "$ref": "#/components/schemas/ItemsCount"
                    },
                    "annotations": {
                        "type": "number",
                        "format": "double"
                    },
                    "keyframes": {
                        "type": "number",
                        "format": "double"
                    }
                },
                "required": [
                    "id",
                    "url",
                    "project",
                    "date",
                    "uiHours",
                    "apiCalls",
                    "storage",
                    "items",
                    "annotations",
                    "keyframes"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "AlertStatus": {
                "enum": [
                    "created",
                    "emailSent",
                    "acknowledged",
                    "closed"
                ],
                "type": "string"
            },
            "AlertTier": {
                "enum": [
                    "preliminary",
                    "acute",
                    "enforcement"
                ],
                "type": "string"
            },
            "APIAlert": {
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "url": {
                        "type": "string"
                    },
                    "code": {
                        "type": "string"
                    },
                    "status": {
                        "$ref": "#/components/schemas/AlertStatus"
                    },
                    "description": {
                        "type": "string"
                    },
                    "date": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "metadata": {},
                    "accountId": {
                        "type": "string"
                    },
                    "tier": {
                        "$ref": "#/components/schemas/AlertTier"
                    }
                },
                "required": [
                    "id",
                    "url",
                    "code",
                    "status",
                    "description",
                    "date",
                    "accountId",
                    "tier"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "FieldSort": {
                "properties": {
                    "field": {
                        "type": "string",
                        "enum": [
                            "date",
                            "id"
                        ]
                    },
                    "direction": {
                        "type": "string",
                        "enum": [
                            "asc",
                            "desc"
                        ]
                    }
                },
                "type": "object",
                "additionalProperties": true
            },
            "ResourceAuditEventType": {
                "type": "string",
                "enum": [
                    "deleted",
                    "updated",
                    "created"
                ]
            },
            "ResourceAuditLog": {
                "properties": {
                    "_id": {
                        "type": "string"
                    },
                    "time": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "ctx": {
                        "properties": {
                            "projectName": {
                                "type": "string"
                            },
                            "org": {
                                "type": "string"
                            },
                            "project": {
                                "type": "string"
                            }
                        },
                        "type": "object"
                    },
                    "user": {
                        "type": "string"
                    },
                    "entityType": {
                        "type": "string"
                    },
                    "eventType": {
                        "$ref": "#/components/schemas/ResourceAuditEventType"
                    },
                    "entityId": {
                        "type": "string"
                    },
                    "entityName": {
                        "type": "string"
                    }
                },
                "required": [
                    "_id",
                    "time",
                    "ctx",
                    "user",
                    "entityType",
                    "eventType",
                    "entityId"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "AuditLogsCursorPage": {
                "properties": {
                    "totalItemsCount": {
                        "type": "number",
                        "format": "double"
                    },
                    "items": {
                        "items": {
                            "$ref": "#/components/schemas/ResourceAuditLog"
                        },
                        "type": "array"
                    },
                    "totalPagesCount": {
                        "type": "number",
                        "format": "double"
                    },
                    "hasNextPage": {
                        "type": "boolean"
                    }
                },
                "required": [
                    "totalItemsCount",
                    "items",
                    "totalPagesCount",
                    "hasNextPage"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "Address": {
                "properties": {
                    "line1": {
                        "type": "string"
                    },
                    "line2": {
                        "type": "string"
                    },
                    "country": {
                        "type": "string"
                    },
                    "city": {
                        "type": "string"
                    },
                    "postalCode": {
                        "type": "string"
                    },
                    "state": {
                        "type": "string"
                    }
                },
                "required": [
                    "line1",
                    "country",
                    "city"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "TaxType": {
                "enum": [
                    "ae_trn",
                    "au_abn",
                    "au_arn",
                    "br_cnpj",
                    "br_cpf",
                    "ca_bn",
                    "ca_gst_hst",
                    "ca_pst_bc",
                    "ca_pst_mb",
                    "ca_pst_sk",
                    "ca_qst",
                    "ch_vat",
                    "cl_tin",
                    "es_cif",
                    "eu_vat",
                    "gb_vat",
                    "ge_vat",
                    "hk_br",
                    "id_npwp",
                    "il_vat",
                    "in_gst",
                    "jp_cn",
                    "jp_rn",
                    "kr_brn",
                    "li_uid",
                    "mx_rfc",
                    "my_frp",
                    "my_itn",
                    "my_sst",
                    "no_vat",
                    "nz_gst",
                    "ru_inn",
                    "ru_kpp",
                    "sa_vat",
                    "sg_gst",
                    "sg_uen",
                    "th_vat",
                    "tw_vat",
                    "ua_vat",
                    "us_ein",
                    "za_vat"
                ],
                "type": "string"
            },
            "TaxData": {
                "properties": {
                    "type": {
                        "$ref": "#/components/schemas/TaxType"
                    },
                    "value": {
                        "type": "string"
                    }
                },
                "required": [
                    "type",
                    "value"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "DBBillingAccount": {
                "properties": {
                    "_id": {
                        "type": "string"
                    },
                    "companyName": {
                        "type": "string"
                    },
                    "companyPhone": {
                        "type": "string"
                    },
                    "billingContact": {
                        "type": "string"
                    },
                    "accountId": {
                        "type": "string"
                    },
                    "recipients": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "address": {
                        "$ref": "#/components/schemas/Address"
                    },
                    "createdAt": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "updatedAt": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "taxData": {
                        "$ref": "#/components/schemas/TaxData"
                    },
                    "creator": {
                        "type": "string"
                    }
                },
                "required": [
                    "_id",
                    "companyName",
                    "companyPhone",
                    "billingContact",
                    "accountId",
                    "recipients",
                    "address",
                    "createdAt",
                    "creator"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "PartialBillingAccount": {
                "properties": {
                    "companyName": {
                        "type": "string"
                    },
                    "companyPhone": {
                        "type": "string"
                    },
                    "billingContact": {
                        "type": "string"
                    },
                    "accountId": {
                        "type": "string"
                    },
                    "recipients": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "address": {
                        "$ref": "#/components/schemas/Address"
                    },
                    "taxData": {
                        "properties": {
                            "value": {
                                "type": "string"
                            },
                            "type": {
                                "$ref": "#/components/schemas/TaxType"
                            }
                        },
                        "required": [
                            "value",
                            "type"
                        ],
                        "type": "object"
                    }
                },
                "required": [
                    "accountId",
                    "address"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "PaymentDriverType": {
                "type": "string",
                "enum": [
                    "credits",
                    "stripe"
                ],
                "nullable": false
            },
            "DBPaymentDriverConfiguration": {
                "properties": {
                    "_id": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "billingAccountId": {
                        "type": "string"
                    },
                    "type": {
                        "$ref": "#/components/schemas/PaymentDriverType"
                    },
                    "creator": {
                        "type": "string"
                    },
                    "metadata": {}
                },
                "required": [
                    "_id",
                    "name",
                    "billingAccountId",
                    "type",
                    "creator"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "CreditCard": {
                "properties": {
                    "brand": {
                        "type": "string",
                        "description": "Card brand. Can be `amex`, `diners`, `discover`, `jcb`, `mastercard`, `unionpay`, `visa`, or `unknown`."
                    },
                    "country": {
                        "type": "string",
                        "nullable": true,
                        "description": "Two-letter ISO code representing the country of the card. You could use this attribute to get a sense of the international breakdown of cards you've collected."
                    },
                    "description": {
                        "type": "string",
                        "nullable": true,
                        "description": "A high-level description of the type of cards issued in this range. (For internal use only and not typically available in standard API requests.)"
                    },
                    "exp_month": {
                        "type": "number",
                        "format": "double",
                        "description": "Two-digit number representing the card's expiration month."
                    },
                    "exp_year": {
                        "type": "number",
                        "format": "double",
                        "description": "Four-digit number representing the card's expiration year."
                    },
                    "fingerprint": {
                        "type": "string",
                        "nullable": true,
                        "description": "Uniquely identifies this particular card number. You can use this attribute to check whether two customers who've signed up with you are using the same card number, for example. For payment methods that tokenize card information (Apple Pay, Google Pay), the tokenized number might be provided instead of the underlying card number.\n\n*Starting May 1, 2021, card fingerprint in India for Connect will change to allow two fingerprints for the same card --- one for India and one for the rest of the world.*"
                    },
                    "funding": {
                        "type": "string",
                        "description": "Card funding type. Can be `credit`, `debit`, `prepaid`, or `unknown`."
                    },
                    "last4": {
                        "type": "string",
                        "description": "The last four digits of the card."
                    }
                },
                "required": [
                    "brand",
                    "country",
                    "exp_month",
                    "exp_year",
                    "funding",
                    "last4"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "PaymentMethod": {
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Unique identifier for the object."
                    },
                    "card": {
                        "$ref": "#/components/schemas/CreditCard"
                    },
                    "driverId": {
                        "type": "string"
                    }
                },
                "required": [
                    "id"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "ContactAddress": {
                "properties": {
                    "line1": {
                        "type": "string"
                    },
                    "line2": {
                        "type": "string"
                    },
                    "country": {
                        "type": "string"
                    },
                    "city": {
                        "type": "string"
                    },
                    "postalCode": {
                        "type": "string"
                    },
                    "state": {
                        "type": "string"
                    }
                },
                "required": [
                    "line1",
                    "country",
                    "city"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "ContactInfo": {
                "properties": {
                    "email": {
                        "type": "string"
                    },
                    "phone": {
                        "type": "string"
                    },
                    "address": {
                        "$ref": "#/components/schemas/ContactAddress"
                    }
                },
                "required": [
                    "email",
                    "phone",
                    "address"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "LineItem": {
                "properties": {
                    "code": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "amount": {
                        "type": "number",
                        "format": "double"
                    },
                    "price": {
                        "type": "number",
                        "format": "double"
                    },
                    "subscription": {
                        "type": "string"
                    }
                },
                "required": [
                    "code",
                    "description",
                    "price",
                    "subscription"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "InvoiceStatus": {
                "enum": [
                    "submitted",
                    "paid",
                    "partiallyPaid",
                    "debt",
                    "Failed Payment",
                    "refunded"
                ],
                "type": "string"
            },
            "Currency": {
                "type": "string",
                "enum": [
                    "USD",
                    "EUR",
                    "NIS"
                ]
            },
            "PaymentDetails": {
                "properties": {
                    "driverType": {
                        "type": "string"
                    },
                    "driverId": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "chargeDate": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "amount": {
                        "type": "number",
                        "format": "double"
                    },
                    "currency": {
                        "$ref": "#/components/schemas/Currency"
                    },
                    "last4": {
                        "type": "string"
                    }
                },
                "required": [
                    "driverType",
                    "driverId",
                    "chargeDate",
                    "amount",
                    "currency"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "Invoice": {
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Unique identifier for the invoice"
                    },
                    "account": {
                        "type": "string",
                        "description": "DL account ID"
                    },
                    "contacts": {
                        "items": {
                            "$ref": "#/components/schemas/ContactInfo"
                        },
                        "type": "array",
                        "description": "Detailed information about all of the invoice contacts"
                    },
                    "items": {
                        "items": {
                            "$ref": "#/components/schemas/LineItem"
                        },
                        "type": "array",
                        "description": "Detailing all the billable products included in the invoice"
                    },
                    "totalPrice": {
                        "type": "number",
                        "format": "double",
                        "description": "Total billed amount"
                    },
                    "billedPeriod": {
                        "properties": {
                            "endDate": {
                                "type": "string",
                                "format": "date-time"
                            },
                            "startDate": {
                                "type": "string",
                                "format": "date-time"
                            }
                        },
                        "required": [
                            "endDate",
                            "startDate"
                        ],
                        "type": "object",
                        "description": "Date range of the resource usage"
                    },
                    "status": {
                        "$ref": "#/components/schemas/InvoiceStatus",
                        "description": "Current invoice status"
                    },
                    "payments": {
                        "items": {
                            "$ref": "#/components/schemas/PaymentDetails"
                        },
                        "type": "array",
                        "description": "All payments details"
                    },
                    "stripeInvoiceUrl": {
                        "type": "string",
                        "description": "When applicable, include a link to a pdf invoice hosted by Stripe"
                    },
                    "stripeInvoiceId": {
                        "type": "string",
                        "description": "When applicable, include the identifier of a Stripe invoice object"
                    },
                    "stripeInvoiceNumber": {
                        "type": "string",
                        "description": "When applicable, include the number of a Stripe invoice"
                    },
                    "pdfLocation": {
                        "type": "string",
                        "description": "When applicable, include the location in which the DL archive stores the Stripe invoice pdf"
                    },
                    "chargeInProgress": {
                        "type": "boolean",
                        "description": "Specifies whether a charge is currently in progress"
                    }
                },
                "required": [
                    "id",
                    "account",
                    "contacts",
                    "items",
                    "totalPrice",
                    "billedPeriod",
                    "status",
                    "payments"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "BillingResourceKey": {
                "enum": [
                    "annotation-tool-hours",
                    "data-points",
                    "api-calls",
                    "hosted-storage",
                    "system-compute",
                    "compute-cpu-regular-xs",
                    "compute-cpu-regular-s",
                    "compute-cpu-regular-m",
                    "compute-cpu-regular-l",
                    "compute-cpu-highmem-xs",
                    "compute-cpu-highmem-s",
                    "compute-cpu-highmem-m",
                    "compute-cpu-highmem-l",
                    "compute-gpu-k80-s",
                    "compute-gpu-k80-m",
                    "compute-gpu-t4",
                    "unlimited-seats",
                    "default-annotation-studios",
                    "lidar",
                    "auto-annotation-tools",
                    "ml-model-assisted-annotation",
                    "ai-video-tracker",
                    "data-bug-tracking",
                    "storage-integration",
                    "data-visualization",
                    "metadata-search",
                    "data-versioning",
                    "output-format-converters",
                    "workforce-management-tool",
                    "analytics-dashboard",
                    "advanced-analytics-history",
                    "multiple-workforces",
                    "sdk-access",
                    "api-access",
                    "data-pipeline-filters",
                    "human-tasks",
                    "faas",
                    "model-management",
                    "email-customer-support",
                    "knowledge-base",
                    "faq",
                    "instructional-video-library-access",
                    "ticket-based-troubleshooting",
                    "access-to-customer-success-representation-pool",
                    "debug-and-guide-via-tracking-sys",
                    "on-demand-calls",
                    "engineering-consulting",
                    "dedicated-customer-success",
                    "quarterly-customer-success-check-in",
                    "on-demand-customer-success-calls",
                    "monthly-customer-success-calls",
                    "weekly-customer-success-calls",
                    "developer-success-assistance",
                    "professional-services-or-developer-success-lead-onboarding",
                    "professional-services-custom-development",
                    "managed-labeling-service",
                    "professional-services",
                    "role-and-group-based-access-control",
                    "custom-project-dashboard",
                    "enterprise-support-sla",
                    "sso-integration",
                    "mfa-integration",
                    "ip-whitelist",
                    "vpc-deployment"
                ],
                "type": "string"
            },
            "RangeOrFeatureTier": {
                "properties": {
                    "price": {
                        "type": "number",
                        "format": "double"
                    },
                    "range": {
                        "properties": {
                            "higher": {
                                "type": "number",
                                "format": "double"
                            },
                            "lower": {
                                "type": "number",
                                "format": "double"
                            }
                        },
                        "required": [
                            "higher",
                            "lower"
                        ],
                        "type": "object"
                    },
                    "name": {
                        "type": "string"
                    }
                },
                "required": [
                    "price"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "OverQuota": {
                "properties": {
                    "price": {
                        "type": "number",
                        "format": "double"
                    },
                    "limit": {
                        "type": "number",
                        "format": "double"
                    }
                },
                "required": [
                    "price",
                    "limit"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "APIBillableResource": {
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "url": {
                        "type": "string"
                    },
                    "key": {
                        "$ref": "#/components/schemas/BillingResourceKey"
                    },
                    "name": {
                        "type": "string"
                    },
                    "type": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "icon": {
                        "type": "string"
                    },
                    "price": {
                        "type": "number",
                        "format": "double"
                    },
                    "amount": {
                        "type": "number",
                        "format": "double"
                    },
                    "unit": {
                        "type": "string"
                    },
                    "tiers": {
                        "items": {
                            "$ref": "#/components/schemas/RangeOrFeatureTier"
                        },
                        "type": "array"
                    },
                    "overQuota": {
                        "$ref": "#/components/schemas/OverQuota"
                    },
                    "displayedInInvoice": {
                        "type": "boolean"
                    },
                    "group": {
                        "type": "string"
                    },
                    "tier": {
                        "type": "string"
                    }
                },
                "required": [
                    "id",
                    "url",
                    "key",
                    "name",
                    "type",
                    "description",
                    "icon"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "MetricGroup": {
                "enum": [
                    "Annotation tool studios",
                    "automation",
                    "Data QA tools",
                    "Data management",
                    "Workforce management",
                    "Data pipelines",
                    "Customer support",
                    "Customer care",
                    "Enterprise features",
                    "General"
                ],
                "type": "string"
            },
            "BillingResource": {
                "properties": {
                    "key": {
                        "$ref": "#/components/schemas/BillingResourceKey"
                    },
                    "name": {
                        "type": "string"
                    },
                    "type": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "icon": {
                        "type": "string"
                    },
                    "price": {
                        "type": "number",
                        "format": "double"
                    },
                    "amount": {
                        "type": "number",
                        "format": "double"
                    },
                    "unit": {
                        "type": "string"
                    },
                    "displayedInInvoice": {
                        "type": "boolean"
                    },
                    "group": {
                        "$ref": "#/components/schemas/MetricGroup"
                    },
                    "tier": {
                        "type": "string"
                    }
                },
                "required": [
                    "key",
                    "name",
                    "type",
                    "description",
                    "icon"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "Plan": {
                "properties": {
                    "key": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "resources": {
                        "items": {
                            "$ref": "#/components/schemas/BillingResource"
                        },
                        "type": "array"
                    },
                    "annualPlanPrice": {
                        "type": "number",
                        "format": "double"
                    },
                    "monthlyPlanPrice": {
                        "type": "number",
                        "format": "double"
                    },
                    "annualDiscountPercentage": {
                        "type": "number",
                        "format": "double"
                    },
                    "price": {
                        "type": "number",
                        "format": "double"
                    }
                },
                "required": [
                    "key",
                    "name",
                    "description",
                    "resources"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "BillingPeriod": {
                "type": "string",
                "enum": [
                    "monthly",
                    "annual",
                    "custom"
                ]
            },
            "ScopeType": {
                "enum": [
                    "org",
                    "project"
                ],
                "type": "string"
            },
            "BillingStatus": {
                "enum": [
                    "future",
                    "active",
                    "paused",
                    "blocked",
                    "expired",
                    "canceled",
                    "renewed"
                ],
                "type": "string"
            },
            "APISubscription": {
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Unique identifier for the subscription"
                    },
                    "url": {
                        "type": "string",
                        "description": "Url for the subscription"
                    },
                    "plan": {
                        "$ref": "#/components/schemas/Plan",
                        "description": "Plan detailing the resources allocated to the subscription"
                    },
                    "createdAt": {
                        "type": "string",
                        "format": "date-time",
                        "description": "Creation date"
                    },
                    "updatedAt": {
                        "type": "string",
                        "format": "date-time",
                        "description": "Latest update date"
                    },
                    "period": {
                        "$ref": "#/components/schemas/BillingPeriod",
                        "description": "Subscription period"
                    },
                    "startTime": {
                        "type": "string",
                        "format": "date-time",
                        "description": "Subscription start time"
                    },
                    "endTime": {
                        "type": "string",
                        "format": "date-time",
                        "description": "Subscription expiration time"
                    },
                    "scope": {
                        "properties": {
                            "entityId": {
                                "type": "string"
                            },
                            "type": {
                                "$ref": "#/components/schemas/ScopeType"
                            }
                        },
                        "required": [
                            "entityId",
                            "type"
                        ],
                        "type": "object",
                        "description": "Subscription scope type and id"
                    },
                    "accountId": {
                        "type": "string",
                        "description": "DL account Id"
                    },
                    "autoRenewal": {
                        "type": "boolean",
                        "description": "Whether the subscription will auto renew when it's current quota expires"
                    },
                    "status": {
                        "$ref": "#/components/schemas/BillingStatus",
                        "description": "Current status"
                    },
                    "paymentDriverId": {
                        "type": "string"
                    },
                    "paymentMethodId": {
                        "type": "string"
                    },
                    "addon": {
                        "type": "boolean",
                        "description": "Whether the subscription is an addon or not"
                    }
                },
                "required": [
                    "id",
                    "url",
                    "plan",
                    "createdAt",
                    "period",
                    "startTime",
                    "endTime",
                    "scope",
                    "accountId",
                    "status"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "BillingScope": {
                "properties": {
                    "type": {
                        "$ref": "#/components/schemas/ScopeType"
                    },
                    "entityId": {
                        "type": "string"
                    }
                },
                "required": [
                    "type",
                    "entityId"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "SubscriptionInput": {
                "properties": {
                    "period": {
                        "$ref": "#/components/schemas/BillingPeriod"
                    },
                    "startDate": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "endDate": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "scope": {
                        "$ref": "#/components/schemas/BillingScope"
                    },
                    "autoRenewal": {
                        "type": "boolean"
                    },
                    "account": {
                        "type": "string"
                    },
                    "driverId": {
                        "type": "string"
                    },
                    "methodId": {
                        "type": "string"
                    },
                    "planKey": {
                        "type": "string"
                    },
                    "plan": {
                        "$ref": "#/components/schemas/Plan"
                    }
                },
                "required": [
                    "period",
                    "scope",
                    "autoRenewal",
                    "account"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "EditSubscriptionInput": {
                "properties": {
                    "autoRenewal": {
                        "type": "boolean"
                    },
                    "paymentDriverId": {
                        "type": "string"
                    },
                    "paymentMethodId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "additionalProperties": true
            },
            "RenewSubscriptionInput": {
                "properties": {
                    "chargeSubscription": {
                        "type": "boolean"
                    },
                    "force": {
                        "type": "boolean"
                    }
                },
                "required": [
                    "chargeSubscription"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "CursorPage_APISubscription_": {
                "properties": {
                    "totalItemsCount": {
                        "type": "number",
                        "format": "double"
                    },
                    "items": {
                        "items": {
                            "$ref": "#/components/schemas/APISubscription"
                        },
                        "type": "array"
                    },
                    "totalPagesCount": {
                        "type": "number",
                        "format": "double"
                    },
                    "hasNextPage": {
                        "type": "boolean"
                    }
                },
                "required": [
                    "totalItemsCount",
                    "items",
                    "totalPagesCount",
                    "hasNextPage"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "CustomSubscriptionInput": {
                "properties": {
                    "period": {
                        "$ref": "#/components/schemas/BillingPeriod"
                    },
                    "startDate": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "endDate": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "scope": {
                        "$ref": "#/components/schemas/BillingScope"
                    },
                    "autoRenewal": {
                        "type": "boolean"
                    },
                    "account": {
                        "type": "string"
                    },
                    "plan": {
                        "$ref": "#/components/schemas/Plan"
                    }
                },
                "required": [
                    "period",
                    "startDate",
                    "endDate",
                    "scope",
                    "autoRenewal",
                    "account",
                    "plan"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "SubscriptionUpgradeInput": {
                "properties": {
                    "period": {
                        "$ref": "#/components/schemas/BillingPeriod"
                    },
                    "startDate": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "autoRenewal": {
                        "type": "boolean"
                    },
                    "planKey": {
                        "type": "string"
                    },
                    "paymentDriverId": {
                        "type": "string"
                    },
                    "paymentMethodId": {
                        "type": "string"
                    },
                    "driverId": {
                        "type": "string"
                    },
                    "methodId": {
                        "type": "string"
                    }
                },
                "required": [
                    "period",
                    "planKey"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "SubscriptionExtensionInput": {
                "properties": {
                    "resource": {
                        "type": "string"
                    },
                    "amount": {
                        "type": "number",
                        "format": "double"
                    },
                    "autoRenewal": {
                        "type": "boolean"
                    }
                },
                "required": [
                    "resource",
                    "amount"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "UsageLog": {
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "date": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "usage": {
                        "type": "number",
                        "format": "double"
                    },
                    "project": {
                        "type": "string"
                    }
                },
                "required": [
                    "id",
                    "date",
                    "usage",
                    "project"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "ResourceUsage": {
                "properties": {
                    "key": {
                        "type": "string"
                    },
                    "used": {
                        "type": "number",
                        "format": "double"
                    },
                    "usageLog": {
                        "items": {
                            "$ref": "#/components/schemas/UsageLog"
                        },
                        "type": "array"
                    },
                    "dateDepleted": {
                        "type": "string",
                        "format": "date-time"
                    }
                },
                "required": [
                    "key",
                    "used",
                    "usageLog"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "UsageReport": {
                "properties": {
                    "subscriptionId": {
                        "type": "string"
                    },
                    "plan": {
                        "$ref": "#/components/schemas/Plan"
                    },
                    "period": {
                        "$ref": "#/components/schemas/BillingPeriod"
                    },
                    "startDate": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "endDate": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "account": {
                        "type": "string"
                    },
                    "usage": {
                        "items": {
                            "$ref": "#/components/schemas/ResourceUsage"
                        },
                        "type": "array"
                    },
                    "autoRenewal": {
                        "type": "boolean"
                    }
                },
                "required": [
                    "subscriptionId",
                    "plan",
                    "period",
                    "startDate",
                    "endDate",
                    "account",
                    "usage",
                    "autoRenewal"
                ],
                "type": "object",
                "additionalProperties": true
            }
        },
        "securitySchemes": {
            "bearerAuth": {
                "type": "http",
                "scheme": "bearer",
                "bearerFormat": "JWT"
            }
        }
    },
    "info": {
        "description": "# Drive your AI to production with end-to-end data management, automation pipelines and a quality-first data labeling platform.",
        "title": "Dataloop.ai REST API",
        "contact": {
            "email": "support@dataloop.ai"
        },
        "x-logo": {
            "url": "https://console.dataloop.ai/img/logo-for-white-bkg-big.3ad1a938.png"
        },
        "version": "1.11.2"
    },
    "openapi": "3.0.0",
    "paths": {
        "/accounts": {
            "get": {
                "operationId": "Get My Accounts",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/APIAccount"
                                    },
                                    "type": "array"
                                }
                            }
                        }
                    }
                },
                "description": "List all user's accounts",
                "tags": [
                    "Accounts"
                ],
                "security": [],
                "parameters": []
            },
            "post": {
                "operationId": "Create Account",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/APIAccount"
                                },
                                "examples": {
                                    "Example 1": {
                                        "value": {
                                            "createdBy": "my@user.com",
                                            "name": "My New Account",
                                            "org": "myOrgId"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "description": "Create a new account for a given organization",
                "tags": [
                    "Accounts"
                ],
                "security": [],
                "parameters": [],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateAccountRequest"
                            }
                        }
                    }
                }
            }
        },
        "/accounts/{accountId}": {
            "get": {
                "operationId": "Get Account",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/APIAccount"
                                }
                            }
                        }
                    }
                },
                "description": "Get a single account",
                "tags": [
                    "Accounts"
                ],
                "security": [],
                "parameters": [
                    {
                        "in": "path",
                        "name": "accountId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/accounts/{accountId}/projects": {
            "get": {
                "operationId": "Get Account Projects",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/APIProject"
                                    },
                                    "type": "array"
                                }
                            }
                        }
                    }
                },
                "description": "Get all projects for a given account",
                "tags": [
                    "Accounts"
                ],
                "security": [],
                "parameters": [
                    {
                        "in": "path",
                        "name": "accountId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/activities/": {
            "get": {
                "operationId": "UiActivities_getUiActivities",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ActivitiesDescriptor_"
                                }
                            }
                        }
                    }
                },
                "description": "",
                "tags": [
                    "Activities"
                ],
                "parameters": [
                    {
                        "description": "",
                        "in": "query",
                        "name": "projectId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/annotations/{annotationId}": {
            "get": {
                "operationId": "Get Annotation",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/APIAnnotation"
                                }
                            }
                        }
                    }
                },
                "description": "Get annotation by id",
                "tags": [
                    "Annotations"
                ],
                "security": [],
                "parameters": [
                    {
                        "description": "annotation id",
                        "in": "path",
                        "name": "annotationId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "x-codeSamples": [
                    {
                        "lang": "Python",
                        "source": "\nannotation = item.annotations.get(annotation_id='annotation_id')\n\n# \n# Get a single annotation.\n# \n# **Prerequisites**: You must have an item that has been annotated. You must have the role of an *owner* or\n# *developer* or be assigned a task that includes that item as an *annotation manager* or *annotator*.\n# \n# :param str annotation_id: The id of the annotation\n# :return: Annotation object or None\n# :return: Annotation object or None\n# :rtype: dtlpy.entities.annotation.Annotation\n# \n# "
                    }
                ]
            },
            "delete": {
                "operationId": "Delete Annotation",
                "responses": {
                    "204": {
                        "description": "No content"
                    }
                },
                "description": "Delete an Annotation from an item",
                "tags": [
                    "Annotations"
                ],
                "security": [],
                "parameters": [
                    {
                        "description": "Annotation id",
                        "in": "path",
                        "name": "annotationId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "x-codeSamples": [
                    {
                        "lang": "Python",
                        "source": "\nis_deleted = item.annotations.delete(annotation_id='annotation_id')\n\n# \n# Remove an annotation from item.\n# \n# **Prerequisites**: You must have an item that has been annotated. You must have the role of an *owner* or\n# *developer* or be assigned a task that includes that item as an *annotation manager* or *annotator*.\n# \n# :param dtlpy.entities.annotation.Annotation annotation: Annotation object\n# :param str annotation_id: The id of the annotation\n# :param dtlpy.entities.filters.Filters filters: Filters entity or a dictionary containing filters parameters\n# :return: True/False\n# :rtype: bool\n# \n# "
                    }
                ]
            },
            "put": {
                "operationId": "Update Annotation",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/APIAnnotation"
                                }
                            }
                        }
                    }
                },
                "description": "Update an item's annotation",
                "tags": [
                    "Annotations"
                ],
                "security": [],
                "parameters": [
                    {
                        "description": "Annotation id",
                        "in": "path",
                        "name": "annotationId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "when specified - editing system space metadata is enabled",
                        "in": "query",
                        "name": "system",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "in": "query",
                        "name": "replace",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Updated annotation object",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpdateAnnotationRequest",
                                "description": "Updated annotation object"
                            }
                        }
                    }
                },
                "x-codeSamples": [
                    {
                        "lang": "Python",
                        "source": "\nannotations = item.annotations.update(annotation='annotation')\n\n# \n# Update an existing annotation. For example, you may change the annotation's label and then use the update method.\n# \n# **Prerequisites**: You must have an item that has been annotated. You must have the role of an *owner* or\n# *developer* or be assigned a task that includes that item as an *annotation manager* or *annotator*.\n# \n# :param dtlpy.entities.annotation.Annotation annotations: Annotation object\n# :param bool system_metadata: bool - True, if you want to change metadata system\n# \n# :return: True if successful or error if unsuccessful\n# :rtype: bool\n# \n# "
                    }
                ]
            }
        },
        "/annotations/{annotationId}/issue": {
            "put": {
                "operationId": "Annotation Issues",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/APIAnnotation"
                                }
                            }
                        }
                    }
                },
                "description": "Update an item's annotation status to issue",
                "tags": [
                    "Annotations"
                ],
                "security": [],
                "parameters": [
                    {
                        "description": "Annotation id",
                        "in": "path",
                        "name": "annotationId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/annotationtasks": {
            "post": {
                "operationId": "Create Annotation Task",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "anyOf": [
                                        {
                                            "$ref": "#/components/schemas/APITask"
                                        },
                                        {
                                            "$ref": "#/components/schemas/APICommand"
                                        }
                                    ]
                                }
                            }
                        }
                    }
                },
                "description": "Create a new Task",
                "tags": [
                    "Annotation Tasks"
                ],
                "security": [],
                "parameters": [],
                "requestBody": {
                    "description": ": Task creation payload",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/TaskPayload",
                                "description": ": Task creation payload"
                            }
                        }
                    }
                },
                "x-codeSamples": [
                    {
                        "lang": "Python",
                        "source": "\ndataset.tasks.create(task= 'task_entity',\ndue_date = datetime.datetime(day= 1, month= 1, year= 2029).timestamp(),\nassignee_ids =[ 'annotator1@dataloop.ai', 'annotator2@dataloop.ai'])\n\n# \n# Create a new Task (Annotation or QA).\n# \n# **Prerequisites**: You must be in the role of an *owner*, *developer*, or *annotation manager* who has been assigned to be *owner* of the annotation task.\n# \n# :param str task_name: the name of the task\n# :param float due_date: date by which the task should be finished; for example, due_date=datetime.datetime(day=1, month=1, year=2029).timestamp()\n# :param list assignee_ids: list the task assignees (contributors) that should be working on the task. Provide a list of users' emails\n# :param List[WorkloadUnit] List[WorkloadUnit] workload: list of WorkloadUnit objects. Customize distribution (percentage) between the task assignees. For example: [dl.WorkloadUnit(annotator@hi.com, 80), dl.WorkloadUnit(annotator2@hi.com, 20)]\n# :param entities.Dataset dataset: dataset object, the dataset that refer to the task\n# :param str task_owner: task owner. Provide user email\n# :param str task_type: task type \"annotation\" or \"qa\"\n# :param str task_parent_id: optional if type is qa - parent annotation task id\n# :param str project_id: the Id of the project where task will be created\n# :param str recipe_id: recipe id for the task\n# :param list assignments_ids: assignments ids to the task\n# :param dict metadata: metadata for the task\n# :param entities.Filters filters: dl.Filters entity to filter items for the task\n# :param List[entities.Item] items: list of items (item Id or objects) to insert to the task\n# :param dict DQL query: filter items for the task\n# :param list available_actions: list of available actions (statuses) that will be available for the task items; The default statuses are: \"completed\" and \"discard\"\n# :param bool wait: wait until create task finish\n# :param entities.Filters check_if_exist: dl.Filters check if task exist according to filter\n# :param int limit: the limit items that the task can include\n# :param int  batch_size: Pulling batch size (items), use with pulling allocation method. Restrictions - Min 3, max 100\n# :param int max_batch_workload: max_batch_workload: Max items in assignment, use with pulling allocation method. Restrictions - Min batchSize + 2, max batchSize * 2\n# :param list allowed_assignees: list the task assignees (contributors) that should be working on the task. Provide a list of users' emails\n# :param entities.TaskPriority priority: priority of the task options in entities.TaskPriority\n# :param entities.ConsensusTaskType consensus_task_type: consensus_task_type of the task options in entities.ConsensusTaskType\n# :param int consensus_percentage: percentage of items to be copied to multiple annotators (consensus items)\n# :param int consensus_assignees: the number of different annotators per item (number of copies per item)\n# :param bool scoring: create a scoring app in project\n# :return: Task object\n# :rtype: dtlpy.entities.task.Task\n# \n# "
                    }
                ]
            },
            "get": {
                "operationId": "Find Annotation Tasks",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/APITaskCursor"
                                }
                            }
                        }
                    }
                },
                "description": "Find tasks by query",
                "tags": [
                    "Annotation Tasks"
                ],
                "security": [],
                "parameters": [
                    {
                        "description": "- An array of project IDs",
                        "in": "query",
                        "name": "projects",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    {
                        "description": "- Find by dataset",
                        "in": "query",
                        "name": "dataset",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "- Find by recipe",
                        "in": "query",
                        "name": "recipe",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "- Find by task status",
                        "in": "query",
                        "name": "status",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "- Filter by creator",
                        "in": "query",
                        "name": "creator",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "- Filter by task owner",
                        "in": "query",
                        "name": "taskOwner",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "- Find by task name",
                        "in": "query",
                        "name": "name",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "- Due date lower limit",
                        "in": "query",
                        "name": "minDate",
                        "required": false,
                        "schema": {
                            "format": "double",
                            "type": "number"
                        }
                    },
                    {
                        "description": "- Due date upper limit",
                        "in": "query",
                        "name": "maxDate",
                        "required": false,
                        "schema": {
                            "format": "double",
                            "type": "number"
                        }
                    },
                    {
                        "description": "- An array of assignment IDs",
                        "in": "query",
                        "name": "assignments",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    {
                        "description": "- The number of pages to skip from the start",
                        "in": "query",
                        "name": "pageOffset",
                        "required": false,
                        "schema": {
                            "format": "double",
                            "type": "number"
                        }
                    },
                    {
                        "description": "- How many tasks in one page",
                        "in": "query",
                        "name": "pageSize",
                        "required": false,
                        "schema": {
                            "format": "double",
                            "type": "number"
                        }
                    },
                    {
                        "description": "- Filter by parent task",
                        "in": "query",
                        "name": "parentTaskId",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "- Filter by task type - Annotation or QA",
                        "in": "query",
                        "name": "type",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/annotationtasks/count": {
            "post": {
                "operationId": "Get Projects Active Counters",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/APITaskCounters"
                                }
                            }
                        }
                    }
                },
                "description": "For org admin / owner:\nGet active counters for projects",
                "tags": [
                    "Annotation Tasks"
                ],
                "security": [],
                "parameters": [],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "datasetId": {
                                        "type": "string"
                                    },
                                    "projectIds": {
                                        "items": {
                                            "type": "string"
                                        },
                                        "type": "array"
                                    }
                                },
                                "required": [
                                    "projectIds"
                                ],
                                "type": "object"
                            }
                        }
                    }
                }
            }
        },
        "/annotationtasks/projects/{projectId}/counters": {
            "post": {
                "operationId": "Get counters for project",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/WorkflowsCounters"
                                }
                            }
                        }
                    }
                },
                "description": "Get counters for project",
                "tags": [
                    "Annotation Tasks"
                ],
                "security": [],
                "parameters": [
                    {
                        "description": ": Project id",
                        "in": "path",
                        "name": "projectId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "contributors": {
                                        "items": {
                                            "type": "string"
                                        },
                                        "type": "array"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                }
            }
        },
        "/annotationtasks/projects/{projectId}/datasets/{datasetId}/actions": {
            "get": {
                "operationId": "Get Dataset Actions",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/ItemAction"
                                    },
                                    "type": "array"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Missing or Invalid dataset id"
                    },
                    "404": {
                        "description": "Dataset not found"
                    }
                },
                "description": "Get all actions(statuses) related to the required dataset",
                "tags": [
                    "Annotation Tasks"
                ],
                "security": [],
                "parameters": [
                    {
                        "description": ": Project ID",
                        "in": "path",
                        "name": "projectId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": ": Dataset ID",
                        "in": "path",
                        "name": "datasetId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/annotationtasks/query": {
            "post": {
                "operationId": "Query Annotation Tasks",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CursorPage_any_"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Annotation Tasks"
                ],
                "security": [],
                "parameters": [],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/QueryFilter"
                            }
                        }
                    }
                },
                "x-codeSamples": [
                    {
                        "lang": "Python",
                        "source": "\ndataset.tasks.list(project_ids='project_ids',pages_size=100, page_offset=0)\n\n# \n# List all tasks.\n# \n# **Prerequisites**: You must be in the role of an *owner* or *developer* or *annotation manager* who has been assigned the task.\n# \n# :param project_ids: search tasks by given list of project ids\n# :param str status: search tasks by a given task status\n# :param str task_name: search tasks by a given task name\n# :param int pages_size: pages size of the output generator\n# :param int page_offset: page offset of the output generator\n# :param dtlpy.entities.recipe.Recipe recipe: Search tasks that use a given recipe. Provide the required recipe object\n# :param str creator: search tasks created by a given creator (user email)\n# :param dtlpy.entities.assignment.Assignment recipe assignments: assignments object\n# :param double min_date: search all tasks created AFTER a given date, use a milliseconds format. For example: 1661780622008\n# :param double max_date: search all tasks created BEFORE a given date, use a milliseconds format. For example: 1661780622008\n# :param dtlpy.entities.filters.Filters filters: dl.Filters entity to filters tasks using DQL\n# :return: List of Task objects\n# \n# "
                    }
                ]
            }
        },
        "/annotationtasks/{id}": {
            "patch": {
                "operationId": "Update Annotation Task",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/APITask"
                                }
                            }
                        }
                    }
                },
                "description": "Update an existing task",
                "tags": [
                    "Annotation Tasks"
                ],
                "security": [],
                "parameters": [
                    {
                        "description": ": Task ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "description": ": The fields to update",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PartialTaskPayload",
                                "description": ": The fields to update"
                            }
                        }
                    }
                },
                "x-codeSamples": [
                    {
                        "lang": "Python",
                        "source": "\ndataset.tasks.update(task='task_entity')\n\n# \n# Update a Task.\n# \n# **Prerequisites**: You must be in the role of an *owner* or *developer* or *annotation manager* who created that task.\n# \n# :param dtlpy.entities.task.Task task: the task object\n# :param bool system_metadata: True, if you want to change metadata system\n# :return: Task object\n# :rtype: dtlpy.entities.task.Task\n# \n# "
                    }
                ]
            },
            "get": {
                "operationId": "Get Annotation Task",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/APITask"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Missing or Invalid id"
                    },
                    "404": {
                        "description": "Task not found"
                    }
                },
                "description": "Get a specific task",
                "tags": [
                    "Annotation Tasks"
                ],
                "security": [],
                "parameters": [
                    {
                        "description": ": Task ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "x-codeSamples": [
                    {
                        "lang": "Python",
                        "source": "\ndataset.tasks.get(task_id='task_id')\n\n# \n# Get a Task object to use in your code.\n# \n# **Prerequisites**: You must be in the role of an *owner* or *developer* or *annotation manager* who has been assigned the task.\n# \n# :param str task_name: optional - search by name\n# :param str task_id: optional - search by id\n# :return: task object\n# :rtype: dtlpy.entities.task.Task\n# \n# "
                    }
                ]
            },
            "delete": {
                "operationId": "Delete Annotation Task",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "anyOf": [
                                        {},
                                        {
                                            "$ref": "#/components/schemas/APICommand"
                                        }
                                    ]
                                }
                            }
                        }
                    }
                },
                "description": "Delete a task",
                "tags": [
                    "Annotation Tasks"
                ],
                "security": [],
                "parameters": [
                    {
                        "description": ": Task ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/DeleteTaskPayload"
                            }
                        }
                    }
                },
                "x-codeSamples": [
                    {
                        "lang": "Python",
                        "source": "\ndataset.tasks.delete(task_id='task_id')\n\n# \n# Delete the Task.\n# \n# **Prerequisites**: You must be in the role of an *owner* or *developer* or *annotation manager* who created that task.\n# \n# :param dtlpy.entities.task.Task task: the task object\n# :param str task_name: the name of the task\n# :param str task_id: the Id of the task\n# :param bool wait: wait until delete task finish\n# :return: True is success\n# :rtype: bool\n# \n# "
                    }
                ]
            }
        },
        "/annotationtasks/{id}/addToTask": {
            "post": {
                "operationId": "Add Items to Annotation Task",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "anyOf": [
                                        {
                                            "$ref": "#/components/schemas/APITask"
                                        },
                                        {
                                            "$ref": "#/components/schemas/APICommand"
                                        }
                                    ]
                                }
                            }
                        }
                    }
                },
                "description": "Add work to an existing Task",
                "tags": [
                    "Annotation Tasks"
                ],
                "security": [],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "description": ": Task update payload",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/AddToTaskPayload",
                                "description": ": Task update payload"
                            }
                        }
                    }
                },
                "x-codeSamples": [
                    {
                        "lang": "Python",
                        "source": "\ndataset.tasks.add_items(task= 'task_entity',\nitems = [items])\n\n# \n# Add items to a Task.\n# \n# **Prerequisites**: You must be in the role of an *owner*, *developer*, or *annotation manager* who has been assigned to be *owner* of the annotation task.\n# \n# :param dtlpy.entities.task.Task task: task object\n# :param str task_id: the Id of the task\n# :param dtlpy.entities.filters.Filters filters: Filters entity or a dictionary containing filters parameters\n# :param list items: list of items (item Ids or objects) to add to the task\n# :param list assignee_ids: list to assignee who works in the task\n# :param dict query: query to filter the items for the task\n# :param list workload: list of WorkloadUnit objects. Customize distribution (percentage) between the task assignees. For example: [dl.WorkloadUnit(annotator@hi.com, 80), dl.WorkloadUnit(annotator2@hi.com, 20)]\n# :param int limit: the limit items that task can include\n# :param bool wait: wait until add items will to finish\n# :return: task entity\n# :rtype: dtlpy.entities.task.Task\n# \n# "
                    }
                ]
            }
        },
        "/annotationtasks/{id}/contributors": {
            "post": {
                "operationId": "Update Annotation Task Contributors",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/APITask"
                                }
                            }
                        }
                    }
                },
                "description": "Update task contributors",
                "tags": [
                    "Annotation Tasks"
                ],
                "security": [],
                "parameters": [
                    {
                        "description": ": Task ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "description": ": Task update payload",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpdateContributorsPayload",
                                "description": ": Task update payload"
                            }
                        }
                    }
                }
            }
        },
        "/annotationtasks/{id}/queue": {
            "get": {
                "operationId": "Get Annotation Task Queue Details",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TaskQueueDetails"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Missing or Invalid id"
                    },
                    "404": {
                        "description": "Task not found"
                    }
                },
                "description": "Get a specific task's queue details",
                "tags": [
                    "Annotation Tasks"
                ],
                "security": [],
                "parameters": [
                    {
                        "description": ": Task ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/annotationtasks/{id}/relatives": {
            "get": {
                "operationId": "Get Annotation Task Relatives",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/TaskRelativeInput"
                                    },
                                    "type": "array"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Missing or Invalid id"
                    },
                    "404": {
                        "description": "Task not found"
                    }
                },
                "description": "Get the relative task names of a specific task",
                "tags": [
                    "Annotation Tasks"
                ],
                "security": [],
                "parameters": [
                    {
                        "description": ": Task ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/annotationtasks/{id}/removeFromTask": {
            "post": {
                "operationId": "Remove Items from Annotation Task",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "anyOf": [
                                        {
                                            "$ref": "#/components/schemas/APICommand"
                                        },
                                        {
                                            "$ref": "#/components/schemas/APITask"
                                        }
                                    ]
                                }
                            }
                        }
                    }
                },
                "description": "Remove work from an existing Task",
                "tags": [
                    "Annotation Tasks"
                ],
                "security": [],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "description": ": Task update payload",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/RemoveFromTaskPayload",
                                "description": ": Task update payload"
                            }
                        }
                    }
                }
            }
        },
        "/app-registry": {
            "post": {
                "operationId": "Dpk_publish",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/APIDpk"
                                }
                            }
                        }
                    }
                },
                "description": "Publish an DPK app.\nSupply the dpk settings in the body request to create the object.",
                "tags": [
                    "dpk"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/APIPostDpk"
                            }
                        }
                    },
                    "required": true
                }
            }
        },
        "/app-registry/query": {
            "post": {
                "operationId": "Dpk_query",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CursorPageAPIDpk"
                                }
                            }
                        }
                    }
                },
                "description": "",
                "tags": [
                    "dpk"
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/QueryString"
                }
            }
        },
        "/app-registry/{id}": {
            "get": {
                "operationId": "Dpk_get",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/APIDpk"
                                }
                            }
                        }
                    }
                },
                "description": "Get an dpk updated object from the db.",
                "tags": [
                    "dpk"
                ],
                "parameters": [
                    {
                        "description": "The dpk id",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "delete": {
                "operationId": "Dpk_deleteOne",
                "responses": {
                    "204": {
                        "description": "No content"
                    }
                },
                "description": "",
                "tags": [
                    "dpk"
                ],
                "parameters": [
                    {
                        "description": "",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/app-registry/{name}/revisions": {
            "post": {
                "operationId": "Dpk_getRevisions",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CursorPageAPIDpk"
                                }
                            }
                        }
                    }
                },
                "description": "Get the revisions of dpk by name.",
                "tags": [
                    "dpk"
                ],
                "parameters": [
                    {
                        "description": "The dpk id",
                        "in": "path",
                        "name": "name",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/QueryString"
                }
            }
        },
        "/apps": {
            "post": {
                "operationId": "App_install",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/APIApp"
                                }
                            }
                        }
                    }
                },
                "description": "Install a new app.\nCreate and install a new app on the platform by given dpk name in the body request.",
                "tags": [
                    "apps"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/APIPostApp"
                            }
                        }
                    },
                    "required": true
                }
            }
        },
        "/apps/{id}": {
            "put": {
                "operationId": "App_update",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/APIApp"
                                }
                            }
                        }
                    }
                },
                "description": "Update existing app.\nThe server will save the new app props and refresh all the components belonging to the dpk app",
                "tags": [
                    "apps"
                ],
                "parameters": [
                    {
                        "description": "The app id",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/APIPatchApp"
                            }
                        }
                    },
                    "required": true
                }
            },
            "get": {
                "operationId": "App_get",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/APIApp"
                                }
                            }
                        }
                    }
                },
                "description": "Get an app updated object from the db.",
                "tags": [
                    "apps"
                ],
                "parameters": [
                    {
                        "description": "The app id",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "delete": {
                "operationId": "App_uninstall",
                "responses": {
                    "204": {
                        "description": "No content"
                    }
                },
                "description": "Uninstall running application.\nwill remove all the components belonging to the app",
                "tags": [
                    "apps"
                ],
                "parameters": [
                    {
                        "description": "The app id",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/assignments": {
            "get": {
                "operationId": "Find Assignments",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/APIAssignmentCursor"
                                }
                            }
                        }
                    }
                },
                "description": "Find assignments by query",
                "tags": [
                    "Assignments"
                ],
                "security": [],
                "parameters": [
                    {
                        "in": "query",
                        "name": "name",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "- Filter by project IDs",
                        "in": "query",
                        "name": "projects",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    {
                        "description": "- Filter by assignee",
                        "in": "query",
                        "name": "annotator",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "- Find by status",
                        "in": "query",
                        "name": "status",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "- The number of pages to skip from the start",
                        "in": "query",
                        "name": "pageOffset",
                        "required": false,
                        "schema": {
                            "format": "double",
                            "type": "number"
                        }
                    },
                    {
                        "description": "- How many assignments in one page",
                        "in": "query",
                        "name": "pageSize",
                        "required": false,
                        "schema": {
                            "format": "double",
                            "type": "number"
                        }
                    },
                    {
                        "in": "query",
                        "name": "taskId",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "active",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    }
                ]
            }
        },
        "/assignments/items/tasks/{taskId}/status": {
            "post": {
                "operationId": "Set Item Status Bulk Task",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "description": "Set bulk items status to their assignment by task",
                "tags": [
                    "Assignments"
                ],
                "security": [],
                "parameters": [
                    {
                        "in": "path",
                        "name": "taskId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "description": ": Assignment status payload",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "statusPayload": {
                                        "$ref": "#/components/schemas/AssignmentStatusPayload"
                                    },
                                    "itemIds": {
                                        "items": {
                                            "type": "string"
                                        },
                                        "type": "array"
                                    }
                                },
                                "required": [
                                    "statusPayload",
                                    "itemIds"
                                ],
                                "type": "object",
                                "description": ": Assignment status payload"
                            }
                        }
                    }
                }
            }
        },
        "/assignments/{id}": {
            "patch": {
                "operationId": "Update Assignment",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/APIAssignment"
                                }
                            }
                        }
                    }
                },
                "description": "Update an existing assignment",
                "tags": [
                    "Assignments"
                ],
                "security": [],
                "parameters": [
                    {
                        "description": ": Assignment ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "description": ": The fields to update",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PartialAssignmentPayload",
                                "description": ": The fields to update"
                            }
                        }
                    }
                },
                "x-codeSamples": [
                    {
                        "lang": "Python",
                        "source": "\nassignment = task.assignments.update(assignment='assignment_entity', system_metadata=False)\n\n# \n# Update an assignment.\n# \n# **Prerequisites**: You must be in the role of an *owner*, *developer*, or *annotation manager* who has been assigned as *owner* of the annotation task.\n# \n# :param dtlpy.entities.assignment.Assignment assignment assignment: assignment entity\n# :param bool system_metadata: True, if you want to change metadata system\n# :return: Assignment object\n# :rtype: dtlpy.entities.assignment.Assignment assignment\n# \n# "
                    }
                ]
            },
            "get": {
                "operationId": "Get Assignment",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/APIAssignment"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Missing or Invalid id"
                    },
                    "404": {
                        "description": "Assignment not found"
                    }
                },
                "description": "Get a specific assignment",
                "tags": [
                    "Assignments"
                ],
                "security": [],
                "parameters": [
                    {
                        "description": ": Assignment ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "x-codeSamples": [
                    {
                        "lang": "Python",
                        "source": "\nassignment = task.assignments.get(assignment_id='assignment_id')\n\n# \n# Get Assignment object to use it in your code.\n# \n# :param str assignment_name: optional - search by name\n# :param str assignment_id: optional - search by id\n# :return: Assignment object\n# :rtype: dtlpy.entities.assignment.Assignment\n# \n# "
                    }
                ]
            }
        },
        "/assignments/{id}/batch": {
            "post": {
                "operationId": "Load Assignment Batch",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "anyOf": [
                                        {
                                            "$ref": "#/components/schemas/APICommand"
                                        },
                                        {
                                            "items": {
                                                "$ref": "#/components/schemas/APIAssignment"
                                            },
                                            "type": "array"
                                        }
                                    ]
                                }
                            }
                        }
                    }
                },
                "description": "Load batch to Assignment in a queueing task",
                "tags": [
                    "Assignments"
                ],
                "security": [],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "description": ": Assignment creation payload",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/BatchAssignmentPayload",
                                "description": ": Assignment creation payload"
                            }
                        }
                    }
                }
            }
        },
        "/assignments/{id}/clear": {
            "post": {
                "operationId": "Clear Assignment Batch",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "anyOf": [
                                        {
                                            "$ref": "#/components/schemas/APICommand"
                                        },
                                        {
                                            "$ref": "#/components/schemas/APIAssignment"
                                        }
                                    ]
                                }
                            }
                        }
                    }
                },
                "description": "Clear items left in assignment in a queueing task",
                "tags": [
                    "Assignments"
                ],
                "security": [],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "description": ": Assignment creation payload",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/BatchAssignmentPayload",
                                "description": ": Assignment creation payload"
                            }
                        }
                    }
                }
            }
        },
        "/assignments/{id}/items/status": {
            "post": {
                "operationId": "Set Item Status Bulk Assignment",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "description": "Set bulk items status by assignment",
                "tags": [
                    "Assignments"
                ],
                "security": [],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "description": ": Assignment status payload",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "statusPayload": {
                                        "$ref": "#/components/schemas/AssignmentStatusPayload"
                                    },
                                    "itemIds": {
                                        "items": {
                                            "type": "string"
                                        },
                                        "type": "array"
                                    }
                                },
                                "required": [
                                    "statusPayload",
                                    "itemIds"
                                ],
                                "type": "object",
                                "description": ": Assignment status payload"
                            }
                        }
                    }
                }
            }
        },
        "/assignments/{id}/items/{itemId}/status": {
            "post": {
                "operationId": "Set Item Status",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "anyOf": [
                                        {
                                            "$ref": "#/components/schemas/APICommand"
                                        },
                                        {
                                            "properties": {},
                                            "additionalProperties": {
                                                "type": "string"
                                            },
                                            "type": "object"
                                        }
                                    ]
                                }
                            }
                        }
                    }
                },
                "description": "Set status to one item in an assignment",
                "tags": [
                    "Assignments"
                ],
                "security": [],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "path",
                        "name": "itemId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "description": ": Assignment status payload",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/AssignmentStatusPayload",
                                "description": ": Assignment status payload"
                            }
                        }
                    }
                }
            }
        },
        "/assignments/{id}/partial": {
            "post": {
                "operationId": "Get Assignment Fields",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Partial_Assignment_"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Missing or Invalid id"
                    },
                    "404": {
                        "description": "Assignment not found"
                    }
                },
                "description": "Get a specific assignment fields",
                "tags": [
                    "Assignments"
                ],
                "security": [],
                "parameters": [
                    {
                        "description": ": Assignment ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "relatedItemId": {
                                        "type": "string"
                                    },
                                    "fields": {
                                        "items": {
                                            "type": "string"
                                        },
                                        "type": "array"
                                    }
                                },
                                "required": [
                                    "fields"
                                ],
                                "type": "object"
                            }
                        }
                    }
                }
            }
        },
        "/assignments/{id}/reassign": {
            "post": {
                "operationId": "Reassign Assignment",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "anyOf": [
                                        {
                                            "$ref": "#/components/schemas/APICommand"
                                        },
                                        {
                                            "$ref": "#/components/schemas/APIAssignment"
                                        }
                                    ]
                                }
                            }
                        }
                    }
                },
                "description": "Reassign Assignment to annotator",
                "tags": [
                    "Assignments"
                ],
                "security": [],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "description": ": Assignment creation payload",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ReassignAssignmentPayload",
                                "description": ": Assignment creation payload"
                            }
                        }
                    }
                },
                "x-codeSamples": [
                    {
                        "lang": "Python",
                        "source": "\nassignment = task.assignments.reassign(assignee_ids='annotator1@dataloop.ai')\n\n# \n# Reassign an assignment.\n# \n# **Prerequisites**: You must be in the role of an *owner*, *developer*, or *annotation manager* who has been assigned as *owner* of the annotation task.\n# \n# :param str assignee_id: the email of the user that want to assign the assignment\n# :param dtlpy.entities.assignment.Assignment assignment: assignment object\n# :param assignment_id: the Id of the assignment\n# :param dtlpy.entities.task.Task task: task object\n# :param str task_id: the Id of the task that include the assignment\n# :param bool wait: wait until reassign assignment finish\n# :return: Assignment object\n# :rtype: dtlpy.entities.assignment.Assignment\n# \n# "
                    }
                ]
            }
        },
        "/assignments/{id}/redistribute": {
            "post": {
                "operationId": "Redistribute Assignment",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "anyOf": [
                                        {
                                            "$ref": "#/components/schemas/APICommand"
                                        },
                                        {
                                            "items": {
                                                "$ref": "#/components/schemas/APIAssignment"
                                            },
                                            "type": "array"
                                        }
                                    ]
                                }
                            }
                        }
                    }
                },
                "description": "Redistribute Assignment to annotators",
                "tags": [
                    "Assignments"
                ],
                "security": [],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "description": ": Assignment creation payload",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/RedistributeAssignmentPayload",
                                "description": ": Assignment creation payload"
                            }
                        }
                    }
                },
                "x-codeSamples": [
                    {
                        "lang": "Python",
                        "source": "\nassignment = task.assignments.redistribute(workload=dl.Workload([dl.WorkloadUnit(assignee_id=\"annotator1@dataloop.ai\", load=50),\ndl.WorkloadUnit(assignee_id=\"annotator2@dataloop.ai\", load=50)]))\n\n# \n# Redistribute an assignment.\n# \n# **Prerequisites**: You must be in the role of an *owner*, *developer*, or *annotation manager* who has been assigned as *owner* of the annotation task.\n# \n# \n# :param dtlpy.entities.assignment.Workload workload: list of WorkloadUnit objects. Customize distribution (percentage) between the task assignees. For example: [dl.WorkloadUnit(annotator@hi.com, 80), dl.WorkloadUnit(annotator2@hi.com, 20)]\n# :param dtlpy.entities.assignment.Assignment assignment: assignment object\n# :param str assignment_id: the Id of the assignment\n# :param dtlpy.entities.task.Task task: the task object that include the assignment\n# :param str task_id: the Id of the task that include the assignment\n# :param bool wait: wait until redistribute assignment finish\n# :return: Assignment object\n# :rtype: dtlpy.entities.assignment.Assignment assignment\n# "
                    }
                ]
            }
        },
        "/audit/logs": {
            "post": {
                "operationId": "Query Audit Logs",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AuditLogsCursorPage"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Audit"
                ],
                "security": [],
                "parameters": [],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "descending": {
                                        "type": "boolean"
                                    },
                                    "sortBy": {
                                        "type": "string"
                                    },
                                    "pageSize": {
                                        "type": "number",
                                        "format": "double"
                                    },
                                    "page": {
                                        "type": "number",
                                        "format": "double"
                                    },
                                    "toDate": {
                                        "type": "string",
                                        "format": "date-time"
                                    },
                                    "fromDate": {
                                        "type": "string",
                                        "format": "date-time"
                                    },
                                    "user": {
                                        "anyOf": [
                                            {
                                                "type": "string"
                                            },
                                            {
                                                "items": {
                                                    "type": "string"
                                                },
                                                "type": "array"
                                            }
                                        ]
                                    },
                                    "action": {
                                        "type": "string"
                                    },
                                    "entityName": {
                                        "type": "string"
                                    },
                                    "entityType": {
                                        "type": "string"
                                    },
                                    "id": {
                                        "type": "string"
                                    },
                                    "orgId": {
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "orgId"
                                ],
                                "type": "object"
                            }
                        }
                    }
                }
            }
        },
        "/audit/logs/csv": {
            "get": {
                "operationId": "Get Audit Logs CSV",
                "responses": {
                    "204": {
                        "description": "No content"
                    }
                },
                "tags": [
                    "Audit"
                ],
                "security": [],
                "parameters": [
                    {
                        "in": "query",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "fromDate",
                        "required": true,
                        "schema": {
                            "format": "date-time",
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "toDate",
                        "required": true,
                        "schema": {
                            "format": "date-time",
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "id",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "entityType",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "entityName",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "entityId",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "action",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "user",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "sortBy",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "descending",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/billing": {
            "get": {
                "operationId": "List Usage Entries",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/APIUsageEntry"
                                    },
                                    "type": "array"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Billing"
                ],
                "security": [],
                "parameters": [
                    {
                        "in": "query",
                        "name": "project",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "startDate",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "endDate",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "monthly",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/billing/account/{account}/alerts/{id}": {
            "get": {
                "operationId": "Get Alert",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/APIAlert"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Billing"
                ],
                "security": [],
                "parameters": [
                    {
                        "in": "path",
                        "name": "account",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/billing/account/{account}/alerts/{id}/status": {
            "patch": {
                "operationId": "Update Alert",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/APIAlert"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Billing"
                ],
                "security": [],
                "parameters": [
                    {
                        "in": "path",
                        "name": "account",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "status": {
                                        "$ref": "#/components/schemas/AlertStatus"
                                    }
                                },
                                "required": [
                                    "status"
                                ],
                                "type": "object"
                            }
                        }
                    }
                }
            }
        },
        "/billing/account/{id}": {
            "get": {
                "operationId": "List Usage Entries",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/APIUsageEntry"
                                    },
                                    "type": "array"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Billing"
                ],
                "security": [],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "startDate",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "endDate",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "monthly",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/billing/account/{id}/alerts/query": {
            "post": {
                "operationId": "ListAccountAlerts",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/APIAlert"
                                    },
                                    "type": "array"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Billing"
                ],
                "security": [],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "sort": {
                                        "$ref": "#/components/schemas/FieldSort"
                                    },
                                    "pageSize": {
                                        "type": "number",
                                        "format": "double"
                                    },
                                    "page": {
                                        "type": "number",
                                        "format": "double"
                                    },
                                    "tier": {
                                        "$ref": "#/components/schemas/AlertTier"
                                    },
                                    "code": {
                                        "type": "string"
                                    },
                                    "status": {
                                        "$ref": "#/components/schemas/AlertStatus"
                                    },
                                    "orgId": {
                                        "anyOf": [
                                            {
                                                "type": "string"
                                            },
                                            {
                                                "items": {
                                                    "type": "string"
                                                },
                                                "type": "array"
                                            }
                                        ]
                                    },
                                    "accountId": {
                                        "anyOf": [
                                            {
                                                "type": "string"
                                            },
                                            {
                                                "items": {
                                                    "type": "string"
                                                },
                                                "type": "array"
                                            }
                                        ]
                                    },
                                    "subscriptionId": {
                                        "anyOf": [
                                            {
                                                "type": "string"
                                            },
                                            {
                                                "items": {
                                                    "type": "string"
                                                },
                                                "type": "array"
                                            }
                                        ]
                                    },
                                    "_id": {
                                        "anyOf": [
                                            {
                                                "type": "string"
                                            },
                                            {
                                                "items": {
                                                    "type": "string"
                                                },
                                                "type": "array"
                                            }
                                        ]
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                }
            }
        },
        "/billing/account/{id}/apicalls/csv": {
            "get": {
                "operationId": "Get Account API Calls CSV",
                "responses": {
                    "204": {
                        "description": "No content"
                    }
                },
                "tags": [
                    "Billing"
                ],
                "security": [],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "startDate",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "endDate",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "monthly",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "skipSumming",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/billing/account/{id}/apicalls/json": {
            "get": {
                "operationId": "Get Account API Calls JSON",
                "responses": {
                    "204": {
                        "description": "No content"
                    }
                },
                "tags": [
                    "Billing"
                ],
                "security": [],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "startDate",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "endDate",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "monthly",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/billing/account/{id}/csv": {
            "get": {
                "operationId": "List Usage CSV",
                "responses": {
                    "204": {
                        "description": "No content"
                    }
                },
                "tags": [
                    "Billing"
                ],
                "security": [],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "startDate",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "endDate",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "monthly",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/billing/accounts": {
            "post": {
                "operationId": "Create Billing Account",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DBBillingAccount"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Billing"
                ],
                "security": [],
                "parameters": [],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PartialBillingAccount"
                            }
                        }
                    }
                }
            }
        },
        "/billing/accounts/dl/{id}": {
            "get": {
                "operationId": "Get Billing Account By DLAccount",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DBBillingAccount"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Billing"
                ],
                "security": [],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/billing/accounts/{id}": {
            "get": {
                "operationId": "Get Billing Account",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DBBillingAccount"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Billing"
                ],
                "security": [],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "patch": {
                "operationId": "Edit Billing Account",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DBBillingAccount"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Billing"
                ],
                "security": [],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PartialBillingAccount"
                            }
                        }
                    }
                }
            }
        },
        "/billing/accounts/{id}/payments/drivers": {
            "get": {
                "operationId": "List Payment Drivers",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/DBPaymentDriverConfiguration"
                                    },
                                    "type": "array"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Billing"
                ],
                "security": [],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "page",
                        "required": false,
                        "schema": {
                            "format": "double",
                            "type": "number"
                        }
                    },
                    {
                        "in": "query",
                        "name": "pageSize",
                        "required": false,
                        "schema": {
                            "format": "double",
                            "type": "number"
                        }
                    }
                ]
            }
        },
        "/billing/accounts/{id}/payments/methods": {
            "get": {
                "operationId": "List Payment Methods",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/PaymentMethod"
                                    },
                                    "type": "array"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Billing"
                ],
                "security": [],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "page",
                        "required": false,
                        "schema": {
                            "format": "double",
                            "type": "number"
                        }
                    },
                    {
                        "in": "query",
                        "name": "pageSize",
                        "required": false,
                        "schema": {
                            "format": "double",
                            "type": "number"
                        }
                    }
                ]
            }
        },
        "/billing/accounts/{id}/payments/methods/{methodid}": {
            "get": {
                "operationId": "Get Payment Method",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PaymentMethod"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Billing"
                ],
                "security": [],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "path",
                        "name": "methodid",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "delete": {
                "operationId": "Delete Payment Method",
                "responses": {
                    "204": {
                        "description": "No content"
                    }
                },
                "tags": [
                    "Billing"
                ],
                "security": [],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "path",
                        "name": "methodid",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/billing/{id}": {
            "get": {
                "operationId": "Get Usage Entry",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/APIUsageEntry"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Billing"
                ],
                "security": [],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/compositions": {
            "post": {
                "operationId": "Composition_create",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/APIComposition"
                                }
                            }
                        }
                    }
                },
                "description": "Create a new Composition.\nSupply the entities in the body request to create a Composition.",
                "tags": [
                    "compositions"
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/IPostComposition"
                }
            },
            "get": {
                "operationId": "Composition_list",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CursorPageAPIComposition"
                                }
                            }
                        }
                    }
                },
                "description": "Retrieves Composition.\n\nSupply query parameters to filter the list.",
                "tags": [
                    "compositions"
                ],
                "parameters": [
                    {
                        "description": "filter: accepts any string",
                        "in": "query",
                        "name": "filter",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "sort: accepts any string",
                        "in": "query",
                        "name": "sort",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "page: accepts any number",
                        "in": "query",
                        "name": "page",
                        "required": true,
                        "schema": {
                            "type": "number",
                            "format": "double"
                        }
                    },
                    {
                        "description": "pageSize: accepts any number",
                        "in": "query",
                        "name": "pageSize",
                        "required": true,
                        "schema": {
                            "type": "number",
                            "format": "double"
                        }
                    }
                ]
            }
        },
        "/compositions/{compositionId}": {
            "get": {
                "operationId": "Composition_get",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/APIComposition"
                                }
                            }
                        }
                    }
                },
                "description": "Get an composition updated object from the db.",
                "tags": [
                    "compositions"
                ],
                "parameters": [
                    {
                        "description": "The composition id",
                        "in": "path",
                        "name": "compositionId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "patch": {
                "operationId": "Composition_update",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/APIComposition"
                                }
                            }
                        }
                    }
                },
                "description": "Update existing composition.\nThe server will save the new composition props and refresh all the entities belonging to the composition",
                "tags": [
                    "compositions"
                ],
                "parameters": [
                    {
                        "description": "The composition id",
                        "in": "path",
                        "name": "compositionId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/IPostComposition"
                }
            }
        },
        "/compositions/{compositionId}/install": {
            "post": {
                "operationId": "Composition_install",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/APIComposition"
                                }
                            }
                        }
                    }
                },
                "description": "Install existing composition. setting all the entities",
                "tags": [
                    "compositions"
                ],
                "parameters": [
                    {
                        "description": "The composition id",
                        "in": "path",
                        "name": "compositionId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "resumeOption": {
                                        "enum": [
                                            "terminateExistingCycles",
                                            "resumeExistingCycles"
                                        ],
                                        "type": "string",
                                        "description": ""
                                    }
                                }
                            }
                        }
                    },
                    "description": "Pipeline resume option",
                    "required": true
                }
            }
        },
        "/compositions/{compositionId}/terminate": {
            "post": {
                "operationId": "Composition_terminate",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "text/html": {
                                "schema": {
                                    "enum": [
                                        "Created",
                                        "Initializing",
                                        "Installed",
                                        "Reconfiguring",
                                        "Activated",
                                        "Deactivated",
                                        "Uninstalled",
                                        "Terminating",
                                        "Terminated",
                                        "Updating",
                                        "Failure"
                                    ],
                                    "type": "string"
                                }
                            }
                        }
                    }
                },
                "description": "Delete the composition. delete all the entities",
                "tags": [
                    "compositions"
                ],
                "parameters": [
                    {
                        "description": "The composition id",
                        "in": "path",
                        "name": "compositionId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/compositions/{compositionId}/uninstall": {
            "post": {
                "operationId": "Composition_uninstall",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/APIComposition"
                                }
                            }
                        }
                    }
                },
                "description": "Uninstall existing composition. move all the entities to uninstall state",
                "tags": [
                    "compositions"
                ],
                "parameters": [
                    {
                        "description": "The composition id",
                        "in": "path",
                        "name": "compositionId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "boolean"
                            }
                        }
                    },
                    "description": "Keep Composition Triggers Active"
                }
            }
        },
        "/compute/orgs/{orgId}/cleanup": {
            "delete": {
                "operationId": "Compute_cleanupOrg",
                "responses": {
                    "204": {
                        "description": "No content"
                    }
                },
                "description": "Cleanup org driver",
                "tags": [
                    "compute"
                ],
                "parameters": [
                    {
                        "description": "The org id",
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/compute/registry/orgs/{orgId}/integrations/{integrationId}": {
            "post": {
                "operationId": "Compute_registryCred",
                "responses": {
                    "204": {
                        "description": "No content"
                    }
                },
                "description": "Apply docker private registry credentials on the user compute system.",
                "tags": [
                    "compute"
                ],
                "parameters": [
                    {
                        "description": "The org id",
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "The integration id, each registry credentials should be saved as an integration vault",
                        "in": "path",
                        "name": "integrationId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "delete": {
                "operationId": "Compute_deleteRegistryCred",
                "responses": {
                    "204": {
                        "description": "No content"
                    }
                },
                "description": "Delete docker private registry credentials from the user compute system.",
                "tags": [
                    "compute"
                ],
                "parameters": [
                    {
                        "description": "The org id",
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "The integration id, each registry credentials should be saved as an integration vault",
                        "in": "path",
                        "name": "integrationId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/datasets": {
            "get": {
                "operationId": "List Datasets",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/APIDataset"
                                    },
                                    "type": "array"
                                }
                            }
                        }
                    }
                },
                "description": "Get a names list of all existing datasets",
                "tags": [
                    "Datasets"
                ],
                "security": [],
                "parameters": [
                    {
                        "in": "query",
                        "name": "name",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "creator",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "recipe",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "projects",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    {
                        "in": "query",
                        "name": "system",
                        "required": false,
                        "schema": {
                            "default": false,
                            "type": "boolean"
                        }
                    }
                ],
                "x-codeSamples": [
                    {
                        "lang": "Python",
                        "source": "\ndatasets = project.datasets.list(name='name')\n\n# \n# List all datasets.\n# \n# **Prerequisites**: You must be an *owner* or *developer* to use this method.\n# \n# :param str name: list by name\n# :param str creator: list by creator\n# :return: List of datasets\n# :rtype: list\n# \n# "
                    }
                ]
            },
            "post": {
                "operationId": "Create Dataset",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/APIDataset"
                                },
                                "examples": {
                                    "Example 1": {
                                        "value": {
                                            "name": "New Set Name",
                                            "projects": [
                                                "project-id-1",
                                                "project-id-2"
                                            ],
                                            "driver": "mongo",
                                            "accessLevel": "project",
                                            "metadata": {
                                                "system": {},
                                                "dsType": 1
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Missing argument"
                    }
                },
                "description": "Create a new dataset",
                "tags": [
                    "Datasets"
                ],
                "security": [],
                "parameters": [],
                "requestBody": {
                    "description": "Dataset creation options\nMetadata for creation is optional",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateDatasetRequest",
                                "description": "Dataset creation options\nMetadata for creation is optional"
                            }
                        }
                    }
                },
                "x-codeSamples": [
                    {
                        "lang": "Python",
                        "source": "\ndataset = project.datasets.create(dataset_name='dataset_name', ontology_ids='ontology_ids')\n\n# \n# Create a new dataset\n# \n# **Prerequisites**: You must be in the role of an *owner* or *developer*.\n# \n# :param str dataset_name: The Name of the dataset\n# :param list labels: dictionary of {tag: color} or list of label entities\n# :param list attributes: dataset's ontology's attributes\n# :param list ontology_ids: optional - dataset ontology\n# :param dtlpy.entities.driver.Driver driver: optional - storage driver Driver object or driver name\n# :param str driver_id: optional - driver id\n# :param bool checkout: set the dataset as a default dataset object (cookies)\n# :param ExpirationOptions expiration_options: dl.ExpirationOptions object that contain definitions for dataset like MaxItemDays\n# :param str index_driver: dl.IndexDriver, dataset driver version\n# :param str recipe_id: optional - recipe id\n# :return: Dataset object\n# :rtype: dtlpy.entities.dataset.Dataset\n# \n# "
                    }
                ]
            }
        },
        "/datasets/count": {
            "post": {
                "operationId": "Get Datasets By Project Ids",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "total": {
                                            "type": "number",
                                            "format": "double"
                                        },
                                        "datasets": {
                                            "items": {},
                                            "type": "array"
                                        }
                                    },
                                    "required": [
                                        "total",
                                        "datasets"
                                    ],
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "description": "For org admin / owner:\nGet datasets count for projects\nGet datasets if a single project required",
                "tags": [
                    "Datasets"
                ],
                "security": [],
                "parameters": [],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "projectIds": {
                                        "items": {
                                            "type": "string"
                                        },
                                        "type": "array"
                                    },
                                    "system": {
                                        "type": "boolean",
                                        "default": false
                                    }
                                },
                                "required": [
                                    "projectIds"
                                ],
                                "type": "object"
                            }
                        }
                    }
                }
            }
        },
        "/datasets/countAnnotationsByProject/{projectId}": {
            "post": {
                "operationId": "Count Annotations By Project",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/APICommand"
                                }
                            }
                        }
                    }
                },
                "description": "Endpoint for counting amount of annotations by project ID\nSupports both mongo and S2 datasets\nMainly supposed to be used for billing purposes",
                "tags": [
                    "Datasets"
                ],
                "security": [],
                "parameters": [
                    {
                        "in": "path",
                        "name": "projectId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/datasets/deleteExpiredItems": {
            "post": {
                "operationId": "Delete Expired Items",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/APICommand"
                                }
                            }
                        }
                    }
                },
                "description": "Deletes all expired items\nEach dataset has the option to set it's SLA according to the attached example\n\nWhen setting expirationOptions.itemMaxAge to a number (100 for example),\nEach item in the dataset will be deleted once the corresponding number of days have passed since it's creation",
                "tags": [
                    "Datasets"
                ],
                "security": [],
                "parameters": []
            }
        },
        "/datasets/merge": {
            "post": {
                "operationId": "Merge Datasets",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/APICommand"
                                },
                                "examples": {
                                    "Example 1": {
                                        "value": {
                                            "name": "New Set Name",
                                            "datasetsIds": [],
                                            "mergeDatasetParams": {
                                                "withItemsAnnotations": true,
                                                "withMetadata": true
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Missing argument"
                    }
                },
                "tags": [
                    "Datasets"
                ],
                "security": [],
                "parameters": [],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/MergeDatasetsRequest"
                            }
                        }
                    }
                },
                "x-codeSamples": [
                    {
                        "lang": "Python",
                        "source": "\nsuccess = project.datasets.merge(dataset_ids=['dataset_id1','dataset_id2'],\nmerge_name='dataset_merge_name',\nwith_metadata=True,\nwith_items_annotations=False,\nwith_task_annotations_status=False)\n\n# \n# Merge a dataset. See our `SDK docs <https://developers.dataloop.ai/tutorials/data_management/data_versioning/chapter/>`_ for more information.\n# \n# **Prerequisites**: You must be an *owner* or *developer* to use this method.\n# \n# :param str merge_name: new dataset name\n# :param list dataset_ids: list id's of the datatsets you wish to merge\n# :param str project_ids: the project id that include the datasets\n# :param bool with_items_annotations: true to merge with items annotations\n# :param bool with_metadata: true to merge with metadata\n# :param bool with_task_annotations_status: true to merge with task annotations' status\n# :param bool wait: wait for the command to finish\n# :return: True if success\n# :rtype: bool\n# \n# "
                    }
                ]
            }
        },
        "/datasets/query": {
            "post": {
                "operationId": "Query Datasets",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CursorPage_APIAnnotation-or-APIDataset-or-APIDatasetFileItem-or-APIDatasetDirectoryItem_"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Datasets"
                ],
                "security": [],
                "parameters": [],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "allOf": [
                                    {
                                        "$ref": "#/components/schemas/DQLResourceQuery"
                                    },
                                    {
                                        "anyOf": [
                                            {
                                                "$ref": "#/components/schemas/FilterQuery"
                                            },
                                            {
                                                "$ref": "#/components/schemas/UpdateQuery"
                                            },
                                            {
                                                "$ref": "#/components/schemas/DeleteQuery"
                                            }
                                        ]
                                    }
                                ]
                            }
                        }
                    }
                }
            }
        },
        "/datasets/storage/project": {
            "post": {
                "operationId": "Get Project Size In Bytes",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "number",
                                    "format": "double"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Dataset Storage"
                ],
                "security": [],
                "parameters": [],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ProjectStorageRequest"
                            }
                        }
                    }
                }
            }
        },
        "/datasets/{datasetId}/items": {
            "get": {
                "operationId": "Get Dataset Items",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/APIDatasetItemCursor"
                                },
                                "examples": {
                                    "Example 1": {
                                        "value": {
                                            "totalItemsCount": 4,
                                            "totalPagesCount": 1,
                                            "hasNextPage": false,
                                            "items": [
                                                {
                                                    "id": "string",
                                                    "datasetId": "string",
                                                    "url": "string",
                                                    "dataset": "string",
                                                    "createdAt": "string",
                                                    "dir": "string",
                                                    "filename": "string",
                                                    "type": "dir",
                                                    "hidden": false,
                                                    "metadata": {},
                                                    "name": "string",
                                                    "creator": "string",
                                                    "items": "string",
                                                    "export": {
                                                        "zip": "string",
                                                        "json": "string"
                                                    }
                                                },
                                                {
                                                    "id": "string",
                                                    "datasetId": "string",
                                                    "url": "string",
                                                    "dataset": "string",
                                                    "createdAt": "2023-06-12T11:56:04.562Z",
                                                    "dir": "string",
                                                    "filename": "string",
                                                    "type": "file",
                                                    "hidden": false,
                                                    "metadata": {
                                                        "system": {
                                                            "channels": 3,
                                                            "encoding": "7bit",
                                                            "exif": {},
                                                            "height": 360,
                                                            "isBinary": true,
                                                            "mimetype": "image/png",
                                                            "originalname": "string",
                                                            "refs": [],
                                                            "size": 10539,
                                                            "taskStatusLog": [],
                                                            "thumbnailId": "string",
                                                            "width": 360
                                                        }
                                                    },
                                                    "name": "string",
                                                    "creator": "string",
                                                    "stream": "string",
                                                    "thumbnail": "string",
                                                    "annotations": "string",
                                                    "annotationsCount": 0,
                                                    "annotated": false
                                                }
                                            ]
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "description": "List items in a dataset",
                "tags": [
                    "Dataset Items"
                ],
                "security": [],
                "parameters": [
                    {
                        "description": "Dataset id",
                        "in": "path",
                        "name": "datasetId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "URL encoded JSON query - See JSON example below",
                        "in": "query",
                        "name": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Sorting criteria",
                        "in": "query",
                        "name": "sort",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Pages to skip",
                        "in": "query",
                        "name": "pageOffset",
                        "required": false,
                        "schema": {
                            "format": "double",
                            "type": "number"
                        }
                    },
                    {
                        "description": "Number of items to fetch in each page",
                        "in": "query",
                        "name": "pageSize",
                        "required": false,
                        "schema": {
                            "format": "double",
                            "type": "number"
                        }
                    }
                ]
            },
            "post": {
                "operationId": "Create Item",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "anyOf": [
                                        {
                                            "$ref": "#/components/schemas/APIDatasetFileItem"
                                        },
                                        {
                                            "$ref": "#/components/schemas/APIDatasetDirectoryItem"
                                        }
                                    ]
                                }
                            }
                        }
                    }
                },
                "description": "Create a new item in a dataset\nOrder is important - FILE MUST BE LAST FIELD OF THE FORM",
                "tags": [
                    "Dataset Items"
                ],
                "security": [],
                "parameters": [
                    {
                        "description": "Dataset id",
                        "in": "path",
                        "name": "datasetId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "mode",
                        "required": false,
                        "schema": {
                            "$ref": "#/components/schemas/AddItemMode"
                        }
                    }
                ]
            },
            "delete": {
                "operationId": "Remove Items By Query",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/APICommand"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Dataset Items"
                ],
                "security": [],
                "parameters": [
                    {
                        "in": "path",
                        "name": "datasetId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "filter": {
                                        "$ref": "#/components/schemas/Dictionary"
                                    },
                                    "join": {
                                        "$ref": "#/components/schemas/Dictionary"
                                    }
                                },
                                "required": [
                                    "filter",
                                    "join"
                                ],
                                "type": "object"
                            }
                        }
                    }
                }
            }
        },
        "/datasets/{datasetId}/items/{id}": {
            "put": {
                "operationId": "Move Items",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "description": "Move files to a specified directory",
                "tags": [
                    "Dataset Items"
                ],
                "security": [],
                "parameters": [
                    {
                        "description": "Dataset Id",
                        "in": "path",
                        "name": "datasetId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "description": "List of files to move to the specified directory",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "items": {
                                    "type": "string"
                                },
                                "type": "array",
                                "description": "List of files to move to the specified directory"
                            }
                        }
                    }
                }
            },
            "get": {
                "operationId": "Get Dataset Item",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "anyOf": [
                                        {
                                            "$ref": "#/components/schemas/APIDatasetFileItem"
                                        },
                                        {
                                            "$ref": "#/components/schemas/APIDatasetDirectoryItem"
                                        }
                                    ]
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Dataset Items"
                ],
                "security": [],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "path",
                        "name": "datasetId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "delete": {
                "operationId": "Remove Dataset Item",
                "responses": {
                    "204": {
                        "description": "No content"
                    }
                },
                "tags": [
                    "Dataset Items"
                ],
                "security": [],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "path",
                        "name": "datasetId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "patch": {
                "operationId": "Edit Dataset Item",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "anyOf": [
                                        {
                                            "$ref": "#/components/schemas/APIDatasetFileItem"
                                        },
                                        {
                                            "$ref": "#/components/schemas/APIDatasetDirectoryItem"
                                        }
                                    ]
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Dataset Items"
                ],
                "security": [],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "system",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "in": "path",
                        "name": "datasetId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PartialAPIDatasetItem"
                            }
                        }
                    }
                }
            }
        },
        "/datasets/{datasetId}/items/{id}/clone": {
            "post": {
                "operationId": "Clone Dataset Item",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/APICommand"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Dataset Items"
                ],
                "security": [],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "path",
                        "name": "datasetId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ItemCloneRequest"
                            }
                        }
                    }
                }
            }
        },
        "/datasets/{datasetId}/items/{id}/items": {
            "get": {
                "operationId": "Get Directory Child Dataset Items",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/APIDatasetItemCursor"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Dataset Items"
                ],
                "security": [],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "pageOffset",
                        "required": false,
                        "schema": {
                            "format": "double",
                            "type": "number"
                        }
                    },
                    {
                        "in": "query",
                        "name": "pageSize",
                        "required": false,
                        "schema": {
                            "format": "double",
                            "type": "number"
                        }
                    },
                    {
                        "in": "path",
                        "name": "datasetId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/datasets/{datasetId}/items/{id}/revisions": {
            "post": {
                "operationId": "Create Dataset Item Revision",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/APIDatasetFileItem"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Dataset Items"
                ],
                "security": [],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "path",
                        "name": "datasetId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/datasets/{datasetId}/items/{id}/snapshots": {
            "post": {
                "operationId": "Create Dataset Item Snapshot",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/APIDatasetFileItem"
                                }
                            }
                        }
                    }
                },
                "description": "Create a new snapshot on an existing item\nOrder is important - FILE MUST BE LAST FIELD OF THE FORM",
                "tags": [
                    "Dataset Items"
                ],
                "security": [],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "path",
                        "name": "datasetId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/datasets/{datasetId}/items/{id}/stream": {
            "get": {
                "operationId": "Stream Dataset Item",
                "responses": {
                    "204": {
                        "description": "No content"
                    }
                },
                "tags": [
                    "Dataset Items"
                ],
                "security": [],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "path",
                        "name": "datasetId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/datasets/{datasetId}/items/{id}/thumbnail": {
            "get": {
                "operationId": "Stream Dataset Item Thumbnail",
                "responses": {
                    "204": {
                        "description": "No content"
                    }
                },
                "tags": [
                    "Dataset Items"
                ],
                "security": [],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "width",
                        "required": false,
                        "schema": {
                            "format": "double",
                            "type": "number"
                        }
                    },
                    {
                        "in": "query",
                        "name": "height",
                        "required": false,
                        "schema": {
                            "format": "double",
                            "type": "number"
                        }
                    },
                    {
                        "in": "query",
                        "name": "annotations",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "in": "path",
                        "name": "datasetId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/datasets/{datasetId}/items/{itemId}/annotations": {
            "get": {
                "operationId": "List Dataset Item Annotations",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/APIAnnotation"
                                    },
                                    "type": "array"
                                }
                            }
                        }
                    }
                },
                "description": "List all annotations of an item",
                "tags": [
                    "Dataset Item Annotations"
                ],
                "security": [],
                "parameters": [
                    {
                        "description": "Dataset id",
                        "in": "path",
                        "name": "datasetId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Item id",
                        "in": "path",
                        "name": "itemId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "post": {
                "operationId": "Create Annotations",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "anyOf": [
                                        {
                                            "$ref": "#/components/schemas/APIAnnotation"
                                        },
                                        {
                                            "items": {
                                                "$ref": "#/components/schemas/APIAnnotation"
                                            },
                                            "type": "array"
                                        }
                                    ]
                                }
                            }
                        }
                    }
                },
                "description": "Create an annotation or annotations for an item",
                "tags": [
                    "Dataset Item Annotations"
                ],
                "security": [],
                "parameters": [
                    {
                        "description": "Dataset id",
                        "in": "path",
                        "name": "datasetId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Item id",
                        "in": "path",
                        "name": "itemId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Annotation/s to be created\nIn the case of annotation parenting, annotation will need to include a parent - annotation request object and children - array of annotation request objects\nIn that case only the parent and children will be used\nThere is handling for mixed requests - both simple annotation and parent/children will be accepted and handled together",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "anyOf": [
                                    {
                                        "$ref": "#/components/schemas/APIAnnotationRequest"
                                    },
                                    {
                                        "items": {
                                            "$ref": "#/components/schemas/APIAnnotationRequest"
                                        },
                                        "type": "array"
                                    }
                                ],
                                "description": "Annotation/s to be created\nIn the case of annotation parenting, annotation will need to include a parent - annotation request object and children - array of annotation request objects\nIn that case only the parent and children will be used\nThere is handling for mixed requests - both simple annotation and parent/children will be accepted and handled together"
                            }
                        }
                    }
                }
            }
        },
        "/datasets/{datasetId}/items/{itemId}/annotations-log": {
            "get": {
                "operationId": "List Dataset Item Annotation Logs",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Dictionary_APIAnnotationEvent-Array_"
                                }
                            }
                        }
                    }
                },
                "description": "List all annotations of an item",
                "tags": [
                    "Annotation Logs"
                ],
                "security": [],
                "parameters": [
                    {
                        "description": "Item id",
                        "in": "path",
                        "name": "itemId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Dataset id",
                        "in": "path",
                        "name": "datasetId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/datasets/{datasetId}/items/{itemId}/annotations/{annotationId}": {
            "get": {
                "operationId": "Get Dataset Item Annotation",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/APIAnnotation"
                                }
                            }
                        }
                    }
                },
                "description": "Get annotation by id",
                "tags": [
                    "Dataset Item Annotations"
                ],
                "security": [],
                "parameters": [
                    {
                        "description": "annotation id",
                        "in": "path",
                        "name": "annotationId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "path",
                        "name": "datasetId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "path",
                        "name": "itemId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "delete": {
                "operationId": "Delete Dataset Item Annotation",
                "responses": {
                    "204": {
                        "description": "No content"
                    }
                },
                "description": "Delete an Annotation from an item",
                "tags": [
                    "Dataset Item Annotations"
                ],
                "security": [],
                "parameters": [
                    {
                        "description": "Annotation id",
                        "in": "path",
                        "name": "annotationId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "path",
                        "name": "datasetId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "path",
                        "name": "itemId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "put": {
                "operationId": "Update Dataset Item Annotation",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/APIAnnotation"
                                }
                            }
                        }
                    }
                },
                "description": "Update an item's annotation",
                "tags": [
                    "Dataset Item Annotations"
                ],
                "security": [],
                "parameters": [
                    {
                        "description": "Annotation id",
                        "in": "path",
                        "name": "annotationId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "when specified - editing system space metadata is enabled",
                        "in": "query",
                        "name": "system",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "in": "query",
                        "name": "replace",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "in": "path",
                        "name": "datasetId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "path",
                        "name": "itemId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Updated annotation object",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpdateAnnotationRequest",
                                "description": "Updated annotation object"
                            }
                        }
                    }
                }
            }
        },
        "/datasets/{datasetId}/items/{itemId}/annotations/{annotationId}/issue": {
            "put": {
                "operationId": "Dataset Item Annotation Issues",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/APIAnnotation"
                                }
                            }
                        }
                    }
                },
                "description": "Update an item's annotation status to issue",
                "tags": [
                    "Dataset Item Annotations"
                ],
                "security": [],
                "parameters": [
                    {
                        "description": "Annotation id",
                        "in": "path",
                        "name": "annotationId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "path",
                        "name": "datasetId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "path",
                        "name": "itemId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/datasets/{id}": {
            "get": {
                "operationId": "Get Dataset by ID",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/APIDataset"
                                }
                            }
                        }
                    }
                },
                "description": "Get a specific Dataset",
                "tags": [
                    "Datasets"
                ],
                "security": [],
                "parameters": [
                    {
                        "description": "Dataset id",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "x-codeSamples": [
                    {
                        "lang": "Python",
                        "source": "\ndataset = project.datasets.get(dataset_id='dataset_id')\n\n# \n# Get dataset by name or id.\n# \n# **Prerequisites**: You must be an *owner* or *developer* to use this method.\n# \n# You must provide at least ONE of the following params: dataset_id, dataset_name.\n# \n# :param str dataset_name: optional - search by name\n# :param str dataset_id: optional - search by id\n# :param bool checkout: set the dataset as a default dataset object (cookies)\n# :param bool fetch: optional - fetch entity from platform (True), default taken from cookie\n# :return: Dataset object\n# :rtype: dtlpy.entities.dataset.Dataset\n# \n# "
                    }
                ]
            },
            "delete": {
                "operationId": "Delete Dataset",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "number",
                                    "enum": [
                                        null
                                    ],
                                    "nullable": true
                                }
                            }
                        }
                    }
                },
                "description": "Delete a dataset",
                "tags": [
                    "Datasets"
                ],
                "security": [],
                "parameters": [
                    {
                        "description": "Dataset id",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "force",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    }
                ],
                "x-codeSamples": [
                    {
                        "lang": "Python",
                        "source": "\nis_deleted = project.datasets.delete(dataset_id='dataset_id', sure=True, really=True)\n\n:param str dataset_name: optional - search by name\n:param str dataset_id: optional - search by id\n:param bool sure: Are you sure you want to delete?\n:param bool really: Really really sure?\n:return: True is success\n:rtype: bool\n\n# \n# Delete a dataset forever!\n# \n# **Prerequisites**: You must be an *owner* or *developer* to use this method.\n# \n# "
                    }
                ]
            },
            "patch": {
                "operationId": "Patch Dataset",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/APIDataset"
                                }
                            }
                        }
                    }
                },
                "description": "Update dataset properties",
                "tags": [
                    "Datasets"
                ],
                "security": [],
                "parameters": [
                    {
                        "description": "Dataset id",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "when specified - editing system space metadata is enabled",
                        "in": "query",
                        "name": "system",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Properties to update on the dataset",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Partial_APIDatasetPayload_",
                                "description": "Properties to update on the dataset"
                            }
                        }
                    }
                },
                "x-codeSamples": [
                    {
                        "lang": "Python",
                        "source": "\ndataset = project.datasets.update(dataset='dataset_entity')\n\n# \n# Update dataset field.\n# \n# **Prerequisites**: You must be an *owner* or *developer* to use this method.\n# \n# :param dtlpy.entities.dataset.Dataset dataset: dataset object\n# :param bool system_metadata: True, if you want to change metadata system\n# :param dict patch: Specific patch request\n# :return: Dataset object\n# :rtype: dtlpy.entities.dataset.Dataset\n# \n# "
                    }
                ]
            }
        },
        "/datasets/{id}/annotations": {
            "post": {
                "operationId": "Annotate Items By Dql",
                "responses": {
                    "204": {
                        "description": "No content"
                    }
                },
                "tags": [
                    "Datasets"
                ],
                "security": [],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ClassifyFilteredItems"
                            }
                        }
                    }
                }
            }
        },
        "/datasets/{id}/annotations/json": {
            "get": {
                "operationId": "Get Dataset Annotations JSON",
                "responses": {
                    "204": {
                        "description": "No content"
                    }
                },
                "description": "Download a JSON file representing all annotations in the specified dataset",
                "tags": [
                    "Datasets"
                ],
                "security": [],
                "parameters": [
                    {
                        "description": "Dataset id",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "directory",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/datasets/{id}/annotations/labels": {
            "get": {
                "operationId": "Get Dataset Label Aggregation",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "properties": {},
                                        "additionalProperties": {
                                            "anyOf": [
                                                {
                                                    "type": "string"
                                                },
                                                {
                                                    "type": "number",
                                                    "format": "double"
                                                }
                                            ]
                                        },
                                        "type": "object"
                                    },
                                    "type": "array"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Datasets"
                ],
                "security": [],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "taskId",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "assignmentId",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "post": {
                "operationId": "Get Filtered Dataset Label Aggregation",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "properties": {},
                                        "additionalProperties": {
                                            "anyOf": [
                                                {
                                                    "type": "string"
                                                },
                                                {
                                                    "type": "number",
                                                    "format": "double"
                                                }
                                            ]
                                        },
                                        "type": "object"
                                    },
                                    "type": "array"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Datasets"
                ],
                "security": [],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "assignmentId": {
                                        "type": "string"
                                    },
                                    "taskId": {
                                        "type": "string"
                                    },
                                    "creators": {
                                        "items": {
                                            "type": "string"
                                        },
                                        "type": "array"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                }
            }
        },
        "/datasets/{id}/annotations/types": {
            "post": {
                "operationId": "Get Filtered Dataset Type Aggregation",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "properties": {},
                                        "additionalProperties": {
                                            "anyOf": [
                                                {
                                                    "type": "string"
                                                },
                                                {
                                                    "type": "number",
                                                    "format": "double"
                                                }
                                            ]
                                        },
                                        "type": "object"
                                    },
                                    "type": "array"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Datasets"
                ],
                "security": [],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "assignmentId": {
                                        "type": "string"
                                    },
                                    "taskId": {
                                        "type": "string"
                                    },
                                    "creators": {
                                        "items": {
                                            "type": "string"
                                        },
                                        "type": "array"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                }
            }
        },
        "/datasets/{id}/annotations/zip": {
            "get": {
                "operationId": "Get Dataset Annotations Zip",
                "responses": {
                    "204": {
                        "description": "No content"
                    }
                },
                "description": "Download a zip archive containing all annotations in the specified dataset\nDirectory structure is preserved in the zip archive\nEach item will be represented by a json file containing it's annotations",
                "tags": [
                    "Datasets"
                ],
                "security": [],
                "parameters": [
                    {
                        "description": "Dataset id",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "directory",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/datasets/{id}/annotations/zip/chunks": {
            "get": {
                "operationId": "Get Dataset Annotations Zip Chunks",
                "responses": {
                    "204": {
                        "description": "No content"
                    }
                },
                "tags": [
                    "Datasets"
                ],
                "security": [],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/datasets/{id}/clone": {
            "post": {
                "operationId": "Clone Dataset",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/APICommand"
                                },
                                "examples": {
                                    "Example 1": {
                                        "value": {
                                            "name": "",
                                            "filter": {
                                                "filter": {}
                                            },
                                            "cloneDatasetParams": {
                                                "withItemsAnnotations": true,
                                                "withMetadata": true
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Missing argument"
                    }
                },
                "tags": [
                    "Datasets"
                ],
                "security": [],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CloneDatasetRequest"
                            }
                        }
                    }
                },
                "x-codeSamples": [
                    {
                        "lang": "Python",
                        "source": "\ndataset = project.datasets.clone(dataset_id='dataset_id',\nclone_name='dataset_clone_name',\nwith_metadata=True,\nwith_items_annotations=False,\nwith_task_annotations_status=False)\n\n# \n# Clone a dataset. Read more about cloning datatsets and items in our `documentation <https://docs.dataloop.ai/docs/clone-merge-dataset#cloned-dataset>`_ and `SDK documentation <https://developers.dataloop.ai/tutorials/data_management/data_versioning/chapter/>`_.\n# \n# **Prerequisites**: You must be in the role of an *owner* or *developer*.\n# \n# :param str dataset_id: id of the dataset you wish to clone\n# :param str clone_name: new dataset name\n# :param dtlpy.entities.filters.Filters filters: Filters entity or a query dict\n# :param bool with_items_annotations: true to clone with items annotations\n# :param bool with_metadata: true to clone with metadata\n# :param bool with_task_annotations_status: true to clone with task annotations' status\n# :param str dst_dataset_id: destination dataset id\n# :return: dataset object\n# :rtype: dtlpy.entities.dataset.Dataset\n# \n# "
                    }
                ]
            }
        },
        "/datasets/{id}/counters": {
            "delete": {
                "operationId": "Reset Dataset Counters",
                "responses": {
                    "204": {
                        "description": "No content"
                    }
                },
                "description": "Reset dataset counters (items count, anntotated count, etc...)",
                "tags": [
                    "Datasets"
                ],
                "security": [],
                "parameters": [
                    {
                        "description": "Dataset to be reset",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/datasets/{id}/directoryTree": {
            "get": {
                "operationId": "Get Dataset Directory Tree",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DatasetDirectoryTree"
                                }
                            }
                        }
                    }
                },
                "description": "Get a directory tree of the dataset",
                "tags": [
                    "Datasets"
                ],
                "security": [],
                "parameters": [
                    {
                        "description": "Dataset id",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "x-codeSamples": [
                    {
                        "lang": "Python",
                        "source": "directory_tree = dataset.directory_tree\ndirectory_tree = project.datasets.directory_tree(dataset='dataset_entity')\n\n# \n# Get dataset's directory tree.\n# \n# **Prerequisites**: You must be an *owner* or *developer* to use this method.\n# \n# You must provide at least ONE of the following params: dataset, dataset_name, dataset_id.\n# \n# :param dtlpy.entities.dataset.Dataset dataset: dataset object\n# :param str dataset_name: The Name of the dataset\n# :param str dataset_id: The Id of the dataset\n# :return: DirectoryTree\n# \n# "
                    }
                ]
            }
        },
        "/datasets/{id}/export": {
            "post": {
                "operationId": "Export Dataset As Zip",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/APICommand"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Datasets"
                ],
                "security": [],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": false,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ExportDatasetOptions"
                            }
                        }
                    }
                }
            }
        },
        "/datasets/{id}/imports": {
            "post": {
                "operationId": "Import Items To Dataset",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "anyOf": [
                                            {
                                                "$ref": "#/components/schemas/APIDatasetFileItem"
                                            },
                                            {
                                                "$ref": "#/components/schemas/APIDatasetDirectoryItem"
                                            }
                                        ]
                                    },
                                    "type": "array"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Datasets"
                ],
                "security": [],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "items": {
                                    "$ref": "#/components/schemas/ImportItemRequest"
                                },
                                "type": "array"
                            }
                        }
                    }
                }
            },
            "delete": {
                "operationId": "Detach Items From Dataset",
                "responses": {
                    "204": {
                        "description": "No content"
                    }
                },
                "tags": [
                    "Datasets"
                ],
                "security": [],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            }
                        }
                    }
                }
            }
        },
        "/datasets/{id}/query": {
            "post": {
                "operationId": "Query Dataset",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CursorPage_APIAnnotation-or-APIDataset-or-APIDatasetFileItem-or-APIDatasetDirectoryItem_"
                                }
                            }
                        }
                    }
                },
                "description": "Detailed information about DQL can be found at https://docs.dataloop.ai/docs/dql",
                "tags": [
                    "Datasets"
                ],
                "security": [],
                "parameters": [
                    {
                        "description": "Dataset to be queried",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Query JSON",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/DQLResourceQuery",
                                "description": "Query JSON"
                            }
                        }
                    }
                },
                "x-codeSamples": [
                    {
                        "lang": "Python",
                        "source": "\ndataset.items.list(page_offset=0, page_size=100)\n\n# \n# List items in a dataset.\n# \n# **Prerequisites**: You must be in the role of an *owner* or *developer*.\n# \n# :param dtlpy.entities.filters.Filters filters: Filters entity or a dictionary containing filters parameters\n# :param int page_offset: start page\n# :param int page_size: page size\n# :return: Pages object\n# :rtype: dtlpy.entities.paged_entities.PagedEntities\n# \n# "
                    }
                ]
            }
        },
        "/datasets/{id}/sync": {
            "post": {
                "operationId": "Sync Dataset",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/APICommand"
                                }
                            }
                        }
                    }
                },
                "description": "Synchronize missing files from storage",
                "tags": [
                    "Datasets"
                ],
                "security": [],
                "parameters": [
                    {
                        "description": "Dataset id",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "x-codeSamples": [
                    {
                        "lang": "Python",
                        "source": "\nsuccess = project.datasets.sync(dataset_id='dataset_id')\n\n# \n# Sync dataset with external storage.\n# \n# **Prerequisites**: You must be in the role of an *owner* or *developer*.\n# \n# :param str dataset_id: The Id of the dataset to sync\n# :param bool wait: wait for the command to finish\n# :return: True if success\n# :rtype: bool\n# \n# "
                    }
                ]
            }
        },
        "/drivers": {
            "get": {
                "operationId": "List Storage Drivers",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/APIDriverConfiguration"
                                    },
                                    "type": "array"
                                }
                            }
                        }
                    }
                },
                "description": "List storage drivers",
                "tags": [
                    "Storage Drivers"
                ],
                "security": [],
                "parameters": [
                    {
                        "description": "- when specified - filter drivers by project",
                        "in": "query",
                        "name": "projectId",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "x-codeSamples": [
                    {
                        "lang": "Python",
                        "source": "\nproject.drivers.list()\n\n\n# \n# Get the project's drivers list.\n# \n# **Prerequisites**: You must be in the role of an *owner* or *developer*.\n# \n# :return: List of Drivers objects\n# :rtype: list\n# \n# "
                    }
                ]
            },
            "post": {
                "operationId": "Create Storage Driver",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/APIDriverConfiguration"
                                }
                            }
                        }
                    }
                },
                "description": "Create a new storage driver",
                "tags": [
                    "Storage Drivers"
                ],
                "security": [],
                "parameters": [],
                "requestBody": {
                    "description": ": driver payload",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/DriverPayload",
                                "description": ": driver payload"
                            }
                        }
                    }
                },
                "x-codeSamples": [
                    {
                        "lang": "Python",
                        "source": "\nproject.drivers.create(name='driver_name',\ndriver_type=dl.ExternalStorage.S3,\nintegration_id='integration_id',\nbucket_name='bucket_name',\nproject_id='project_id',\nregion='ey-west-1')\n\n# \n# Create a storage driver.\n# \n# **Prerequisites**: You must be in the role of an *owner* or *developer*.\n# \n# :param str name: the driver name\n# :param ExternalStorage driver_type: dl.ExternalStorage (Enum). For all options run: list(dl.ExsternalStorage)\n# :param str integration_id: the integration id\n# :param str bucket_name: the external bucket name\n# :param IntegrationType integration_type: dl.IntegrationType (Enum). For all options run: list(dl.IntegrationType)\n# :param str project_id: project id\n# :param bool allow_external_delete: true to allow deleting files from external storage when files are deleted in your Dataloop storage\n# :param str region: relevant only for s3 - the bucket region\n# :param str storage_class: relevant only for s3\n# :param str path: Optional. By default path is the root folder. Path is case sensitive integration\n# :return: driver object\n# :rtype: dtlpy.entities.driver.Driver\n# \n# "
                    }
                ]
            }
        },
        "/drivers/byIntegration/{integrationId}": {
            "get": {
                "operationId": "Get Storage Drivers By Integration Id",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "number",
                                    "format": "double"
                                }
                            }
                        }
                    }
                },
                "description": "Get Amount of drivers by integrationId",
                "tags": [
                    "Storage Drivers"
                ],
                "security": [],
                "parameters": [
                    {
                        "in": "path",
                        "name": "integrationId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/drivers/test": {
            "post": {
                "operationId": "Test Storage Driver",
                "responses": {
                    "204": {
                        "description": "No content"
                    }
                },
                "description": "Test external storage access",
                "tags": [
                    "Storage Drivers"
                ],
                "security": [],
                "parameters": [],
                "requestBody": {
                    "description": ": driver payload",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "description": ": driver payload"
                            }
                        }
                    }
                }
            }
        },
        "/drivers/validateDrivers": {
            "post": {
                "operationId": "Check Storage Drivers Integration By Integration Id",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/APICommand"
                                }
                            }
                        }
                    }
                },
                "description": "Check storage driver integration by integration Id",
                "tags": [
                    "Storage Drivers"
                ],
                "security": [],
                "parameters": [],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "integrationId": {
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "integrationId"
                                ],
                                "type": "object"
                            }
                        }
                    }
                }
            }
        },
        "/drivers/{id}": {
            "get": {
                "operationId": "Get Storage Driver",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/APIDriverConfiguration"
                                }
                            }
                        }
                    }
                },
                "description": "Get storage driver configuration",
                "tags": [
                    "Storage Drivers"
                ],
                "security": [],
                "parameters": [
                    {
                        "description": "driver id",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "x-codeSamples": [
                    {
                        "lang": "Python",
                        "source": "\nproject.drivers.get(driver_id='driver_id')\n\n# \n# Get a Driver object to use in your code.\n# \n# **Prerequisites**: You must be in the role of an *owner* or *developer*.\n# \n# You must provide at least ONE of the following params: driver_name, driver_id.\n# \n# :param str driver_name: optional - search by name\n# :param str driver_id: optional - search by id\n# :return: Driver object\n# :rtype: dtlpy.entities.driver.Driver\n# \n# "
                    }
                ]
            },
            "patch": {
                "operationId": "Update Storage Driver",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/APIDriverConfiguration"
                                }
                            }
                        }
                    }
                },
                "description": "Update storage driver configuration",
                "tags": [
                    "Storage Drivers"
                ],
                "security": [],
                "parameters": [
                    {
                        "description": ": driverId",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "description": ": fields to update",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PartialDriverPayload",
                                "description": ": fields to update"
                            }
                        }
                    }
                }
            },
            "delete": {
                "operationId": "Delete Storage Driver",
                "responses": {
                    "204": {
                        "description": "No content"
                    }
                },
                "description": "Delete storage driver\nNOTICE: datasets using the deleted driver will not be able to access storage after deletion",
                "tags": [
                    "Storage Drivers"
                ],
                "security": [],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "x-codeSamples": [
                    {
                        "lang": "Python",
                        "source": "\nproject.drivers.delete(dataset_id='dataset_id', sure=True, really=True)\n\n:param str driver_name: optional - search by name\n:param str driver_id: optional - search by id\n:param bool sure: Are you sure you want to delete?\n:param bool really: Really really sure?\n:return: True if success\n:rtype: bool\n\n# \n# Delete a driver forever!\n# \n# **Prerequisites**: You must be an *owner* or *developer* to use this method.\n# \n# "
                    }
                ]
            }
        },
        "/drivers/{id}/test": {
            "get": {
                "operationId": "Test Storage Driver Permissions",
                "responses": {
                    "204": {
                        "description": "No content"
                    }
                },
                "description": "Test external storage access",
                "tags": [
                    "Storage Drivers"
                ],
                "security": [],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/executions": {
            "get": {
                "operationId": "Executions_listExecutions",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ExecutionsPage"
                                }
                            }
                        }
                    }
                },
                "description": "List service executions.",
                "tags": [
                    "Executions"
                ],
                "parameters": [
                    {
                        "description": "The project id",
                        "in": "query",
                        "name": "projects",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "The service name which the execution was running of",
                        "in": "query",
                        "name": "service",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "The trigger name that has create the execution",
                        "in": "query",
                        "name": "trigger",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "The function name",
                        "in": "query",
                        "name": "functionName",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "",
                        "in": "query",
                        "name": "orderByType",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "createdAt",
                                "updatedAt"
                            ]
                        }
                    },
                    {
                        "description": "",
                        "in": "query",
                        "name": "orderByDirection",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "asc",
                                "desc"
                            ]
                        }
                    },
                    {
                        "description": "",
                        "in": "query",
                        "name": "createdAfter",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "",
                        "in": "query",
                        "name": "createdBefore",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "The execution status",
                        "in": "query",
                        "name": "status",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "created",
                                "in-progress",
                                "failed",
                                "success",
                                "canceled",
                                "aborted",
                                "rerun",
                                "system-failure"
                            ]
                        }
                    },
                    {
                        "description": "The resourceType should be executions",
                        "in": "query",
                        "name": "resourceType",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "Dataset",
                                "Item",
                                "Annotation",
                                "Execution",
                                "Task",
                                "Assignment",
                                "Service",
                                "Package",
                                "Project",
                                "Json",
                                "String",
                                "Number",
                                "Integer",
                                "Float",
                                "Boolean",
                                "Model",
                                "Recipe",
                                "Dataset[]",
                                "Item[]",
                                "Annotation[]",
                                "Execution[]",
                                "Task[]",
                                "Assignment[]",
                                "Service[]",
                                "Package[]",
                                "Project[]",
                                "Json[]",
                                "String[]",
                                "Number[]",
                                "Integer[]",
                                "Float[]",
                                "Boolean[]",
                                "Model[]",
                                "Recipe[]"
                            ]
                        }
                    },
                    {
                        "description": "",
                        "in": "query",
                        "name": "resourceId",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "",
                        "in": "query",
                        "name": "pageOffset",
                        "required": false,
                        "schema": {
                            "type": "number",
                            "format": "double"
                        }
                    },
                    {
                        "description": "",
                        "in": "query",
                        "name": "pageSize",
                        "required": false,
                        "schema": {
                            "type": "number",
                            "format": "double"
                        }
                    }
                ]
            }
        },
        "/executions/counters": {
            "get": {
                "operationId": "Executions_getExecutionCounters",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {}
                                }
                            }
                        }
                    }
                },
                "description": "",
                "tags": [
                    "Executions"
                ],
                "parameters": [
                    {
                        "description": "",
                        "in": "query",
                        "name": "filter",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/executions/rerun": {
            "post": {
                "operationId": "Executions_rerunExecutionQuery",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/APICommand"
                                }
                            }
                        }
                    }
                },
                "description": "Rerun batch execution.",
                "tags": [
                    "Executions"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object"
                            }
                        }
                    },
                    "description": "Rerun options.",
                    "required": true
                }
            }
        },
        "/executions/{executionId}/rerun": {
            "post": {
                "operationId": "Executions_rerunExecution",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "text/html": {
                                "schema": {
                                    "enum": [
                                        "APIExecution",
                                        "PiperSettingsCommands"
                                    ],
                                    "type": "string"
                                }
                            }
                        }
                    }
                },
                "description": "Rerun execution.",
                "tags": [
                    "Executions"
                ],
                "parameters": [
                    {
                        "description": "Execution id",
                        "in": "path",
                        "name": "executionId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Wait for the execution to finish",
                        "in": "query",
                        "name": "sync",
                        "required": true,
                        "schema": {
                            "type": "boolean"
                        }
                    }
                ],
                "x-codeSamples": [
                    {
                        "lang": "Python",
                        "source": "\nservice.executions.rerun(execution='execution_entity')\n\n# \n# Rerun execution\n# \n# **Prerequisites**: You must be in the role of an *owner* or *developer*. You must have a service.\n# \n# :param dtlpy.entities.execution.Execution execution:\n# :param bool sync: wait for the execution to finish\n# :return: Execution object\n# :rtype: dtlpy.entities.execution.Execution\n# \n# "
                    }
                ]
            }
        },
        "/executions/{id}": {
            "get": {
                "operationId": "Executions_getExecution",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/APIExecution"
                                }
                            }
                        }
                    }
                },
                "description": "Get an execution by id.",
                "tags": [
                    "Executions"
                ],
                "parameters": [
                    {
                        "description": "Execution id",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "if true, wait for the execution to finish",
                        "in": "query",
                        "name": "sync",
                        "required": true,
                        "schema": {
                            "type": "boolean"
                        }
                    }
                ],
                "x-codeSamples": [
                    {
                        "lang": "Python",
                        "source": "\nservice.executions.get(execution_id='execution_id')\n\n# \n# Get Service execution object\n# \n# **Prerequisites**: You must be in the role of an *owner* or *developer*. You must have a service.\n# \n# :param str execution_id: execution id\n# :param bool sync: if true, wait for the execution to finish\n# :return: Service execution object\n# :rtype: dtlpy.entities.execution.Execution\n# \n# "
                    }
                ]
            },
            "patch": {
                "operationId": "Executions_updateExecution",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/APIExecution"
                                }
                            }
                        }
                    }
                },
                "description": "Update execution changes to platform.",
                "tags": [
                    "Executions"
                ],
                "parameters": [
                    {
                        "description": "Execution id",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/APIExecutionPatch"
                            }
                        }
                    },
                    "required": true
                },
                "x-codeSamples": [
                    {
                        "lang": "Python",
                        "source": "\nservice.executions.update(execution='execution_entity')\n\n# \n# Update execution changes to platform\n# \n# **Prerequisites**: You must be in the role of an *owner* or *developer*. You must have a service.\n# \n# :param dtlpy.entities.execution.Execution execution: execution entity\n# :return: Service execution object\n# :rtype: dtlpy.entities.execution.Execution\n# \n# "
                    }
                ]
            }
        },
        "/executions/{id}/attempts": {
            "post": {
                "operationId": "Executions_incrementExecutionAttempts",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "text/html": {
                                "schema": {
                                    "type": "number",
                                    "format": "double"
                                }
                            }
                        }
                    }
                },
                "description": "Increment the number of attempts that an execution is allowed to attempt to run a service that is not responding.",
                "tags": [
                    "Executions"
                ],
                "parameters": [
                    {
                        "description": "Execution id",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/executions/{id}/progress": {
            "post": {
                "operationId": "Executions_pushProgress",
                "responses": {
                    "204": {
                        "description": "No content"
                    }
                },
                "description": "Update Execution Progress.",
                "tags": [
                    "Executions"
                ],
                "parameters": [
                    {
                        "description": "Execution id",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "timestamp": {
                                        "type": "string",
                                        "format": "date-time",
                                        "description": ""
                                    },
                                    "status": {
                                        "enum": [
                                            "created",
                                            "in-progress",
                                            "failed",
                                            "success",
                                            "canceled",
                                            "aborted",
                                            "rerun",
                                            "system-failure"
                                        ],
                                        "type": "string",
                                        "description": "Execution status"
                                    },
                                    "message": {
                                        "type": "string",
                                        "description": "message"
                                    },
                                    "percentComplete": {
                                        "type": "number",
                                        "format": "double",
                                        "description": "percent work done"
                                    },
                                    "error": {
                                        "type": "string",
                                        "description": ""
                                    },
                                    "output": {
                                        "$ref": "#/components/schemas/Dictionary"
                                    },
                                    "serviceVersion": {
                                        "type": "string",
                                        "description": "service version"
                                    },
                                    "packageRevision": {
                                        "type": "string",
                                        "description": "package revision"
                                    },
                                    "duration": {
                                        "type": "number",
                                        "format": "double",
                                        "description": ""
                                    }
                                }
                            }
                        }
                    },
                    "required": true
                }
            }
        },
        "/executions/{id}/terminate": {
            "post": {
                "operationId": "Executions_terminateExecution",
                "responses": {
                    "204": {
                        "description": "No content"
                    }
                },
                "description": "Terminate Execution.",
                "tags": [
                    "Executions"
                ],
                "parameters": [
                    {
                        "description": "Execution id",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ExecutionStatusReport"
                            }
                        }
                    },
                    "required": true
                },
                "x-codeSamples": [
                    {
                        "lang": "Python",
                        "source": "\nservice.executions.terminate(execution='execution_entity')\n\n# \n# Terminate Execution\n# \n# **Prerequisites**: You must be in the role of an *owner* or *developer*. You must have a service.\n# \n# :param dtlpy.entities.execution.Execution execution:\n# :return: execution object\n# :rtype: dtlpy.entities.execution.Execution\n# \n# "
                    }
                ]
            }
        },
        "/executions/{serviceId}": {
            "post": {
                "operationId": "Executions_createExecution",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "text/html": {
                                "schema": {
                                    "enum": [
                                        "APIExecution",
                                        "APICommand"
                                    ],
                                    "type": "string"
                                }
                            }
                        }
                    }
                },
                "description": "Execute a function on an existing service.",
                "tags": [
                    "Executions"
                ],
                "parameters": [
                    {
                        "description": "Service id to execute on.",
                        "in": "path",
                        "name": "serviceId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "if true, wait for function to end.",
                        "in": "query",
                        "name": "sync",
                        "required": true,
                        "schema": {
                            "type": "boolean"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "batch": {
                                        "$ref": "#/components/schemas/ExecuteOptionsBatch"
                                    },
                                    "functionName": {
                                        "type": "string",
                                        "description": ""
                                    },
                                    "input": {
                                        "$ref": "#/components/schemas/Dictionary"
                                    },
                                    "projectId": {
                                        "type": "string",
                                        "description": ""
                                    },
                                    "pipeline": {
                                        "$ref": "#/components/schemas/IPipelineExecution"
                                    },
                                    "mode": {
                                        "enum": [
                                            "Once",
                                            "Always"
                                        ],
                                        "type": "string",
                                        "description": ""
                                    }
                                }
                            }
                        }
                    },
                    "required": true
                },
                "x-codeSamples": [
                    {
                        "lang": "Python",
                        "source": "\ncommand = service.executions.create_batch(\nexecution_inputs=dl.FunctionIO(type=dl.PackageInputType.STRING, value='test', name='string'),\nfilters=dl.Filters(field='dir', values='/test'),\nfunction_name='run')\n\n# \n# Execute a function on an existing service\n# \n# **Prerequisites**: You must be in the role of an *owner* or *developer*. You must have a service.\n# \n# :param str service_id: service id to execute on\n# :param filters: Filters entity for a filtering before execute\n# :param str function_name: function name to run\n# :param List[FunctionIO] or dict execution_inputs: input dictionary or list of FunctionIO entities\n# :param bool wait: wait until create task finish\n# :return: execution object\n# :rtype: dtlpy.entities.execution.Execution\n# \n# "
                    }
                ]
            }
        },
        "/features/sets": {
            "post": {
                "operationId": "Add Feature Sets",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/APIFeatureSet"
                                    },
                                    "type": "array"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Missing argument"
                    }
                },
                "description": "Add a new feature set",
                "tags": [
                    "Feature Sets"
                ],
                "security": [],
                "parameters": [],
                "requestBody": {
                    "description": "Feature set/s to be uploaded",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "anyOf": [
                                    {
                                        "$ref": "#/components/schemas/FeatureSet"
                                    },
                                    {
                                        "items": {
                                            "$ref": "#/components/schemas/FeatureSet"
                                        },
                                        "type": "array"
                                    }
                                ],
                                "description": "Feature set/s to be uploaded"
                            }
                        }
                    }
                },
                "x-codeSamples": [
                    {
                        "lang": "Python",
                        "source": "# \n# Create a new Feature Set\n# \n# :param str name: the Feature name\n# :param int size: the length of a single vector in the set\n# :param str set_type: string of the feature type: 2d, 3d, modelFC, TSNE,PCA,FFT\n# :param entity_type: the entity that feature vector is linked to. Use the enum dl.FeatureEntityType\n# :param str project_id: the ID of the project where feature set will be created\n# :param str org_id: the ID of the org where feature set will be created\n# :return: Feature Set object\n# "
                    }
                ]
            }
        },
        "/features/sets/query": {
            "post": {
                "operationId": "List Feature Sets",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CursorPage_APIFeatureSet_"
                                },
                                "examples": {
                                    "Example 1": {
                                        "value": {
                                            "filter": {
                                                "$or": [
                                                    {
                                                        "name": {
                                                            "$in": [
                                                                "abc",
                                                                "cde"
                                                            ]
                                                        }
                                                    },
                                                    {
                                                        "$and": [
                                                            {
                                                                "size": {
                                                                    "$lte": 5
                                                                }
                                                            },
                                                            {
                                                                "creator": "abc@dataloop.ai"
                                                            }
                                                        ]
                                                    }
                                                ]
                                            },
                                            "select": {},
                                            "limit": 10,
                                            "page": 0,
                                            "pageSize": 100,
                                            "resource": "feature_vectors"
                                        }
                                    },
                                    "Example 2": {
                                        "value": {
                                            "hasNextPage": false,
                                            "items": [
                                                {
                                                    "id": "64e688839d86c82809beca38",
                                                    "project": "project-1",
                                                    "creator": "assaf@dataloop.ai",
                                                    "createdAt": "2021-08-25T22:00:00.000Z",
                                                    "type": "test type",
                                                    "entityType": "image",
                                                    "updatedAt": "2021-08-25T22:00:00.000Z",
                                                    "updatedBy": "assaf@dataloop.ai",
                                                    "name": "feature set name",
                                                    "tags": [],
                                                    "size": 1,
                                                    "url": "https://dev-gate.dataloop.ai/api/v1/features/vectors/64e688839d86c82809beca38",
                                                    "authz": {
                                                        "context": {
                                                            "createdAt": "2021-08-25T22:00:00.000Z",
                                                            "creator": "assaf@dataloop.ai",
                                                            "org": "org-1",
                                                            "project": "project-1",
                                                            "updatedAt": "2021-08-25T22:00:00.000Z"
                                                        }
                                                    }
                                                }
                                            ],
                                            "totalItemsCount": 1,
                                            "totalPagesCount": 1
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "description": "List feature sets",
                "tags": [
                    "Feature Sets"
                ],
                "security": [],
                "parameters": [],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/DQLResourceQuery"
                            }
                        }
                    }
                },
                "x-codeSamples": [
                    {
                        "lang": "Python",
                        "source": "# \n# List Feature Sets\n# \n# :param dtlpy.entities.filters.Filters filters: Filters entity or a dictionary containing filters parameters\n# :return: Paged entity\n# :rtype: dtlpy.entities.paged_entities.PagedEntities\n# "
                    }
                ]
            }
        },
        "/features/sets/{id}": {
            "get": {
                "operationId": "Get Feature Set",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/APIFeatureSet"
                                }
                            }
                        }
                    }
                },
                "description": "Get a feature set by id",
                "tags": [
                    "Feature Sets"
                ],
                "security": [],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "x-codeSamples": [
                    {
                        "lang": "Python",
                        "source": "# \n# Get Feature Set object\n# \n# :param str feature_set_name: name of the feature set\n# :param str feature_set_id: id of the feature set\n# :return: Feature object\n# "
                    }
                ]
            },
            "delete": {
                "operationId": "Delete Feature Set",
                "responses": {
                    "204": {
                        "description": "No content"
                    }
                },
                "description": "Delete a feature set by id",
                "tags": [
                    "Feature Sets"
                ],
                "security": [],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "x-codeSamples": [
                    {
                        "lang": "Python",
                        "source": "# \n# Delete feature vector\n# \n# :param str feature_set_id: feature set id to delete\n# :return: success\n# :rtype: bool\n# "
                    }
                ]
            },
            "patch": {
                "operationId": "Edit Feature Sets",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/APIFeatureSet"
                                }
                            }
                        }
                    }
                },
                "description": "Update a feature set by id",
                "tags": [
                    "Feature Sets"
                ],
                "security": [],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "description": "partial feature set to update",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PartialFeatureSet",
                                "description": "partial feature set to update"
                            }
                        }
                    }
                }
            }
        },
        "/features/vectors": {
            "get": {
                "operationId": "Get Feature Vectors",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/APIFeatureVector"
                                    },
                                    "type": "array"
                                }
                            }
                        }
                    }
                },
                "description": "Get feature vectors by creator",
                "tags": [
                    "Feature Vectors"
                ],
                "security": [],
                "parameters": [
                    {
                        "in": "query",
                        "name": "pageSize",
                        "required": false,
                        "schema": {
                            "format": "double",
                            "type": "number"
                        }
                    },
                    {
                        "in": "query",
                        "name": "page",
                        "required": false,
                        "schema": {
                            "format": "double",
                            "type": "number"
                        }
                    }
                ]
            },
            "post": {
                "operationId": "Add Feature Vectors",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/APIFeatureVector"
                                    },
                                    "type": "array"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Missing argument"
                    }
                },
                "description": "Add new feature vector/s",
                "tags": [
                    "Feature Vectors"
                ],
                "security": [],
                "parameters": [],
                "requestBody": {
                    "description": "feature vector/s to be uploaded",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "anyOf": [
                                    {
                                        "$ref": "#/components/schemas/FeatureVector"
                                    },
                                    {
                                        "items": {
                                            "$ref": "#/components/schemas/FeatureVector"
                                        },
                                        "type": "array"
                                    }
                                ],
                                "description": "feature vector/s to be uploaded"
                            }
                        }
                    }
                },
                "x-codeSamples": [
                    {
                        "lang": "Python",
                        "source": "# \n# Create a new Feature vector\n# \n# :param immutable value: actual vector - immutable (list of floats [1,2,3])\n# :param str project_id: the id of the project where feature will be created\n# :param str feature_set_id: ref to a featureSet this vector is a part of\n# :param str entity_id: id of the entity the featureVector is linked to (item.id, annotation.id etc)\n# :param str version: version of the featureSet generator\n# :param str parent_id: optional: parent FeatureSet id - used when FeatureVector is a subFeature\n# :param str org_id: the id of the org where featureVector will be created\n# :return: Feature vector:\n# "
                    }
                ]
            }
        },
        "/features/vectors/query": {
            "post": {
                "operationId": "Query Feature Vectors",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CursorPage_APIFeatureVector_"
                                },
                                "examples": {
                                    "Example 1": {
                                        "value": {
                                            "filter": {
                                                "value": {
                                                    "$euclid": {
                                                        "$euclidFilter": {
                                                            "$eq": 89
                                                        },
                                                        "$euclidSort": {
                                                            "eu_dist": "descending"
                                                        }
                                                    }
                                                },
                                                "featureSetId": "64e38482f084e62ddd555e46"
                                            },
                                            "page": 0,
                                            "pageSize": 100,
                                            "resource": "feature_vectors"
                                        }
                                    },
                                    "Example 2": {
                                        "value": {
                                            "hasNextPage": false,
                                            "items": [
                                                {
                                                    "id": "64e688839d86c82809beca38",
                                                    "entityId": "entityTest",
                                                    "project": "project-1",
                                                    "creator": "assaf@dataloop.ai",
                                                    "createdAt": "2021-08-25T22:00:00.000Z",
                                                    "value": [
                                                        90
                                                    ],
                                                    "featureSetId": "64e688839d86c82809beca36",
                                                    "url": "https://dev-gate.dataloop.ai/api/v1/features/vectors/64e688839d86c82809beca38",
                                                    "authz": {
                                                        "context": {
                                                            "createdAt": "2021-08-25T22:00:00.000Z",
                                                            "creator": "assaf@dataloop.ai",
                                                            "org": "org-1",
                                                            "project": "project-1",
                                                            "updatedAt": "2021-08-25T22:00:00.000Z"
                                                        }
                                                    }
                                                }
                                            ],
                                            "totalItemsCount": 1,
                                            "totalPagesCount": 1
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "description": "Query feature vectors via common DQL filter, sort, limit etc.\nQuerying supports joins on items and annotations, sorting only available by \"eu_dist\" field.\nThe route also could calculate euclid distance using $euclid operator, for details see examples.\nLowest role to successfully query Feature vector is Annotation manager, all below will got thrown 403.",
                "tags": [
                    "Feature Vectors"
                ],
                "security": [],
                "parameters": [],
                "requestBody": {
                    "description": "query to filter features by",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/DQLResourceQuery",
                                "description": "query to filter features by"
                            }
                        }
                    }
                }
            }
        },
        "/features/vectors/{id}": {
            "get": {
                "operationId": "Get Feature Vector",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/APIFeatureVector"
                                }
                            }
                        }
                    }
                },
                "description": "Get a feature vector by id",
                "tags": [
                    "Feature Vectors"
                ],
                "security": [],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "x-codeSamples": [
                    {
                        "lang": "Python",
                        "source": "# \n# Get Feature object\n# \n# :param str feature_id: feature id\n# :return: Feature object\n# "
                    }
                ]
            },
            "delete": {
                "operationId": "Delete Feature Vector",
                "responses": {
                    "204": {
                        "description": "No content"
                    }
                },
                "description": "Delete a feature vector by id",
                "tags": [
                    "Feature Vectors"
                ],
                "security": [],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "x-codeSamples": [
                    {
                        "lang": "Python",
                        "source": "# \n# Delete feature vector\n# \n# :param str feature_id: feature id to delete\n# :return: success\n# :rtype: bool\n# "
                    }
                ]
            }
        },
        "/groups": {
            "get": {
                "operationId": "Find Groups",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/APIGroup"
                                    },
                                    "type": "array"
                                }
                            }
                        }
                    }
                },
                "description": "Get all groups a user is a member of",
                "tags": [
                    "Groups"
                ],
                "security": [],
                "parameters": []
            },
            "post": {
                "operationId": "Create Group",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/APIGroup"
                                },
                                "examples": {
                                    "Example 1": {
                                        "value": {
                                            "name": "My_Group",
                                            "orgId": "someOrgId"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "description": "create a new group",
                "tags": [
                    "Groups"
                ],
                "security": [],
                "parameters": [],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateGroupPayload"
                            }
                        }
                    }
                }
            }
        },
        "/groups/{groupId}": {
            "get": {
                "operationId": "Find Group",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/APIGroup"
                                }
                            }
                        }
                    }
                },
                "description": "Get a group by id",
                "tags": [
                    "Groups"
                ],
                "security": [],
                "parameters": [
                    {
                        "in": "path",
                        "name": "groupId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "patch": {
                "operationId": "Update Group",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/APIGroup"
                                },
                                "examples": {
                                    "Example 1": {
                                        "value": {
                                            "name": "newGroupName"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "description": "Update a groups name",
                "tags": [
                    "Groups"
                ],
                "security": [],
                "parameters": [
                    {
                        "in": "path",
                        "name": "groupId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PatchGroupPayload"
                            }
                        }
                    }
                }
            },
            "delete": {
                "operationId": "Destroy Group",
                "responses": {
                    "204": {
                        "description": "No content"
                    }
                },
                "description": "Delete a group",
                "tags": [
                    "Groups"
                ],
                "security": [],
                "parameters": [
                    {
                        "in": "path",
                        "name": "groupId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/groups/{groupId}/members": {
            "get": {
                "operationId": "Get Group Members",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/AuthUserAttributes"
                                    },
                                    "type": "array"
                                }
                            }
                        }
                    }
                },
                "description": "List all members of a group",
                "tags": [
                    "Groups"
                ],
                "security": [],
                "parameters": [
                    {
                        "in": "path",
                        "name": "groupId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "post": {
                "operationId": "Add Group Member",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/AuthUserAttributes"
                                    },
                                    "type": "array"
                                },
                                "examples": {
                                    "Example 1": {
                                        "value": {
                                            "user_id": "newGroupMemberId"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "description": "Add a member to a group",
                "tags": [
                    "Groups"
                ],
                "security": [],
                "parameters": [
                    {
                        "in": "path",
                        "name": "groupId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "user_id": {
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "user_id"
                                ],
                                "type": "object"
                            }
                        }
                    }
                }
            }
        },
        "/groups/{groupId}/members/{memberId}": {
            "delete": {
                "operationId": "Remove Group Member",
                "responses": {
                    "204": {
                        "description": "No content"
                    }
                },
                "description": "Remove a member from a group",
                "tags": [
                    "Groups"
                ],
                "security": [],
                "parameters": [
                    {
                        "in": "path",
                        "name": "groupId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "path",
                        "name": "memberId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/groups/{groupId}/owner": {
            "patch": {
                "operationId": "Update Group Owner",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/APIGroup"
                                },
                                "examples": {
                                    "Example 1": {
                                        "value": {
                                            "newGroupOwnerId": "someUserId"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "description": "Update the group's owner",
                "tags": [
                    "Groups"
                ],
                "security": [],
                "parameters": [
                    {
                        "in": "path",
                        "name": "groupId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "newGroupOwnerId": {
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "newGroupOwnerId"
                                ],
                                "type": "object"
                            }
                        }
                    }
                }
            }
        },
        "/groups/{groupId}/subgroups": {
            "get": {
                "operationId": "Get Sub Groups",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/APIGroup"
                                    },
                                    "type": "array"
                                }
                            }
                        }
                    }
                },
                "description": "Get all subgroups of a group",
                "tags": [
                    "Groups"
                ],
                "security": [],
                "parameters": [
                    {
                        "in": "path",
                        "name": "groupId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "post": {
                "operationId": "Add Sub Group",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/APIGroup"
                                    },
                                    "type": "array"
                                },
                                "examples": {
                                    "Example 1": {
                                        "value": {
                                            "sub_group_id": "newChildGroupId"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "description": "Add a group as a child group to another group.\nIf the parent group has a role in a project, the child group members will inherit that role.",
                "tags": [
                    "Groups"
                ],
                "security": [],
                "parameters": [
                    {
                        "in": "path",
                        "name": "groupId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "sub_group_id": {
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "sub_group_id"
                                ],
                                "type": "object"
                            }
                        }
                    }
                }
            }
        },
        "/groups/{groupId}/subgroups/{subGroupId}": {
            "delete": {
                "operationId": "Remove Sub Group",
                "responses": {
                    "204": {
                        "description": "No content"
                    }
                },
                "description": "Remove a group as a child group from another group.",
                "tags": [
                    "Groups"
                ],
                "security": [],
                "parameters": [
                    {
                        "in": "path",
                        "name": "groupId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "path",
                        "name": "subGroupId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/groups/{groupId}/tree": {
            "get": {
                "operationId": "Get Sub Group Tree",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/APIGroup"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Groups"
                ],
                "security": [],
                "parameters": [
                    {
                        "in": "path",
                        "name": "groupId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/instance_catalog": {
            "get": {
                "operationId": "InstanceCatalog_getInstanceCatalog",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "description": "",
                "tags": [
                    "InstanceCatalog"
                ]
            }
        },
        "/invoices": {
            "get": {
                "operationId": "List Account Invoices",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Invoice"
                                    },
                                    "type": "array"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                },
                "tags": [
                    "Invoices"
                ],
                "security": [],
                "parameters": [
                    {
                        "description": "DL account ID",
                        "in": "query",
                        "name": "account",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Invoice status, one of 'submitted', 'paid', 'partiallyPaid', 'debt', 'Failed Payment'",
                        "in": "query",
                        "name": "status",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Date string, format: 'YYYY-MM-DD'. '2022-06-30' will be June 30th 2022",
                        "in": "query",
                        "name": "fromDate",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Date string, format: 'YYYY-MM-DD'. '2022-06-30' will be June 30th 2022",
                        "in": "query",
                        "name": "toDate",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/invoices/{id}": {
            "get": {
                "operationId": "Get Invoice",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Invoice"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                },
                "description": "Retrieves the details of an invoice.\n\nSupply the unique invoice ID to fetch it's details.",
                "tags": [
                    "Invoices"
                ],
                "security": [],
                "parameters": [
                    {
                        "description": "ID of the invoice to fetch",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/invoices/{id}/stream": {
            "get": {
                "operationId": "Stream Invoice Pdf",
                "responses": {
                    "204": {
                        "description": "No content"
                    }
                },
                "tags": [
                    "Invoices"
                ],
                "security": [],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/items/{id}": {
            "get": {
                "operationId": "Get Item",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "anyOf": [
                                        {
                                            "$ref": "#/components/schemas/APIDatasetFileItem"
                                        },
                                        {
                                            "$ref": "#/components/schemas/APIDatasetDirectoryItem"
                                        }
                                    ]
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Items"
                ],
                "security": [],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "x-codeSamples": [
                    {
                        "lang": "Python",
                        "source": "\ndataset.items.get(item_id='item_id')\n\n# \n# Get Item object\n# \n# **Prerequisites**: You must be in the role of an *owner* or *developer*.\n# \n# :param str filepath: optional - search by remote path\n# :param str item_id: optional - search by id\n# :param bool fetch: optional - fetch entity from platform, default taken from cookie\n# :param bool is_dir: True if you want to get an item from dir type\n# :return: Item object\n# :rtype: dtlpy.entities.item.Item\n# \n# "
                    }
                ]
            },
            "delete": {
                "operationId": "Remove Item",
                "responses": {
                    "204": {
                        "description": "No content"
                    }
                },
                "tags": [
                    "Items"
                ],
                "security": [],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "x-codeSamples": [
                    {
                        "lang": "Python",
                        "source": "\ndataset.items.delete(item_id='item_id')\n\n# \n# Delete item from platform.\n# \n# **Prerequisites**: You must be in the role of an *owner* or *developer*.\n# \n# You must provide at least ONE of the following params: item id, filename, filters.\n# \n# :param str filename: optional - search item by remote path\n# :param str item_id: optional - search item by id\n# :param dtlpy.entities.filters.Filters filters: optional - delete items by filter\n# :return: True if success\n# :rtype: bool\n# \n# "
                    }
                ]
            },
            "patch": {
                "operationId": "Edit Item",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "anyOf": [
                                        {
                                            "$ref": "#/components/schemas/APIDatasetFileItem"
                                        },
                                        {
                                            "$ref": "#/components/schemas/APIDatasetDirectoryItem"
                                        }
                                    ]
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Items"
                ],
                "security": [],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "system",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PartialAPIDatasetItem"
                            }
                        }
                    }
                },
                "x-codeSamples": [
                    {
                        "lang": "Python",
                        "source": "\ndataset.items.update(item='item_entity')\n\n# \n# Update item metadata.\n# \n# **Prerequisites**: You must be in the role of an *owner* or *developer*.\n# \n# You must provide at least ONE of the following params: update_values, system_update_values.\n# \n# :param dtlpy.entities.item.Item item: Item object\n# :param dtlpy.entities.filters.Filters filters: optional update filtered items by given filter\n# :param update_values: optional field to be updated and new values\n# :param system_update_values: values in system metadata to be updated\n# :param bool system_metadata: True, if you want to update the metadata system\n# :return: Item object\n# :rtype: dtlpy.entities.item.Item\n# \n# "
                    }
                ]
            }
        },
        "/items/{id}/clone": {
            "post": {
                "operationId": "Clone Item",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/APICommand"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Items"
                ],
                "security": [],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ItemCloneRequest"
                            }
                        }
                    }
                },
                "x-codeSamples": [
                    {
                        "lang": "Python",
                        "source": "\ndataset.items.clone(item_id='item_id',\ndst_dataset_id='dist_dataset_id',\nwith_metadata=True,\nwith_task_annotations_status=False,\nwith_annotations=False)\n\n# \n# Clone item. Read more about cloning datatsets and items in our `documentation <https://docs.dataloop.ai/docs/clone-merge-dataset#cloned-dataset>`_ and `SDK documentation <https://developers.dataloop.ai/tutorials/data_management/data_versioning/chapter/>`_.\n# \n# **Prerequisites**: You must be in the role of an *owner* or *developer*.\n# \n# :param str item_id: item to clone\n# :param str dst_dataset_id: destination dataset id\n# :param str remote_filepath: complete filepath\n# :param dict metadata: new metadata to add\n# :param bool with_annotations: clone annotations\n# :param bool with_metadata: clone metadata\n# :param bool with_task_annotations_status: clone task annotations status\n# :param bool allow_many: `bool` if True, using multiple clones in single dataset is allowed, (default=False)\n# :param bool wait: wait for the command to finish\n# :return: Item object\n# :rtype: dtlpy.entities.item.Item\n# \n# "
                    }
                ]
            }
        },
        "/items/{id}/items": {
            "get": {
                "operationId": "Get Directory Child Items",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/APIDatasetItemCursor"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Items"
                ],
                "security": [],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "pageOffset",
                        "required": false,
                        "schema": {
                            "format": "double",
                            "type": "number"
                        }
                    },
                    {
                        "in": "query",
                        "name": "pageSize",
                        "required": false,
                        "schema": {
                            "format": "double",
                            "type": "number"
                        }
                    }
                ]
            }
        },
        "/items/{id}/revisions": {
            "post": {
                "operationId": "Create Item Revision",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/APIDatasetFileItem"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Items"
                ],
                "security": [],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/items/{id}/snapshots": {
            "post": {
                "operationId": "Create Item Snapshot",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/APIDatasetFileItem"
                                }
                            }
                        }
                    }
                },
                "description": "Create a new snapshot on an existing item\nOrder is important - FILE MUST BE LAST FIELD OF THE FORM",
                "tags": [
                    "Items"
                ],
                "security": [],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/items/{id}/stream": {
            "get": {
                "operationId": "Stream Item",
                "responses": {
                    "204": {
                        "description": "No content"
                    }
                },
                "tags": [
                    "Items"
                ],
                "security": [],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/items/{id}/thumbnail": {
            "get": {
                "operationId": "Stream Item Thumbnail",
                "responses": {
                    "204": {
                        "description": "No content"
                    }
                },
                "tags": [
                    "Items"
                ],
                "security": [],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "width",
                        "required": false,
                        "schema": {
                            "format": "double",
                            "type": "number"
                        }
                    },
                    {
                        "in": "query",
                        "name": "height",
                        "required": false,
                        "schema": {
                            "format": "double",
                            "type": "number"
                        }
                    },
                    {
                        "in": "query",
                        "name": "annotations",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    }
                ]
            }
        },
        "/items/{itemId}/annotations": {
            "get": {
                "operationId": "List Item Annotations",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/APIAnnotation"
                                    },
                                    "type": "array"
                                }
                            }
                        }
                    }
                },
                "description": "List all annotations of an item",
                "tags": [
                    "Item Annotations"
                ],
                "security": [],
                "parameters": [
                    {
                        "description": "Item id",
                        "in": "path",
                        "name": "itemId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "post": {
                "operationId": "Create Annotations",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "anyOf": [
                                        {
                                            "$ref": "#/components/schemas/APIAnnotation"
                                        },
                                        {
                                            "items": {
                                                "$ref": "#/components/schemas/APIAnnotation"
                                            },
                                            "type": "array"
                                        }
                                    ]
                                }
                            }
                        }
                    }
                },
                "description": "Create an annotation for an item",
                "tags": [
                    "Item Annotations"
                ],
                "security": [],
                "parameters": [
                    {
                        "description": "Item id",
                        "in": "path",
                        "name": "itemId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Annotations to be created",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "anyOf": [
                                    {
                                        "$ref": "#/components/schemas/APIAnnotationRequest"
                                    },
                                    {
                                        "items": {
                                            "$ref": "#/components/schemas/APIAnnotationRequest"
                                        },
                                        "type": "array"
                                    }
                                ],
                                "description": "Annotations to be created"
                            }
                        }
                    }
                },
                "x-codeSamples": [
                    {
                        "lang": "Python",
                        "source": "\nannotations = item.annotations.upload(annotations='builder')\n\n# \n# Upload a new annotation/annotations. You must first create the annotation using the annotation *builder* method.\n# \n# **Prerequisites**: Any user can upload annotations.\n# \n# :param List[dtlpy.entities.annotation.Annotation] or dtlpy.entities.annotation.Annotation annotations: list or\n# single annotation of type Annotation\n# :return: list of annotation objects\n# :rtype: entities.AnnotationCollection\n# \n# "
                    }
                ]
            }
        },
        "/items/{itemId}/annotations/{annotationId}": {
            "get": {
                "operationId": "Get Item Annotation",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/APIAnnotation"
                                }
                            }
                        }
                    }
                },
                "description": "Get annotation by id",
                "tags": [
                    "Item Annotations"
                ],
                "security": [],
                "parameters": [
                    {
                        "description": "annotation id",
                        "in": "path",
                        "name": "annotationId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "path",
                        "name": "itemId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "delete": {
                "operationId": "Delete Item Annotation",
                "responses": {
                    "204": {
                        "description": "No content"
                    }
                },
                "description": "Delete an Annotation from an item",
                "tags": [
                    "Item Annotations"
                ],
                "security": [],
                "parameters": [
                    {
                        "description": "Annotation id",
                        "in": "path",
                        "name": "annotationId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "path",
                        "name": "itemId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "put": {
                "operationId": "Update Item Annotation",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/APIAnnotation"
                                }
                            }
                        }
                    }
                },
                "description": "Update an item's annotation",
                "tags": [
                    "Item Annotations"
                ],
                "security": [],
                "parameters": [
                    {
                        "description": "Annotation id",
                        "in": "path",
                        "name": "annotationId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "when specified - editing system space metadata is enabled",
                        "in": "query",
                        "name": "system",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "in": "query",
                        "name": "replace",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "in": "path",
                        "name": "itemId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Updated annotation object",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpdateAnnotationRequest",
                                "description": "Updated annotation object"
                            }
                        }
                    }
                }
            }
        },
        "/items/{itemId}/annotations/{annotationId}/issue": {
            "put": {
                "operationId": "Item Annotation Issues",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/APIAnnotation"
                                }
                            }
                        }
                    }
                },
                "description": "Update an item's annotation status to issue",
                "tags": [
                    "Item Annotations"
                ],
                "security": [],
                "parameters": [
                    {
                        "description": "Annotation id",
                        "in": "path",
                        "name": "annotationId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "path",
                        "name": "itemId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/logins": {
            "post": {
                "operationId": "List past logins",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CursorPage_APILogin_"
                                }
                            }
                        }
                    }
                },
                "security": [],
                "parameters": [],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/LoginsLogQuery"
                            }
                        }
                    }
                }
            }
        },
        "/ml/metrics/precisionRecall": {
            "post": {
                "operationId": "Calaculate The Precision And Recall For a Model",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {},
                                "examples": {
                                    "Example 1": {
                                        "value": {
                                            "modelId": "modelId",
                                            "datasetId": "datasetId",
                                            "iouThreshold": 0.5
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                },
                "description": "Get Model Precision Recall\n\nCalaculate the precision and recall for a model",
                "tags": [
                    "Model Metrics"
                ],
                "security": [],
                "parameters": [],
                "requestBody": {
                    "description": "The model and the dataset to calculate precision and recall for by confThreshold and iouThreshold",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PrecisionRecallInputRequest",
                                "description": "The model and the dataset to calculate precision and recall for by confThreshold and iouThreshold"
                            }
                        }
                    }
                }
            }
        },
        "/ml/metrics/publish": {
            "post": {
                "operationId": "Publish Model Metrics",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "errorMap": {
                                            "properties": {},
                                            "additionalProperties": {
                                                "$ref": "#/components/schemas/Error"
                                            },
                                            "type": "object"
                                        },
                                        "failed": {
                                            "type": "number",
                                            "format": "double"
                                        },
                                        "succeeded": {
                                            "type": "number",
                                            "format": "double"
                                        }
                                    },
                                    "required": [
                                        "failed",
                                        "succeeded"
                                    ],
                                    "type": "object"
                                },
                                "examples": {
                                    "Example 1": {
                                        "value": {
                                            "modelId": "modelId",
                                            "datasetId": "datasetId",
                                            "figure": "figure",
                                            "legend": "legend",
                                            "data": {
                                                "x": 1,
                                                "y": 1
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                },
                "description": "Publish Model Metrics\n\nSupply single or multiple metrics to publish",
                "tags": [
                    "Model Metrics"
                ],
                "security": [],
                "parameters": [],
                "requestBody": {
                    "description": "The metric or metrics to publish",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "anyOf": [
                                    {
                                        "$ref": "#/components/schemas/MetricRequest"
                                    },
                                    {
                                        "items": {
                                            "$ref": "#/components/schemas/MetricRequest"
                                        },
                                        "type": "array"
                                    }
                                ],
                                "description": "The metric or metrics to publish"
                            }
                        }
                    }
                }
            }
        },
        "/ml/metrics/query": {
            "post": {
                "operationId": "Query Model Metrics",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CursorPageAPISetting"
                                },
                                "examples": {
                                    "Example 1": {
                                        "value": {
                                            "filter": {
                                                "modelId": "modelId"
                                            },
                                            "page": 1,
                                            "pageSize": 10
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                },
                "description": "Query Model Metrics\n\nSupply the query requested to query Metrics",
                "tags": [
                    "Model Metrics"
                ],
                "security": [],
                "parameters": [],
                "requestBody": {
                    "description": "The query",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/QueryModel",
                                "description": "The query"
                            }
                        }
                    }
                }
            }
        },
        "/ml/metrics/shebang": {
            "post": {
                "operationId": "Generate Model Metrics Report",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Dictionary"
                                    },
                                    "type": "array"
                                },
                                "examples": {
                                    "Example 1": {
                                        "value": {
                                            "modelIds": [
                                                "modelId"
                                            ],
                                            "datasetIds": [
                                                "datasetId"
                                            ]
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                },
                "description": "Generate Model Metrics Report\n\nSupply single or multiple Model ids to generate report for",
                "tags": [
                    "Model Metrics"
                ],
                "security": [],
                "parameters": [],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "datasetIds": {
                                        "anyOf": [
                                            {
                                                "type": "string"
                                            },
                                            {
                                                "items": {
                                                    "type": "string"
                                                },
                                                "type": "array"
                                            }
                                        ],
                                        "description": "The dataset or datasets to generate report for"
                                    },
                                    "modelIds": {
                                        "anyOf": [
                                            {
                                                "type": "string"
                                            },
                                            {
                                                "items": {
                                                    "type": "string"
                                                },
                                                "type": "array"
                                            }
                                        ],
                                        "description": "The models to generate report for"
                                    }
                                },
                                "required": [
                                    "modelIds"
                                ],
                                "type": "object"
                            }
                        }
                    }
                }
            }
        },
        "/ml/metrics/{id}": {
            "delete": {
                "operationId": "Delete Metric",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                },
                "description": "Delete a Metric\n\nSupply the unique id of the Metric to delete",
                "tags": [
                    "Model Metrics"
                ],
                "security": [],
                "parameters": [
                    {
                        "description": "ID of the Metric to Delete",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/ml/models": {
            "get": {
                "operationId": "List Models",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CursorPageAPISetting"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                },
                "description": "Retrieves Models.\n\nSupply query parameters to filter the list.",
                "tags": [
                    "Models"
                ],
                "security": [],
                "parameters": [
                    {
                        "description": "filter: accepts any string",
                        "in": "query",
                        "name": "filter",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "sort: accepts any string",
                        "in": "query",
                        "name": "sort",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "page: accepts any number",
                        "in": "query",
                        "name": "page",
                        "required": false,
                        "schema": {
                            "format": "double",
                            "type": "number"
                        }
                    },
                    {
                        "description": "pageSize: accepts any number",
                        "in": "query",
                        "name": "pageSize",
                        "required": false,
                        "schema": {
                            "format": "double",
                            "type": "number"
                        }
                    }
                ]
            },
            "post": {
                "operationId": "Create Model",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/APIModel"
                                },
                                "examples": {
                                    "Example 1": {
                                        "value": {
                                            "name": "My Model",
                                            "description": "My Model Description",
                                            "packageId": "packageId",
                                            "projectId": "projectId"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                },
                "description": "Creates a new Model.\n\nSupply the appropriate Create Request object in order to create a Model.",
                "tags": [
                    "Models"
                ],
                "security": [],
                "parameters": [],
                "requestBody": {
                    "description": "The Model to create",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateModelRequest",
                                "description": "The Model to create"
                            }
                        }
                    }
                }
            }
        },
        "/ml/models/datasets/count": {
            "get": {
                "operationId": "Models Datasets Count",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "datasetsCount": {
                                            "type": "number",
                                            "format": "double"
                                        }
                                    },
                                    "required": [
                                        "datasetsCount"
                                    ],
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                },
                "description": "Models Datasets Count\n\nThis will return the total dataset count that models have been assigned to",
                "tags": [
                    "Models"
                ],
                "security": [],
                "parameters": []
            }
        },
        "/ml/models/executions": {
            "post": {
                "operationId": "Models Executions",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ModelJoinMap"
                                },
                                "examples": {
                                    "Example 1": {
                                        "value": {
                                            "filter": {
                                                "status": "success"
                                            },
                                            "page": 1,
                                            "pageSize": 10
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                },
                "description": "Models Executions\n\nThis will return latest 1000 models executions",
                "tags": [
                    "Models"
                ],
                "security": [],
                "parameters": [],
                "requestBody": {
                    "description": "The query",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/QueryModel",
                                "description": "The query"
                            }
                        }
                    }
                }
            }
        },
        "/ml/models/query": {
            "post": {
                "operationId": "Query Models",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CursorPageAPISetting"
                                },
                                "examples": {
                                    "Example 1": {
                                        "value": {
                                            "filter": {
                                                "status": "deployed"
                                            },
                                            "page": 1,
                                            "pageSize": 10
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                },
                "description": "Query Models\n\nSupply the query requested to query Models",
                "tags": [
                    "Models"
                ],
                "security": [],
                "parameters": [],
                "requestBody": {
                    "description": "The query",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/QueryModel",
                                "description": "The query"
                            }
                        }
                    }
                }
            }
        },
        "/ml/models/services": {
            "post": {
                "operationId": "Models Services",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ModelJoinMap"
                                },
                                "examples": {
                                    "Example 1": {
                                        "value": {
                                            "filter": {
                                                "name": "mgmt"
                                            },
                                            "page": 1,
                                            "pageSize": 10
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                },
                "description": "Models Services\n\nThis will return latest 1000 models servuces",
                "tags": [
                    "Models"
                ],
                "security": [],
                "parameters": [],
                "requestBody": {
                    "description": "The query",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/QueryModel",
                                "description": "The query"
                            }
                        }
                    }
                }
            }
        },
        "/ml/models/{id}": {
            "get": {
                "operationId": "Get Model",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/APIModel"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                },
                "description": "Retrieves the details of a Model.\n\nSupply the unique Model ID to fetch it's details.",
                "tags": [
                    "Models"
                ],
                "security": [],
                "parameters": [
                    {
                        "description": "ID of the Model to fetch",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "patch": {
                "operationId": "Update Model",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/APIModel"
                                },
                                "examples": {
                                    "Example 1": {
                                        "value": {
                                            "name": "My Model",
                                            "description": "My Model Description",
                                            "status": "deployed"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                },
                "description": "Update a Model\n\nSupply the unique id of the Model to update and an object describing which fields update",
                "tags": [
                    "Models"
                ],
                "security": [],
                "parameters": [
                    {
                        "description": "ID of the Model to Update",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "system",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    }
                ],
                "requestBody": {
                    "description": "The values to update with",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PatchModelRequest",
                                "description": "The values to update with"
                            }
                        }
                    }
                }
            },
            "delete": {
                "operationId": "Delete Model",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                },
                "description": "Delete a Model\n\nSupply the unique id of the Model to delete",
                "tags": [
                    "Models"
                ],
                "security": [],
                "parameters": [
                    {
                        "description": "ID of the Model to Delete",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/ml/models/{id}/clone": {
            "post": {
                "operationId": "Clone Model",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "anyOf": [
                                        {
                                            "$ref": "#/components/schemas/APIModel"
                                        },
                                        {
                                            "$ref": "#/components/schemas/APICommand"
                                        }
                                    ]
                                },
                                "examples": {
                                    "Example 1": {
                                        "value": {
                                            "name": "My Model",
                                            "description": "My Model Description",
                                            "packageId": "packageId",
                                            "projectId": "projectId"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                },
                "description": "Clone Model\n\nthis will either clone or create a copy both dataset and model and create new instances of them\n\nProvide the model ID of the Model to clone from\n\nAlso provide the Clone spec to clone a dataset with a filter and the model\nOr provide parameters to overwrite the current values in the model you want to clone",
                "tags": [
                    "Models"
                ],
                "security": [],
                "parameters": [
                    {
                        "description": "ID of the Model to clone from",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Provide the Clone spec to clone a dataset with a filter and the model\nOr Provide parameters to overwrite the current values in the model you want to clone",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "anyOf": [
                                    {
                                        "$ref": "#/components/schemas/Partial_CreateModelRequest_"
                                    },
                                    {
                                        "$ref": "#/components/schemas/APICopyEnvironmentSpec"
                                    }
                                ],
                                "description": "Provide the Clone spec to clone a dataset with a filter and the model\nOr Provide parameters to overwrite the current values in the model you want to clone"
                            }
                        }
                    }
                }
            }
        },
        "/ml/models/{id}/deploy": {
            "post": {
                "operationId": "Deploy Model",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {},
                                "examples": {
                                    "Example 1": {
                                        "value": {
                                            "serviceConfig": {
                                                "runtime": {
                                                    "podType": "regular-xs",
                                                    "runnerImage": "jjanzic/docker-python3-opencv"
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                },
                "description": "Deploy Model\n\nSupply the model id to deploy it as a service\nYou can also supply specific config for the deployed service",
                "tags": [
                    "Models"
                ],
                "security": [],
                "parameters": [
                    {
                        "description": "ID of the Model to train",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Service Configuration",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "pipeline": {
                                        "$ref": "#/components/schemas/Dictionary"
                                    },
                                    "serviceConfig": {
                                        "$ref": "#/components/schemas/Dictionary"
                                    }
                                },
                                "type": "object",
                                "description": "Service Configuration"
                            }
                        }
                    }
                }
            }
        },
        "/ml/models/{id}/deployment": {
            "patch": {
                "operationId": "Update Model Deployment",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Dictionary"
                                },
                                "examples": {
                                    "Example 1": {
                                        "value": {
                                            "deploymentType": "train",
                                            "deploymentConfig": {
                                                "runtime": {
                                                    "podType": "regular-xs",
                                                    "runnerImage": "jjanzic/docker-python3-opencv"
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                },
                "description": "Update Model Deployment\n\nthis will allow you to update a models deployment configuration\n\nProvide the model ID, the deployment configuration and the deployment Type",
                "tags": [
                    "Models"
                ],
                "security": [],
                "parameters": [
                    {
                        "description": "ID of the Model to clone from",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Provide the deployment configuration and the deployment Type",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "deploymentConfig": {
                                        "$ref": "#/components/schemas/Dictionary"
                                    },
                                    "deploymentType": {
                                        "$ref": "#/components/schemas/ModelOperationTypes"
                                    }
                                },
                                "required": [
                                    "deploymentConfig",
                                    "deploymentType"
                                ],
                                "type": "object",
                                "description": "Provide the deployment configuration and the deployment Type"
                            }
                        }
                    }
                }
            }
        },
        "/ml/models/{id}/evaluate": {
            "post": {
                "operationId": "Evaluate Model",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Execution"
                                },
                                "examples": {
                                    "Example 1": {
                                        "value": {
                                            "input": {
                                                "datasetId": "datasetId"
                                            },
                                            "serviceConfig": {
                                                "runtime": {
                                                    "podType": "regular-xs",
                                                    "runnerImage": "jjanzic/docker-python3-opencv"
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                },
                "description": "Evaluate Model\n\nSupply data to evaluate the model on\nYou can also supply specific config for the deployed service",
                "tags": [
                    "Models"
                ],
                "security": [],
                "parameters": [
                    {
                        "description": "ID of the Model to train",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "config": {
                                        "properties": {
                                            "pipeline": {
                                                "$ref": "#/components/schemas/Dictionary"
                                            },
                                            "serviceConfig": {
                                                "$ref": "#/components/schemas/Dictionary"
                                            }
                                        },
                                        "type": "object",
                                        "description": "Service Configuration"
                                    },
                                    "input": {
                                        "properties": {
                                            "datasetQuery": {
                                                "$ref": "#/components/schemas/Dictionary"
                                            },
                                            "datasetId": {
                                                "type": "string"
                                            }
                                        },
                                        "type": "object",
                                        "description": "Evaluate input"
                                    }
                                },
                                "required": [
                                    "input"
                                ],
                                "type": "object"
                            }
                        }
                    }
                }
            }
        },
        "/ml/models/{id}/predict": {
            "post": {
                "operationId": "Model Prediction",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Execution"
                                },
                                "examples": {
                                    "Example 1": {
                                        "value": {
                                            "input": {
                                                "itemIds": [
                                                    "item1",
                                                    "item2"
                                                ]
                                            },
                                            "serviceConfig": {
                                                "runtime": {
                                                    "podType": "regular-xs",
                                                    "runnerImage": "jjanzic/docker-python3-opencv"
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                },
                "description": "Model Prediction\n\nSupply the resource to perform prediction on\nYou can also supply specific config for the deployed service",
                "tags": [
                    "Models"
                ],
                "security": [],
                "parameters": [
                    {
                        "description": "ID of the Model to train",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "config": {
                                        "properties": {
                                            "serviceId": {
                                                "type": "string"
                                            },
                                            "pipeline": {
                                                "$ref": "#/components/schemas/Dictionary"
                                            },
                                            "serviceConfig": {
                                                "$ref": "#/components/schemas/Dictionary"
                                            }
                                        },
                                        "type": "object",
                                        "description": "Service Configuration"
                                    },
                                    "input": {
                                        "properties": {
                                            "datasetQuery": {
                                                "$ref": "#/components/schemas/Dictionary"
                                            },
                                            "datasetId": {
                                                "type": "string"
                                            },
                                            "itemIds": {
                                                "anyOf": [
                                                    {
                                                        "type": "string"
                                                    },
                                                    {
                                                        "items": {
                                                            "type": "string"
                                                        },
                                                        "type": "array"
                                                    }
                                                ]
                                            }
                                        },
                                        "type": "object",
                                        "description": "Predict input"
                                    }
                                },
                                "required": [
                                    "input"
                                ],
                                "type": "object"
                            }
                        }
                    }
                }
            }
        },
        "/ml/models/{id}/train": {
            "post": {
                "operationId": "Train Model",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Execution"
                                },
                                "examples": {
                                    "Example 1": {
                                        "value": {
                                            "serviceConfig": {
                                                "runtime": {
                                                    "podType": "regular-xs",
                                                    "runnerImage": "jjanzic/docker-python3-opencv"
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                },
                "description": "Train Model\n\nSupply the model id to initiate a training session\nYou can also supply specific config for the deployed service",
                "tags": [
                    "Models"
                ],
                "security": [],
                "parameters": [
                    {
                        "description": "ID of the Model to train",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Service Configuration",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "pipeline": {
                                        "$ref": "#/components/schemas/Dictionary"
                                    },
                                    "serviceConfig": {
                                        "$ref": "#/components/schemas/Dictionary"
                                    }
                                },
                                "type": "object",
                                "description": "Service Configuration"
                            }
                        }
                    }
                }
            }
        },
        "/ontologies": {
            "post": {
                "operationId": "Create Ontology",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "anyOf": [
                                        {
                                            "$ref": "#/components/schemas/APIOntologyV2"
                                        },
                                        {
                                            "$ref": "#/components/schemas/APIOntology"
                                        }
                                    ]
                                }
                            }
                        }
                    }
                },
                "description": "Create a new Ontology",
                "tags": [
                    "Ontologies"
                ],
                "security": [],
                "parameters": [],
                "requestBody": {
                    "description": ": Ontology creation payload",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "anyOf": [
                                    {
                                        "$ref": "#/components/schemas/CreateOntologyPayloadV2"
                                    },
                                    {
                                        "$ref": "#/components/schemas/CreateOntologyPayload"
                                    }
                                ],
                                "description": ": Ontology creation payload"
                            }
                        }
                    }
                },
                "x-codeSamples": [
                    {
                        "lang": "Python",
                        "source": "\nrecipe.ontologies.create(labels='labels_entity',\ntitle='new_ontology',\nproject_ids='project_ids')\n\n# \n# Create a new ontology.\n# \n# **Prerequisites**: You must be in the role of an *owner* or *developer*.\n# \n# :param labels: recipe tags\n# :param str title: ontology title, name\n# :param list project_ids: recipe project/s\n# :param list attributes: recipe attributes\n# :return: Ontology object\n# :rtype: dtlpy.entities.ontology.Ontology\n# \n# "
                    }
                ]
            },
            "get": {
                "operationId": "Find Ontologies",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/APIOntologyCursor"
                                }
                            }
                        }
                    }
                },
                "description": "Find ontologies by query",
                "tags": [
                    "Ontologies"
                ],
                "security": [],
                "parameters": [
                    {
                        "description": "- An array of project IDs",
                        "in": "query",
                        "name": "projects",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    {
                        "description": "- System flag",
                        "in": "query",
                        "name": "system",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "in": "query",
                        "name": "ids",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    {
                        "description": "- The number of pages to skip from the start",
                        "in": "query",
                        "name": "pageOffset",
                        "required": false,
                        "schema": {
                            "format": "double",
                            "type": "number"
                        }
                    },
                    {
                        "description": "- How many ontologies in one page",
                        "in": "query",
                        "name": "pageSize",
                        "required": false,
                        "schema": {
                            "format": "double",
                            "type": "number"
                        }
                    }
                ]
            }
        },
        "/ontologies/{id}": {
            "put": {
                "operationId": "Update Ontology",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "anyOf": [
                                        {
                                            "$ref": "#/components/schemas/APIOntologyV2"
                                        },
                                        {
                                            "$ref": "#/components/schemas/APIOntology"
                                        }
                                    ]
                                }
                            }
                        }
                    }
                },
                "description": "Update an existing Ontology",
                "tags": [
                    "Ontologies"
                ],
                "security": [],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/APIOntologyConfigurationV2"
                            }
                        }
                    }
                },
                "x-codeSamples": [
                    {
                        "lang": "Python",
                        "source": "\nrecipe.ontologies.delete(ontology='ontology_entity')\n# \n# Update the Ontology metadata.\n# \n# **Prerequisites**: You must be in the role of an *owner* or *developer*.\n# \n# :param dtlpy.entities.ontology.Ontology ontology: Ontology object\n# :param bool system_metadata: bool - True, if you want to change metadata system\n# :return: Ontology object\n# :rtype: dtlpy.entities.ontology.Ontology\n# \n# \n# "
                    }
                ]
            },
            "get": {
                "operationId": "Get Ontology",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "anyOf": [
                                        {
                                            "$ref": "#/components/schemas/APIOntologyV2"
                                        },
                                        {
                                            "$ref": "#/components/schemas/APIOntology"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Missing or Invalid id"
                    },
                    "404": {
                        "description": "Ontology not found"
                    }
                },
                "description": "Get a specific Ontology",
                "tags": [
                    "Ontologies"
                ],
                "security": [],
                "parameters": [
                    {
                        "description": ": Ontology ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "x-codeSamples": [
                    {
                        "lang": "Python",
                        "source": "\nrecipe.ontologies.get(ontology_id='ontology_id')\n\n# \n# Get Ontology object to use in your code.\n# \n# **Prerequisites**: You must be in the role of an *owner* or *developer*.\n# \n# :param str ontology_id: ontology id\n# :return: Ontology object\n# :rtype: dtlpy.entities.ontology.Ontology\n# \n# "
                    }
                ]
            },
            "delete": {
                "operationId": "Delete Ontology",
                "responses": {
                    "204": {
                        "description": "No content"
                    }
                },
                "description": "Delete an Ontology",
                "tags": [
                    "Ontologies"
                ],
                "security": [],
                "parameters": [
                    {
                        "description": ": Ontology ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "x-codeSamples": [
                    {
                        "lang": "Python",
                        "source": "\nrecipe.ontologies.delete(ontology_id='ontology_id')\n\n# \n# Delete Ontology from the platform.\n# \n# **Prerequisites**: You must be in the role of an *owner* or *developer*.\n# \n# :param ontology_id: ontology id\n# :return: True if success\n# :rtype: bool\n# \n# "
                    }
                ]
            }
        },
        "/ontologies/{id}/addLabels": {
            "patch": {
                "operationId": "Add Labels",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/APIOntology"
                                }
                            }
                        }
                    }
                },
                "description": "Update an existing Ontology",
                "tags": [
                    "Ontologies"
                ],
                "security": [],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/AddLabelsNodePayload"
                            }
                        }
                    }
                }
            }
        },
        "/ontologies/{id}/attributes": {
            "patch": {
                "operationId": "Update Attributes",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/APIOntology"
                                }
                            }
                        }
                    }
                },
                "description": "Update an existing Ontology",
                "tags": [
                    "Ontologies"
                ],
                "security": [],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpsertRequestPayload_AttributeCreationPayload_"
                            }
                        }
                    }
                }
            },
            "delete": {
                "operationId": "Delete Attributes",
                "responses": {
                    "204": {
                        "description": "No content"
                    }
                },
                "description": "Delete a bulk of attributes",
                "tags": [
                    "Ontologies"
                ],
                "security": [],
                "parameters": [
                    {
                        "description": ": Ontology ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "keys": {
                                        "items": {
                                            "type": "string"
                                        },
                                        "type": "array"
                                    }
                                },
                                "required": [
                                    "keys"
                                ],
                                "type": "object"
                            }
                        }
                    }
                }
            }
        },
        "/ontologies/{id}/labels": {
            "patch": {
                "operationId": "Update Labels",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/APIOntology"
                                }
                            }
                        }
                    }
                },
                "description": "Update an existing Ontology",
                "tags": [
                    "Ontologies"
                ],
                "security": [],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpdateLabelsNodePayload"
                            }
                        }
                    }
                }
            }
        },
        "/ontologies/{ontologyId}/attributes": {
            "post": {
                "operationId": "Create Attribute Section",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/APIAttributeSection"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Attributes"
                ],
                "security": [],
                "parameters": [
                    {
                        "in": "path",
                        "name": "ontologyId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateAttributePayload"
                            }
                        }
                    }
                }
            }
        },
        "/ontologies/{ontologyId}/attributes/query": {
            "post": {
                "operationId": "Query Ontology Attributes",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CursorPage_APIAttributeSection_"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Attributes"
                ],
                "security": [],
                "parameters": [
                    {
                        "in": "path",
                        "name": "ontologyId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/FilterQueryInput"
                            }
                        }
                    }
                }
            }
        },
        "/ontologies/{ontologyId}/attributes/{id}": {
            "patch": {
                "operationId": "Update Attribute Section",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/APIAttributeSection"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Attributes"
                ],
                "security": [],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "path",
                        "name": "ontologyId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/APIUpdateAttributePayload"
                            }
                        }
                    }
                }
            },
            "delete": {
                "operationId": "Delete Attribute Section",
                "responses": {
                    "204": {
                        "description": "No content"
                    }
                },
                "tags": [
                    "Attributes"
                ],
                "security": [],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "path",
                        "name": "ontologyId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/ontologies/{ontologyId}/labels": {
            "post": {
                "operationId": "Create or Update Labels",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/APILabelTreeNodeV2"
                                    },
                                    "type": "array"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Labels"
                ],
                "security": [],
                "parameters": [
                    {
                        "in": "path",
                        "name": "ontologyId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "items": {
                                    "$ref": "#/components/schemas/CreateLabelPayload"
                                },
                                "type": "array"
                            }
                        }
                    }
                }
            },
            "patch": {
                "operationId": "Update Labels",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/APILabelTreeNodeV2"
                                    },
                                    "type": "array"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Labels"
                ],
                "security": [],
                "parameters": [
                    {
                        "in": "path",
                        "name": "ontologyId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "items": {
                                    "$ref": "#/components/schemas/UpdateLabelNodePayload"
                                },
                                "type": "array"
                            }
                        }
                    }
                }
            }
        },
        "/ontologies/{ontologyId}/labels/query": {
            "post": {
                "operationId": "Query Ontology Labels",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CursorPage_APILabelTreeNodeV2_"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Labels"
                ],
                "security": [],
                "parameters": [
                    {
                        "in": "path",
                        "name": "ontologyId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/FilterQueryInput"
                            }
                        }
                    }
                }
            }
        },
        "/ontologies/{ontologyId}/labels/{id}": {
            "delete": {
                "operationId": "DeleteLabel",
                "responses": {
                    "204": {
                        "description": "No content"
                    }
                },
                "tags": [
                    "Labels"
                ],
                "security": [],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "path",
                        "name": "ontologyId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/ontologies/{ontologyId}/structures": {
            "post": {
                "operationId": "Create Structure",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/APIStructure"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Structures"
                ],
                "security": [],
                "parameters": [
                    {
                        "in": "path",
                        "name": "ontologyId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateStructurePayload"
                            }
                        }
                    }
                }
            }
        },
        "/ontologies/{ontologyId}/structures/query": {
            "post": {
                "operationId": "Query Ontology Structures",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CursorPage_APIStructure_"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Structures"
                ],
                "security": [],
                "parameters": [
                    {
                        "in": "path",
                        "name": "ontologyId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/FilterQueryInput"
                            }
                        }
                    }
                }
            }
        },
        "/ontologies/{ontologyId}/structures/{id}": {
            "patch": {
                "operationId": "Update Structure",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/APIStructure"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Structures"
                ],
                "security": [],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "path",
                        "name": "ontologyId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/APIUpdateStructurePayload"
                            }
                        }
                    }
                }
            },
            "delete": {
                "operationId": "Delete Structure",
                "responses": {
                    "204": {
                        "description": "No content"
                    }
                },
                "tags": [
                    "Structures"
                ],
                "security": [],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "path",
                        "name": "ontologyId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/orgs": {
            "get": {
                "operationId": "Find orgs",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/APIOrg"
                                    },
                                    "type": "array"
                                }
                            }
                        }
                    }
                },
                "description": "Get all user's organizations",
                "tags": [
                    "Orgs",
                    "Organizations"
                ],
                "security": [],
                "parameters": [],
                "x-codeSamples": [
                    {
                        "lang": "Python",
                        "source": "\norganizations = dl.organizations.list()\n\n# \n# Lists all the organizations in Dataloop.\n# \n# **Prerequisites**: You must be a **superuser** to use this method.\n# \n# :return: List of Organization objects\n# :rtype: list\n# \n# "
                    }
                ]
            },
            "post": {
                "operationId": "Create org",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/APIOrg"
                                },
                                "examples": {
                                    "Example 1": {
                                        "value": {
                                            "name": "MyNewOrg",
                                            "account": "someAccount"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "description": "Create a new organization",
                "tags": [
                    "Orgs",
                    "Organizations"
                ],
                "security": [],
                "parameters": [],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "logoUrl": {
                                        "type": "string"
                                    },
                                    "industry": {
                                        "$ref": "#/components/schemas/OrgIndustry"
                                    },
                                    "size": {
                                        "$ref": "#/components/schemas/OrgSize"
                                    },
                                    "account": {
                                        "type": "string"
                                    },
                                    "name": {
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "name"
                                ],
                                "type": "object"
                            }
                        }
                    }
                }
            }
        },
        "/orgs/{orgId}": {
            "get": {
                "operationId": "Find org",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/APIOrg"
                                }
                            }
                        }
                    }
                },
                "description": "Find an organization by id",
                "tags": [
                    "Orgs",
                    "Organizations"
                ],
                "security": [],
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "x-codeSamples": [
                    {
                        "lang": "Python",
                        "source": "\norg = dl.organizations.get(organization_id='organization_id')\n\n# \n# Get Organization object to be able to use it in your code.\n# \n# **Prerequisites**: You must be a **superuser** to use this method.\n# \n# You must provide at least ONE of the following params: organization_name or organization_id.\n# \n# :param str organization_id: optional - search by id\n# :param str organization_name: optional - search by name\n# :param fetch: optional - fetch entity from platform, default taken from cookie\n# :return: Organization object\n# :rtype: dtlpy.entities.organization.Organization\n# \n# "
                    }
                ]
            },
            "delete": {
                "operationId": "Delete org",
                "responses": {
                    "204": {
                        "description": "No content"
                    }
                },
                "description": "Delete an organization",
                "tags": [
                    "Orgs",
                    "Organizations"
                ],
                "security": [],
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "patch": {
                "operationId": "Patch org",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/APIOrg"
                                },
                                "examples": {
                                    "Example 1": {
                                        "value": {
                                            "name": "NewOrgName"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "description": "Change an organization's name",
                "tags": [
                    "Orgs",
                    "Organizations"
                ],
                "security": [],
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "name": {
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "name"
                                ],
                                "type": "object"
                            }
                        }
                    }
                }
            }
        },
        "/orgs/{orgId}/accounts": {
            "get": {
                "operationId": "Get org accounts",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/APIAccount"
                                    },
                                    "type": "array"
                                }
                            }
                        }
                    }
                },
                "description": "Get the organization's account",
                "tags": [
                    "Orgs",
                    "Organizations"
                ],
                "security": [],
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/orgs/{orgId}/accounts/{accountId}": {
            "post": {
                "operationId": "Add account to org",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/APIOrg"
                                },
                                "examples": {
                                    "Example 1": {
                                        "value": {
                                            "accountId": "newAccountId"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "description": "Add an account to an organization",
                "tags": [
                    "Orgs",
                    "Organizations"
                ],
                "security": [],
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "path",
                        "name": "accountId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "delete": {
                "operationId": "Remove account from org",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/APIOrg"
                                }
                            }
                        }
                    }
                },
                "description": "Remove an account from an organization",
                "tags": [
                    "Orgs",
                    "Organizations"
                ],
                "security": [],
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "path",
                        "name": "accountId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/orgs/{orgId}/availableIntegrations": {
            "get": {
                "operationId": "Get available integrations",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "anyOf": [
                                            {
                                                "properties": {
                                                    "options": {
                                                        "items": {
                                                            "properties": {
                                                                "required": {
                                                                    "type": "boolean"
                                                                },
                                                                "displayName": {
                                                                    "type": "string"
                                                                },
                                                                "type": {
                                                                    "type": "string"
                                                                },
                                                                "name": {
                                                                    "type": "string"
                                                                }
                                                            },
                                                            "required": [
                                                                "required",
                                                                "displayName",
                                                                "type",
                                                                "name"
                                                            ],
                                                            "type": "object"
                                                        },
                                                        "type": "array"
                                                    },
                                                    "displayName": {
                                                        "type": "string"
                                                    },
                                                    "type": {
                                                        "$ref": "#/components/schemas/IntegrationType"
                                                    }
                                                },
                                                "required": [
                                                    "options",
                                                    "displayName",
                                                    "type"
                                                ],
                                                "type": "object"
                                            },
                                            {
                                                "properties": {
                                                    "options": {
                                                        "items": {
                                                            "properties": {
                                                                "required": {
                                                                    "type": "boolean"
                                                                },
                                                                "displayName": {
                                                                    "type": "string"
                                                                },
                                                                "type": {
                                                                    "type": "string"
                                                                },
                                                                "name": {
                                                                    "type": "string"
                                                                }
                                                            },
                                                            "required": [
                                                                "required",
                                                                "displayName",
                                                                "type",
                                                                "name"
                                                            ],
                                                            "type": "object"
                                                        },
                                                        "type": "array"
                                                    },
                                                    "iconUrl": {
                                                        "type": "string"
                                                    },
                                                    "displayName": {
                                                        "type": "string"
                                                    },
                                                    "type": {
                                                        "type": "string"
                                                    }
                                                },
                                                "required": [
                                                    "options",
                                                    "iconUrl",
                                                    "displayName",
                                                    "type"
                                                ],
                                                "type": "object"
                                            }
                                        ]
                                    },
                                    "type": "array"
                                }
                            }
                        }
                    }
                },
                "description": "List all type of integrations available for the organization to create",
                "tags": [
                    "Orgs",
                    "Organizations"
                ],
                "security": [],
                "parameters": []
            }
        },
        "/orgs/{orgId}/groups": {
            "get": {
                "operationId": "Get org groups",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/APIGroup"
                                    },
                                    "type": "array"
                                }
                            }
                        }
                    }
                },
                "description": "Get all organization groups",
                "tags": [
                    "Orgs",
                    "Organizations"
                ],
                "security": [],
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/orgs/{orgId}/integrations": {
            "get": {
                "operationId": "Get org integrations",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/APIIntegration"
                                    },
                                    "type": "array"
                                }
                            }
                        }
                    }
                },
                "description": "Get all organization's integrations",
                "tags": [
                    "Integrations"
                ],
                "security": [],
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "x-codeSamples": [
                    {
                        "lang": "Python",
                        "source": "\nproject.integrations.list(only_available=True)\n\n# \n# List all the organization's integrations with external storage.\n# \n# **Prerequisites**: You must be an *owner* in the organization.\n# \n# :param bool only_available: if True list only the available integrations.\n# :return: groups list\n# :rtype: list\n# \n# "
                    }
                ]
            },
            "post": {
                "operationId": "Create integration",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/APIIntegration"
                                },
                                "examples": {
                                    "Example 1": {
                                        "value": {
                                            "type": "azureblob",
                                            "name": "My Azure Blob Integration",
                                            "options": {
                                                "clientId": "someClientId",
                                                "secret": "someClientSecret",
                                                "key": "someKey",
                                                "tenantId": "someTenant"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "description": "Create a new Integration",
                "tags": [
                    "Integrations"
                ],
                "security": [],
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "options": {
                                        "$ref": "#/components/schemas/Dictionary"
                                    },
                                    "name": {
                                        "type": "string"
                                    },
                                    "type": {
                                        "$ref": "#/components/schemas/INTEGRATION_TYPE"
                                    }
                                },
                                "required": [
                                    "options",
                                    "name",
                                    "type"
                                ],
                                "type": "object"
                            }
                        }
                    }
                },
                "x-codeSamples": [
                    {
                        "lang": "Python",
                        "source": "\nproject.integrations.create(integrations_type=dl.IntegrationType.S3,\nname='S3ntegration',\noptions={key: \"Access key ID\", secret: \"Secret access key\"})\n\n# \n# Create an integration between an external storage and the organization.\n# \n# **Examples for options include**:\n# s3 - {key: \"\", secret: \"\"};\n# gcs - {key: \"\", secret: \"\", content: \"\"};\n# azureblob - {key: \"\", secret: \"\", clientId: \"\", tenantId: \"\"};\n# key_value - {key: \"\", value: \"\"}\n# aws-sts - {key: \"\", secret: \"\", roleArns: \"\"}\n# aws-cross - {}\n# gcp-cross - {}\n# \n# **Prerequisites**: You must be an *owner* in the organization.\n# \n# :param IntegrationType integrations_type: integrations type dl.IntegrationType\n# :param str name: integrations name\n# :param dict options: dict of storage secrets\n# :return: success\n# :rtype: bool\n# \n# "
                    }
                ]
            },
            "patch": {
                "operationId": "Update integration",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/APIIntegration"
                                },
                                "examples": {
                                    "Example 1": {
                                        "value": {
                                            "integrationId": "someIntegrationId",
                                            "credentials": {
                                                "type": "azureblob",
                                                "options": {
                                                    "clientId": "newClientId"
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "description": "update an existing integration configuration",
                "tags": [
                    "Integrations"
                ],
                "security": [],
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/IntegrationBody"
                            }
                        }
                    }
                },
                "x-codeSamples": [
                    {
                        "lang": "Python",
                        "source": "\nproject.integrations.update(integrations_id='integrations_id', new_options={roleArn: \"\"})\n\n# \n# Update the integration's name.\n# \n# **Prerequisites**: You must be an *owner* in the organization.\n# \n# :param str new_name: new name\n# :param str integrations_id: integrations id\n# :param Integration integration: integration object\n# :param dict new_options: new value\n# :return: Integration object\n# :rtype: dtlpy.entities.integration.Integration\n# \n# **Examples for options include**:\n# s3 - {key: \"\", secret: \"\"};\n# gcs - {key: \"\", secret: \"\", content: \"\"};\n# azureblob - {key: \"\", secret: \"\", clientId: \"\", tenantId: \"\"};\n# key_value - {key: \"\", value: \"\"}\n# aws-sts - {key: \"\", secret: \"\", roleArns: \"\"}\n# aws-cross - {roleArn: \"\"}\n# gcp-cross - {\"email: \"\", \"resourceName\": \"\"}\n# \n# "
                    }
                ]
            }
        },
        "/orgs/{orgId}/integrations/{integrationId}": {
            "get": {
                "operationId": "Get integration",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/APIIntegration"
                                }
                            }
                        }
                    }
                },
                "description": "get a specific integration information",
                "tags": [
                    "Integrations"
                ],
                "security": [],
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "path",
                        "name": "integrationId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "x-codeSamples": [
                    {
                        "lang": "Python",
                        "source": "\nproject.integrations.get(integrations_id='integrations_id')\n\n# \n# Get organization integrations. Use this method to access your integration and be able to use it in your code.\n# \n# **Prerequisites**: You must be an *owner* in the organization.\n# \n# :param str integrations_id: integrations id\n# :return: Integration object\n# :rtype: dtlpy.entities.integration.Integration\n# \n# "
                    }
                ]
            },
            "delete": {
                "operationId": "Remove integration",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/APIIntegration"
                                    },
                                    "type": "array"
                                }
                            }
                        }
                    }
                },
                "description": "Delete an integration",
                "tags": [
                    "Integrations"
                ],
                "security": [],
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "path",
                        "name": "integrationId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "x-codeSamples": [
                    {
                        "lang": "Python",
                        "source": "\nproject.integrations.delete(integrations_id='integrations_id', sure=True, really=True)\n\n# \n# Delete integrations from the organization.\n# \n# **Prerequisites**: You must be an organization *owner* to delete an integration.\n# \n# :param str integrations_id: integrations id\n# :param bool sure: Are you sure you want to delete?\n# :param bool really: Really really sure?\n# :return: success\n# :rtype: bool\n# \n# "
                    }
                ]
            }
        },
        "/orgs/{orgId}/members": {
            "get": {
                "operationId": "Get org members",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/APIUser"
                                    },
                                    "type": "array"
                                }
                            }
                        }
                    }
                },
                "description": "Get all organization members",
                "tags": [
                    "Orgs",
                    "Organizations"
                ],
                "security": [],
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "x-codeSamples": [
                    {
                        "lang": "Python",
                        "source": "\nlist_members = dl.organizations.list_members(organization='organization-entity',\nrole=dl.MemberOrgRole.MEMBER)\n\n# \n# List all organization members.\n# \n# **Prerequisites**: You must be an organization *owner* to use this method.\n# \n# You must provide at least ONE of the following params: organization_id, organization_name, or organization.\n# \n# :param entities.Organization organization: Organization object\n# :param str organization_id: Organization id\n# :param str organization_name: Organization name\n# :param entities.MemberOrgRole role: MemberOrgRole.ADMIN, MemberOrgRole.OWNER, MemberOrgRole.MEMBER, MemberOrgRole.WORKER\n# :return: projects list\n# :rtype: list\n# \n# "
                    }
                ]
            },
            "post": {
                "operationId": "Add org members",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/APIOrgUser"
                                    },
                                    "type": "array"
                                },
                                "examples": {
                                    "Example 1": {
                                        "value": {
                                            "emails": [
                                                "userToAdd@1.com",
                                                "userToAdd@2.com"
                                            ],
                                            "role": "member"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "description": "Add a new member to an organization",
                "tags": [
                    "Orgs",
                    "Organizations"
                ],
                "security": [],
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "role": {
                                        "$ref": "#/components/schemas/OrgRole"
                                    },
                                    "emails": {
                                        "items": {
                                            "type": "string"
                                        },
                                        "type": "array"
                                    }
                                },
                                "required": [
                                    "role",
                                    "emails"
                                ],
                                "type": "object"
                            }
                        }
                    }
                },
                "x-codeSamples": [
                    {
                        "lang": "Python",
                        "source": "\nsuccess = dl.organizations.add_member(email='user@domain.com',\norganization_id='organization_id',\nrole=dl.MemberOrgRole.MEMBER)\n\n# \n# Add members to your organization. Read about members and groups `here <https://docs.dataloop.ai/docs/org-members-groups>`_.\n# \n# **Prerequisities**: To add members to an organization, you must be an *owner* in that organization.\n# \n# You must provide at least ONE of the following params: organization, organization_name, or organization_id.\n# \n# :param str email: the member's email\n# :param str role: MemberOrgRole.ADMIN, MemberOrgRole.OWNER, MemberOrgRole.MEMBER, MemberOrgRole.WORKER\n# :param str organization_id: Organization id\n# :param str organization_name: Organization name\n# :param entities.Organization organization: Organization object\n# :return: True if successful or error if unsuccessful\n# :rtype: bool\n# \n# "
                    }
                ]
            },
            "patch": {
                "operationId": "Patch org member",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/APIUser"
                                    },
                                    "type": "array"
                                },
                                "examples": {
                                    "Example 1": {
                                        "value": {
                                            "email": "userEmail@test.com",
                                            "role": "member"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "description": "Change a member's role in an organization",
                "tags": [
                    "Orgs",
                    "Organizations"
                ],
                "security": [],
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "default_project_role": {
                                        "$ref": "#/components/schemas/Role"
                                    },
                                    "role": {
                                        "$ref": "#/components/schemas/OrgRole"
                                    },
                                    "email": {
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "role",
                                    "email"
                                ],
                                "type": "object"
                            }
                        }
                    }
                },
                "x-codeSamples": [
                    {
                        "lang": "Python",
                        "source": "\nmember_json = dl.organizations.update_member(email='user@domain.com',\norganization_id='organization_id',\nrole=dl.MemberOrgRole.MEMBER)\n\n# \n# Update member role.\n# \n# **Prerequisites**: You must be an organization *owner* to update a member's role.\n# \n# You must provide at least ONE of the following params: organization, organization_name, or organization_id.\n# \n# :param str email: the member's email\n# :param str role: MemberOrgRole.ADMIN, MemberOrgRole.OWNER, MemberOrgRole.MEMBER, MemberOrgRole.WORKER\n# :param str organization_id: Organization id\n# :param str organization_name: Organization name\n# :param entities.Organization organization: Organization object\n# :return: json of the member fields\n# :rtype: dict\n# \n# "
                    }
                ]
            }
        },
        "/orgs/{orgId}/members/{memberId}": {
            "delete": {
                "operationId": "Remove org member",
                "responses": {
                    "204": {
                        "description": "No content"
                    }
                },
                "description": "Remove a member from an organization",
                "tags": [
                    "Orgs",
                    "Organizations"
                ],
                "security": [],
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "path",
                        "name": "memberId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "x-codeSamples": [
                    {
                        "lang": "Python",
                        "source": "\nsuccess = dl.organizations.delete_member(user_id='user_id',\norganization_id='organization_id',\nsure=True,\nreally=True)\n\n# \n# Delete member from the Organization.\n# \n# **Prerequisites**: Must be an organization *owner* to delete members.\n# \n# You must provide at least ONE of the following params: organization_id, organization_name, organization.\n# \n# :param str user_id: user id\n# :param str organization_id: Organization id\n# :param str organization_name: Organization name\n# :param entities.Organization organization: Organization object\n# :param bool sure: Are you sure you want to delete?\n# :param bool really: Really really sure?\n# :return: True if success and error if not\n# :rtype: bool\n# \n# "
                    }
                ]
            }
        },
        "/orgs/{orgId}/members/{userId}/projects": {
            "get": {
                "operationId": "Get Member Projects",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/APIProject"
                                    },
                                    "type": "array"
                                }
                            }
                        }
                    }
                },
                "description": "List all projects of a given organization member",
                "tags": [
                    "Orgs",
                    "Organizations"
                ],
                "security": [],
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "path",
                        "name": "userId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "excludeContributors",
                        "required": false,
                        "schema": {
                            "default": false,
                            "type": "boolean"
                        }
                    }
                ]
            }
        },
        "/orgs/{orgId}/members/{userId}/related": {
            "get": {
                "operationId": "Is Org Member Related To Projects",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "boolean"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Orgs",
                    "Organizations"
                ],
                "security": [],
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "path",
                        "name": "userId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "excludeContributors",
                        "required": false,
                        "schema": {
                            "default": false,
                            "type": "boolean"
                        }
                    }
                ]
            }
        },
        "/orgs/{orgId}/plan": {
            "patch": {
                "operationId": "Update org plan",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/APIOrg"
                                }
                            }
                        }
                    }
                },
                "description": "Update an organization's plan",
                "tags": [
                    "Orgs",
                    "Organizations"
                ],
                "security": [],
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "plan": {
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "plan"
                                ],
                                "type": "object"
                            }
                        }
                    }
                }
            }
        },
        "/orgs/{orgId}/projects": {
            "get": {
                "operationId": "Get Org Projects",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/APIProject"
                                    },
                                    "type": "array"
                                }
                            }
                        }
                    }
                },
                "description": "Get all organization projects",
                "tags": [
                    "Orgs",
                    "Organizations"
                ],
                "security": [],
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/packages": {
            "get": {
                "operationId": "Packages_listPackages",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PackagesPage"
                                }
                            }
                        }
                    }
                },
                "description": "",
                "tags": [
                    "Packages"
                ],
                "parameters": [
                    {
                        "description": "",
                        "in": "query",
                        "name": "projects",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "",
                        "in": "query",
                        "name": "name",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "",
                        "in": "query",
                        "name": "creator",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "",
                        "in": "query",
                        "name": "pageOffset",
                        "required": false,
                        "schema": {
                            "type": "number",
                            "format": "double"
                        }
                    },
                    {
                        "description": "",
                        "in": "query",
                        "name": "pageSize",
                        "required": false,
                        "schema": {
                            "type": "number",
                            "format": "double"
                        }
                    }
                ]
            },
            "post": {
                "operationId": "Packages_createPackage",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/APIPackage"
                                }
                            }
                        }
                    }
                },
                "description": "Create new package.",
                "tags": [
                    "Packages"
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/APIPackage"
                },
                "x-codeSamples": [
                    {
                        "lang": "Python",
                        "source": "\nproject.packages.push(package_name='package_name',\nmodules=[module],\nversion='1.0.0',\nsrc_path=os.getcwd()\n)\n\n# \n# Push your local package to the UI.\n# \n# **Prerequisites**: You must be in the role of an *owner* or *developer*.\n# \n# Project will be taken in the following hierarchy:\n# project(input) -> project_id(input) -> self.project(context) -> checked out\n# \n# :param dtlpy.entities.project.Project project: optional - project entity to deploy to. default from context or checked-out\n# :param str project_id: optional - project id to deploy to. default from context or checked-out\n# :param str package_name: package name\n# :param str src_path: path to package codebase\n# :param dtlpy.entities.codebase.Codebase codebase: codebase object\n# :param list modules: list of modules PackageModules of the package\n# :param bool is_global: is package is global or local\n# :param bool checkout: checkout package to local dir\n# :param str revision_increment: optional - str - version bumping method - major/minor/patch - default = None\n# :param str version: semver version f the package\n# :param bool ignore_sanity_check: NOT RECOMMENDED - skip code sanity check before pushing\n# :param bool service_update: optional - bool - update the service\n# :param dict service_config : Service object as dict. Contains the spec of the default service to create.\n# :param list slots: optional - list of slots PackageSlot of the package\n# :param list requirements: requirements - list of package requirements\n# :param str package_type: default 'faas', options: 'app', 'ml\n# :param dict metadata: dictionary of system and user metadata\n# \n# :return: Package object\n# :rtype: dtlpy.entities.package.Package\n# \n# "
                    }
                ]
            }
        },
        "/packages/{ids}": {
            "delete": {
                "operationId": "Packages_deletePackages",
                "responses": {
                    "204": {
                        "description": "No content"
                    }
                },
                "description": "Delete Package object.",
                "tags": [
                    "Packages"
                ],
                "parameters": [
                    {
                        "description": "List of Package id.",
                        "in": "path",
                        "name": "ids",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "x-codeSamples": [
                    {
                        "lang": "Python",
                        "source": "\nproject.packages.delete(package_name='package_name')\n\n# \n# Delete a Package object.\n# \n# **Prerequisites**: You must be in the role of an *owner* or *developer*.\n# \n# :param dtlpy.entities.package.Package package: package entity\n# :param str package_id: package id\n# :param str package_name: package name\n# :return: True if success\n# :rtype: bool\n# \n# "
                    }
                ]
            }
        },
        "/packages/{id}": {
            "get": {
                "operationId": "Packages_getPackage",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/APIPackage"
                                }
                            }
                        }
                    }
                },
                "description": "Get package by id.",
                "tags": [
                    "Packages"
                ],
                "parameters": [
                    {
                        "description": "Package id",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "The package version",
                        "in": "query",
                        "name": "version",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "x-codeSamples": [
                    {
                        "lang": "Python",
                        "source": "\nproject.packages.get(package_id='package_id')\n\n# \n# Get Package object to use in your code.\n# \n# **Prerequisites**: You must be in the role of an *owner* or *developer*.\n# \n# :param str package_id: package id\n# :param str package_name: package name\n# :param bool checkout: set the package as a default package object (cookies)\n# :param fetch: optional - fetch entity from platform, default taken from cookie\n# :return: Package object\n# :rtype: dtlpy.entities.package.Package\n# \n# "
                    }
                ]
            },
            "patch": {
                "operationId": "Packages_updatePackage",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/APIPackage"
                                }
                            }
                        }
                    }
                },
                "description": "Update package changes.",
                "tags": [
                    "Packages"
                ],
                "parameters": [
                    {
                        "description": "package id.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/APIPackage"
                },
                "x-codeSamples": [
                    {
                        "lang": "Python",
                        "source": "\nproject.packages.delete(package='package_entity')\n\n# \n# Update Package changes to the platform.\n# \n# **Prerequisites**: You must be in the role of an *owner* or *developer*.\n# \n# :param dtlpy.entities.package.Package package:\n# :param revision_increment: optional - str - version bumping method - major/minor/patch - default = None\n# :return: Package object\n# :rtype: dtlpy.entities.package.Package\n# \n# "
                    }
                ]
            }
        },
        "/packages/{id}/revisions": {
            "get": {
                "operationId": "Packages_getPackageRevisions",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/APIPackage"
                                    }
                                }
                            }
                        }
                    }
                },
                "description": "Get package revisions by id.",
                "tags": [
                    "Packages"
                ],
                "parameters": [
                    {
                        "description": "package id.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "x-codeSamples": [
                    {
                        "lang": "Python",
                        "source": "\nproject.packages.revisions(package='package_entity')\n\n# \n# Get the package revision history.\n# \n# **Prerequisites**: You must be in the role of an *owner* or *developer*.\n# \n# :param dtlpy.entities.package.Package package: package entity\n# :param str package_id: package id\n# \n# "
                    }
                ]
            }
        },
        "/pipelines": {
            "post": {
                "operationId": "Pipeline_create",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/APIPipeline"
                                }
                            }
                        }
                    }
                },
                "description": "Create a pipeline.",
                "tags": [
                    "pipelines"
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/IPostPipeline"
                },
                "x-codeSamples": [
                    {
                        "lang": "Python",
                        "source": "\npipeline = project.pipelines.create(name='pipeline_name')\n\n# \n# Create a new pipeline.\n# \n# **prerequisites**: You must be an *owner* or *developer* to use this method.\n# \n# :param str name: pipeline name\n# :param str project_id: project id\n# :param dict pipeline_json: json containing the pipeline fields\n# :return: Pipeline object\n# :rtype: dtlpy.entities.pipeline.Pipeline\n# \n# "
                    }
                ]
            }
        },
        "/pipelines/query": {
            "post": {
                "operationId": "Query_query",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CursorPageT"
                                }
                            }
                        }
                    }
                },
                "description": "",
                "tags": [
                    "pipelines/query"
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/QueryString"
                },
                "x-codeSamples": [
                    {
                        "lang": "Python",
                        "source": "\npipeline_executions = pipeline.pipeline_executions.list()\n\n# \n# List project pipeline executions.\n# \n# **prerequisites**: You must be an *owner* or *developer* to use this method.\n# \n# :param dtlpy.entities.filters.Filters filters: Filters entity or a dictionary containing filters parameters\n# :return: Paged entity\n# :rtype: dtlpy.entities.paged_entities.PagedEntities\n# \n# "
                    }
                ]
            }
        },
        "/pipelines/query/table": {
            "post": {
                "operationId": "Query_queryPipelineTable",
                "responses": {
                    "204": {
                        "description": "No content"
                    }
                },
                "description": "",
                "tags": [
                    "pipelines/query"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                }
            }
        },
        "/pipelines/templates/": {
            "post": {
                "operationId": "PipelineTemplates_create",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/APIPipeline"
                                }
                            }
                        }
                    }
                },
                "description": "",
                "tags": [
                    "pipelines/templates"
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/IPostPipeline"
                }
            }
        },
        "/pipelines/templates/query": {
            "post": {
                "operationId": "PipelineTemplates_query",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/APITemplateQuery"
                                }
                            }
                        }
                    }
                },
                "description": "",
                "tags": [
                    "pipelines/templates"
                ],
                "parameters": [
                    {
                        "description": "",
                        "in": "query",
                        "name": "projectId",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/TemplateQuery"
                            }
                        }
                    },
                    "required": true
                }
            }
        },
        "/pipelines/{id}/statistics": {
            "get": {
                "operationId": "Pipeline_getStatistics",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IPipelineStatistics"
                                }
                            }
                        }
                    }
                },
                "description": "Get pipeline counters.",
                "tags": [
                    "pipelines"
                ],
                "parameters": [
                    {
                        "description": "pipeline id.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "x-codeSamples": [
                    {
                        "lang": "Python",
                        "source": "\npipeline_stats = project.pipelines.stats(pipeline='pipeline_entity')\n\n# \n# Get pipeline counters.\n# \n# **prerequisites**: You must be an *owner* or *developer* to use this method.\n# \n# :param dtlpy.entities.pipeline.Pipeline pipeline: pipeline entity - optional\n# :param str pipeline_id: pipeline_id -  optional\n# :param str pipeline_name: pipeline_name -  optional\n# :return: PipelineStats\n# :rtype: dtlpy.entities.pipeline.PipelineStats\n# \n# "
                    }
                ]
            }
        },
        "/pipelines/{pipelineId}": {
            "get": {
                "operationId": "Pipeline_get",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/APIPipeline"
                                }
                            }
                        }
                    }
                },
                "description": "Get pipeline by id.",
                "tags": [
                    "pipelines"
                ],
                "parameters": [
                    {
                        "description": "pipeline id.",
                        "in": "path",
                        "name": "pipelineId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "x-codeSamples": [
                    {
                        "lang": "Python",
                        "source": "\npipeline = project.pipelines.get(pipeline_id='pipeline_id')\n\n# \n# Get Pipeline object to use in your code.\n# \n# **prerequisites**: You must be an *owner* or *developer* to use this method.\n# \n# You must provide at least ONE of the following params: pipeline_name, pipeline_id.\n# \n# :param str pipeline_id: pipeline id\n# :param str pipeline_name: pipeline name\n# :param fetch: optional - fetch entity from platform, default taken from cookie\n# :return: Pipeline object\n# :rtype: dtlpy.entities.pipeline.Pipeline\n# \n# "
                    }
                ]
            },
            "patch": {
                "operationId": "Pipeline_update",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/APIPipeline"
                                }
                            }
                        }
                    }
                },
                "description": "Update pipeline changes.",
                "tags": [
                    "pipelines"
                ],
                "parameters": [
                    {
                        "description": "pipeline id.",
                        "in": "path",
                        "name": "pipelineId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/IPostPipeline"
                },
                "x-codeSamples": [
                    {
                        "lang": "Python",
                        "source": "\npipeline = project.pipelines.update(pipeline='pipeline_entity')\n\n# \n# Update pipeline changes to platform.\n# \n# **prerequisites**: You must be an *owner* or *developer* to use this method.\n# \n# :param dtlpy.entities.pipeline.Pipeline pipeline: pipeline entity\n# :return: Pipeline object\n# :rtype: dtlpy.entities.pipeline.Pipeline\n# \n# "
                    }
                ]
            }
        },
        "/pipelines/{pipelineId}/execute": {
            "post": {
                "operationId": "Pipeline_execute",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "text/html": {
                                "schema": {
                                    "enum": [
                                        "APIPipelineState",
                                        "APICommand"
                                    ],
                                    "type": "string"
                                }
                            }
                        }
                    }
                },
                "description": "Execute a pipeline and return the pipeline execution as an object - or command in case batch is defined on the body.",
                "tags": [
                    "pipelines"
                ],
                "parameters": [
                    {
                        "description": "pipeline id.",
                        "in": "path",
                        "name": "pipelineId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ExecuteOptions"
                            }
                        }
                    },
                    "required": true
                },
                "x-codeSamples": [
                    {
                        "lang": "Python",
                        "source": "\ncommand = pipeline.pipeline_executions.create_batch(\nexecution_inputs=dl.FunctionIO(type=dl.PackageInputType.STRING, value='test', name='string'),\nfilters=dl.Filters(field='dir', values='/test'))\n\n# \n# Execute a pipeline and return the execute.\n# \n# **prerequisites**: You must be an *owner* or *developer* to use this method.\n# \n# :param pipeline_id: pipeline id\n# :param filters: Filters entity for a filtering before execute\n# :param execution_inputs: list of the dl.FunctionIO or dict of pipeline input - example {'item': 'item_id'}\n# :param bool wait: wait until create task finish\n# :return: entities.PipelineExecution object\n# :rtype: dtlpy.entities.pipeline_execution.PipelineExecution\n# \n# "
                    }
                ]
            }
        },
        "/pipelines/{pipelineId}/executions": {
            "get": {
                "operationId": "PipelineExecution_executions",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CursorPageAPIPipelineState"
                                }
                            }
                        }
                    }
                },
                "description": "",
                "tags": [
                    "pipelines"
                ],
                "parameters": [
                    {
                        "description": "",
                        "in": "query",
                        "name": "filter",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "",
                        "in": "query",
                        "name": "sort",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "",
                        "in": "query",
                        "name": "page",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "",
                        "in": "query",
                        "name": "pageSize",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "",
                        "in": "path",
                        "name": "pipelineId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/pipelines/{pipelineId}/executions/rerun": {
            "post": {
                "operationId": "PipelineExecution_rerun",
                "responses": {
                    "204": {
                        "description": "No content"
                    }
                },
                "description": "",
                "tags": [
                    "pipelines"
                ],
                "parameters": [
                    {
                        "description": "",
                        "in": "path",
                        "name": "pipelineId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/IRerunCycleBatchOptions"
                            }
                        }
                    },
                    "required": true
                },
                "x-codeSamples": [
                    {
                        "lang": "Python",
                        "source": "\npipeline.pipeline_executions.rerun(pipeline_id='pipeline_id', method=dl.CycleRerunMethod.START_FROM_BEGINNING)\n\n# \n# Get Pipeline Execution object\n# \n# **prerequisites**: You must be an *owner* or *developer* to use this method.\n# \n# :param str pipeline_id: pipeline id\n# :param str method: method to run\n# :param list start_nodes_ids: list of start nodes ids\n# :param filters: Filters entity for a filtering before execute\n# :param bool wait: wait until rerun finish\n# :return: True if success\n# :rtype: bool\n# \n# "
                    }
                ]
            }
        },
        "/pipelines/{pipelineId}/install": {
            "post": {
                "operationId": "Pipeline_install",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/APIPipeline"
                                }
                            }
                        }
                    }
                },
                "description": "",
                "tags": [
                    "pipelines"
                ],
                "parameters": [
                    {
                        "description": "",
                        "in": "path",
                        "name": "pipelineId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "resumeOption": {
                                        "enum": [
                                            "terminateExistingCycles",
                                            "resumeExistingCycles"
                                        ],
                                        "type": "string",
                                        "description": ""
                                    }
                                }
                            }
                        }
                    },
                    "required": true
                },
                "x-codeSamples": [
                    {
                        "lang": "Python",
                        "source": "\nproject.pipelines.install(pipeline='pipeline_entity')\n\n# \n# Install (start) a pipeline.\n# \n# **prerequisites**: You must be an *owner* or *developer* to use this method.\n# \n# :param dtlpy.entities.pipeline.Pipeline pipeline: pipeline entity\n# :param dtlpy.entities.pipeline.PipelineResumeOption resume_option: optional - resume pipeline method (what to do with existing cycles)\n# :return: Composition object\n# \n# "
                    }
                ]
            }
        },
        "/pipelines/{pipelineId}/nodes/{nodeId}": {
            "get": {
                "operationId": "Pipeline_getNode",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NodeDescriptor"
                                }
                            }
                        }
                    }
                },
                "description": "get one of pipeline nodes by pipeline id and node id.",
                "tags": [
                    "pipelines"
                ],
                "parameters": [
                    {
                        "description": "pipeline id.",
                        "in": "path",
                        "name": "pipelineId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "",
                        "in": "path",
                        "name": "nodeId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/pipelines/{pipelineId}/purge": {
            "post": {
                "operationId": "Pipeline_purge",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Boolean"
                                }
                            }
                        }
                    }
                },
                "description": "",
                "tags": [
                    "pipelines"
                ],
                "parameters": [
                    {
                        "description": "",
                        "in": "path",
                        "name": "pipelineId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/pipelines/{pipelineId}/reset": {
            "post": {
                "operationId": "Pipeline_reset",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/APIPipeline"
                                }
                            }
                        }
                    }
                },
                "description": "Reset pipeline counters.",
                "tags": [
                    "pipelines"
                ],
                "parameters": [
                    {
                        "description": "pipeline id.",
                        "in": "path",
                        "name": "pipelineId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "x-codeSamples": [
                    {
                        "lang": "Python",
                        "source": "\nsuccess = project.pipelines.reset(pipeline='pipeline_entity')\n\n# \n# Reset pipeline counters.\n# \n# **prerequisites**: You must be an *owner* or *developer* to use this method.\n# \n# :param dtlpy.entities.pipeline.Pipeline pipeline: pipeline entity - optional\n# :param str pipeline_id: pipeline_id -  optional\n# :param str pipeline_name: pipeline_name -  optional\n# :param bool stop_if_running: If the pipeline is installed it will stop the pipeline and reset the counters.\n# :return: bool\n# \n# "
                    }
                ]
            }
        },
        "/pipelines/{pipelineId}/settings": {
            "patch": {
                "operationId": "Pipeline_updateSettings",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/APIPipeline"
                                }
                            }
                        }
                    }
                },
                "description": "",
                "tags": [
                    "pipelines"
                ],
                "parameters": [
                    {
                        "description": "",
                        "in": "path",
                        "name": "pipelineId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/IPipelineSettings"
                            }
                        }
                    },
                    "required": true
                },
                "x-codeSamples": [
                    {
                        "lang": "Python",
                        "source": "\npipeline = project.pipelines.update_settings(pipeline='pipeline_entity', settings=dl.PipelineSettings(keep_triggers_active=True))\n\n# \n# Update pipeline settings.\n# \n# **prerequisites**: You must be an *owner* or *developer* to use this method.\n# \n# :param dtlpy.entities.pipeline.Pipeline pipeline: pipeline entity\n# :param dtlpy.entities.pipeline.PipelineSettings settings: settings entity\n# :return: Pipeline object\n# :rtype: dtlpy.entities.pipeline.Pipeline\n# \n# "
                    }
                ]
            }
        },
        "/pipelines/{pipelineId}/terminate": {
            "delete": {
                "operationId": "Pipeline_terminate",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "text/html": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                },
                "description": "Delete the pipeline, should terminate the composition.",
                "tags": [
                    "pipelines"
                ],
                "parameters": [
                    {
                        "description": "pipeline id.",
                        "in": "path",
                        "name": "pipelineId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/pipelines/{pipelineId}/uninstall": {
            "post": {
                "operationId": "Pipeline_uninstall",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/APIPipeline"
                                }
                            }
                        }
                    }
                },
                "description": "",
                "tags": [
                    "pipelines"
                ],
                "parameters": [
                    {
                        "description": "",
                        "in": "path",
                        "name": "pipelineId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "boolean"
                            }
                        }
                    },
                    "required": true
                },
                "x-codeSamples": [
                    {
                        "lang": "Python",
                        "source": "\nproject.pipelines.pause(pipeline='pipeline_entity')\n\n# \n# Pause a pipeline.\n# \n# **prerequisites**: You must be an *owner* or *developer* to use this method.\n# \n# :param dtlpy.entities.pipeline.Pipeline pipeline: pipeline entity\n# :param bool keep_triggers_active: Do we want the triggers to stay active and collect events\n# :return: Composition object\n# \n# "
                    }
                ]
            }
        },
        "/pipelines/{pipelineId}/variables": {
            "patch": {
                "operationId": "Pipeline_updateVariables",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/APIPipeline"
                                }
                            }
                        }
                    }
                },
                "description": "",
                "tags": [
                    "pipelines"
                ],
                "parameters": [
                    {
                        "description": "",
                        "in": "path",
                        "name": "pipelineId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/PipelineVariable"
                                }
                            }
                        }
                    },
                    "required": true
                }
            }
        },
        "/pipelines/{piplineId}/logs": {
            "post": {
                "operationId": "PipelineLogs_logs",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/PipelineExecutionLogs"
                                    }
                                }
                            }
                        }
                    }
                },
                "description": "",
                "tags": [
                    "pipelines"
                ],
                "parameters": [
                    {
                        "description": "",
                        "in": "path",
                        "name": "piplineId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "logsOptions": {
                                        "$ref": "#/components/schemas/LogQuery"
                                    },
                                    "query": {
                                        "$ref": "#/components/schemas/QueryString"
                                    }
                                }
                            }
                        }
                    },
                    "required": true
                }
            }
        },
        "/pipelines/{projectId}/compositionStatus": {
            "get": {
                "operationId": "Pipeline_list",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CursorPageAPIPipeline"
                                }
                            }
                        }
                    }
                },
                "description": "Retrieves pipelines.\n\nSupply query parameters to filter the list.",
                "tags": [
                    "pipelines"
                ],
                "parameters": [
                    {
                        "description": "filter: accepts any string",
                        "in": "query",
                        "name": "filter",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "sort: accepts any string",
                        "in": "query",
                        "name": "sort",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "page: accepts any number",
                        "in": "query",
                        "name": "page",
                        "required": true,
                        "schema": {
                            "type": "number",
                            "format": "double"
                        }
                    },
                    {
                        "description": "pageSize: accepts any number",
                        "in": "query",
                        "name": "pageSize",
                        "required": false,
                        "schema": {
                            "type": "number",
                            "format": "double"
                        }
                    }
                ]
            }
        },
        "/piper-misc/naming/packages/{name}": {
            "get": {
                "operationId": "Misc_validatePackageName",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "text/html": {
                                "schema": {
                                    "type": "boolean"
                                }
                            }
                        }
                    }
                },
                "description": "",
                "tags": [
                    "PiperMisc"
                ],
                "parameters": [
                    {
                        "description": "",
                        "in": "path",
                        "name": "name",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/piper-misc/naming/services/{name}": {
            "get": {
                "operationId": "Misc_validateServiceName",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "text/html": {
                                "schema": {
                                    "type": "boolean"
                                }
                            }
                        }
                    }
                },
                "description": "",
                "tags": [
                    "PiperMisc"
                ],
                "parameters": [
                    {
                        "description": "",
                        "in": "path",
                        "name": "name",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/piper-misc/naming/triggers/{name}": {
            "get": {
                "operationId": "Misc_validateTriggerName",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "text/html": {
                                "schema": {
                                    "type": "boolean"
                                }
                            }
                        }
                    }
                },
                "description": "",
                "tags": [
                    "PiperMisc"
                ],
                "parameters": [
                    {
                        "description": "",
                        "in": "path",
                        "name": "name",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/plans": {
            "get": {
                "operationId": "List All Plans",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Plan"
                                    },
                                    "type": "array"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Plans"
                ],
                "security": [],
                "parameters": []
            }
        },
        "/plans/store/metrics": {
            "get": {
                "operationId": "List All Plan Metrics",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/APIBillableResource"
                                    },
                                    "type": "array"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Plans"
                ],
                "security": [],
                "parameters": []
            }
        },
        "/plans/store/metrics/query": {
            "post": {
                "operationId": "Query Billing Metrics",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/APIBillableResource"
                                    },
                                    "type": "array"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Plans"
                ],
                "security": [],
                "parameters": [],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "keys": {
                                        "items": {
                                            "type": "string"
                                        },
                                        "type": "array"
                                    }
                                },
                                "required": [
                                    "keys"
                                ],
                                "type": "object"
                            }
                        }
                    }
                }
            }
        },
        "/plans/{id}": {
            "get": {
                "operationId": "Get Plan",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Plan"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Plans"
                ],
                "security": [],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/project/{projectId}/guests": {
            "get": {
                "operationId": "List project guests",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/APIGuest"
                                    },
                                    "type": "array"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Projects",
                    "Guests"
                ],
                "security": [],
                "parameters": [
                    {
                        "in": "path",
                        "name": "projectId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "post": {
                "operationId": "Create project guest",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/APIGuest"
                                    },
                                    "type": "array"
                                },
                                "examples": {
                                    "Example 1": {
                                        "value": {
                                            "guestEmail": "some@guest.com",
                                            "name": "Great Company",
                                            "type": "labeling",
                                            "denyMembersManagement": false
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "description": "Create a guest company in a project",
                "tags": [
                    "Projects",
                    "Guests"
                ],
                "security": [],
                "parameters": [
                    {
                        "in": "path",
                        "name": "projectId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateGuestPayload"
                            }
                        }
                    }
                }
            }
        },
        "/project/{projectId}/guests/{guestId}": {
            "get": {
                "operationId": "Get project guest",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/APIProjectGuest"
                                }
                            }
                        }
                    }
                },
                "description": "Get information about a guest company in a project",
                "tags": [
                    "Projects",
                    "Guests"
                ],
                "security": [],
                "parameters": [
                    {
                        "in": "path",
                        "name": "projectId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "path",
                        "name": "guestId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "patch": {
                "operationId": "Update project guest",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/APIGuest"
                                    },
                                    "type": "array"
                                },
                                "examples": {
                                    "Example 1": {
                                        "value": {
                                            "name": "Better Company Name",
                                            "type": "labeling"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "description": "Change a given guest company name of type",
                "tags": [
                    "Projects",
                    "Guests"
                ],
                "security": [],
                "parameters": [
                    {
                        "in": "path",
                        "name": "projectId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "path",
                        "name": "guestId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "type": {
                                        "$ref": "#/components/schemas/GuestType"
                                    },
                                    "name": {
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "type",
                                    "name"
                                ],
                                "type": "object"
                            }
                        }
                    }
                }
            },
            "delete": {
                "operationId": "Remove project guest",
                "responses": {
                    "204": {
                        "description": "No content"
                    }
                },
                "description": "Remove a guest company from a project",
                "tags": [
                    "Projects",
                    "Guests"
                ],
                "security": [],
                "parameters": [
                    {
                        "in": "path",
                        "name": "projectId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "path",
                        "name": "guestId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/project/{projectId}/guests/{guestId}/addOrg": {
            "patch": {
                "operationId": "Add org to guest",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/APIGuest"
                                },
                                "examples": {
                                    "Example 1": {
                                        "value": {
                                            "org_id": "someOrgId"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "description": "Add an org to a guest company",
                "tags": [
                    "Projects",
                    "Guests"
                ],
                "security": [],
                "parameters": [
                    {
                        "in": "path",
                        "name": "guestId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "org_id": {
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "org_id"
                                ],
                                "type": "object"
                            }
                        }
                    }
                }
            }
        },
        "/projects": {
            "get": {
                "operationId": "Get My Projects",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/APIProject"
                                    },
                                    "type": "array"
                                }
                            }
                        }
                    }
                },
                "description": "Get all my projects",
                "tags": [
                    "Projects"
                ],
                "security": [],
                "parameters": [],
                "x-codeSamples": [
                    {
                        "lang": "Python",
                        "source": "\nprojects = dl.projects.list()\n\n# \n# Get the user's project list\n# \n# **Prerequisites**: You must be a **superuser** to list all users' projects.\n# \n# :return: List of Project objects\n# \n# "
                    }
                ]
            },
            "post": {
                "operationId": "Create Project",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/APIProject"
                                },
                                "examples": {
                                    "Example 1": {
                                        "value": {
                                            "name": "New Project Name"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "description": "Creates a new project",
                "tags": [
                    "Projects"
                ],
                "security": [],
                "parameters": [],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateProjectPayload"
                            }
                        }
                    }
                },
                "x-codeSamples": [
                    {
                        "lang": "Python",
                        "source": "\nproject = dl.projects.create(project_name='project_name')\n\n# \n# Create a new project.\n# \n# **Prerequisites**: Any user can create a project.\n# \n# :param str project_name: The Name of the project\n# :param bool checkout: set the project as a default project object (cookies)\n# :return: Project object\n# :rtype: dtlpy.entities.project.Project\n# \n# "
                    }
                ]
            }
        },
        "/projects/{projectId}": {
            "get": {
                "operationId": "Get Project",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/APIProject"
                                }
                            }
                        }
                    }
                },
                "description": "Returns details of a specific project",
                "tags": [
                    "Projects"
                ],
                "security": [],
                "parameters": [
                    {
                        "in": "path",
                        "name": "projectId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "x-codeSamples": [
                    {
                        "lang": "Python",
                        "source": "\nproject = dl.projects.get(project_id='project_id')\n\n# \n# Get a Project object.\n# \n# **Prerequisites**: You must be in the role of an *owner* to get a project object.\n# \n# You must check out to a project or provide at least one of the following params: project_id, project_name\n# \n# :param str project_name: optional - search by name\n# :param str project_id: optional - search by id\n# :param bool checkout: set the project as a default project object (cookies)\n# :param bool fetch: optional - fetch entity from platform (True), default taken from cookie\n# :param bool log_error: optional - show the logs errors\n# :return: Project object\n# :rtype: dtlpy.entities.project.Project\n# \n# "
                    }
                ]
            },
            "patch": {
                "operationId": "Patch Project",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/APIProject"
                                },
                                "examples": {
                                    "Example 1": {
                                        "value": {
                                            "name": "New Project Name"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "description": "Change a project's name",
                "tags": [
                    "Projects"
                ],
                "security": [],
                "parameters": [
                    {
                        "in": "path",
                        "name": "projectId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "name": {
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "name"
                                ],
                                "type": "object"
                            }
                        }
                    }
                },
                "x-codeSamples": [
                    {
                        "lang": "Python",
                        "source": "\nproject = dl.projects.delete(project='project_entity')\n\n# \n# Update a project information (e.g., name, member roles, etc.).\n# \n# **Prerequisites**: You must be in the role of an *owner* to add a member to a project.\n# \n# :param dtlpy.entities.project.Project project: project object\n# :param bool system_metadata: optional - True, if you want to change metadata system\n# :return: Project object\n# :rtype: dtlpy.entities.project.Project\n# \n# "
                    }
                ]
            },
            "delete": {
                "operationId": "Delete Project",
                "responses": {
                    "204": {
                        "description": "No content"
                    }
                },
                "description": "Delete a project",
                "tags": [
                    "Projects"
                ],
                "security": [],
                "parameters": [
                    {
                        "in": "path",
                        "name": "projectId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "x-codeSamples": [
                    {
                        "lang": "Python",
                        "source": "\nis_deleted = dl.projects.delete(project_id='project_id', sure=True, really=True)\n\n# \n# Delete a project forever!\n# \n# **Prerequisites**: You must be in the role of an *owner* to delete a project.\n# \n# :param str project_name: optional - search by name\n# :param str project_id: optional - search by id\n# :param bool sure: Are you sure you want to delete?\n# :param bool really: Really really sure?\n# :return: True if success, error if not\n# :rtype: bool\n# \n# "
                    }
                ]
            }
        },
        "/projects/{projectId}/accounts": {
            "post": {
                "operationId": "Set Project Account",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/APIProject"
                                },
                                "examples": {
                                    "Example 1": {
                                        "value": {
                                            "account": "newAccountId"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "description": "Add an account to a project",
                "tags": [
                    "Projects"
                ],
                "security": [],
                "parameters": [
                    {
                        "in": "path",
                        "name": "projectId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "account": {
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "account"
                                ],
                                "type": "object"
                            }
                        }
                    }
                }
            }
        },
        "/projects/{projectId}/members": {
            "post": {
                "operationId": "Add Members To Project",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "anyOf": [
                                        {
                                            "items": {
                                                "$ref": "#/components/schemas/APIMembership"
                                            },
                                            "type": "array"
                                        },
                                        {}
                                    ]
                                },
                                "examples": {
                                    "Example 1": {
                                        "value": {
                                            "role": "annotator",
                                            "users": [
                                                "someUser@id.com",
                                                "someOtherUser@id.com"
                                            ]
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "description": "add multiple members to a project with a given role",
                "tags": [
                    "Projects"
                ],
                "security": [],
                "parameters": [
                    {
                        "in": "path",
                        "name": "projectId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/AddMembersBatchPayload"
                            }
                        }
                    }
                }
            },
            "get": {
                "operationId": "Get Project Members",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/APIUser"
                                    },
                                    "type": "array"
                                }
                            }
                        }
                    }
                },
                "description": "Get project's members",
                "tags": [
                    "Projects"
                ],
                "security": [],
                "parameters": [
                    {
                        "in": "path",
                        "name": "projectId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "x-codeSamples": [
                    {
                        "lang": "Python",
                        "source": "\nusers_jsons_list = dl.projects.list_members(project_id='project_id', role=dl.MemberRole.DEVELOPER)\n\n# \n# Get a list of the project members.\n# \n# **Prerequisites**: You must be in the role of an *owner* to list project members.\n# \n# :param dtlpy.entities.project.Project project: Project object\n# :param role: The required role for the user. Use the enum dl.MemberRole\n# :return: list of the project members\n# :rtype: list\n# \n# "
                    }
                ]
            }
        },
        "/projects/{projectId}/members/{userId}": {
            "post": {
                "operationId": "Add Member To Project",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "anyOf": [
                                        {
                                            "items": {
                                                "$ref": "#/components/schemas/ClientContributor"
                                            },
                                            "type": "array"
                                        },
                                        {}
                                    ]
                                },
                                "examples": {
                                    "Example 1": {
                                        "value": {
                                            "role": "annotator"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "description": "Add a single member to a project",
                "tags": [
                    "Projects"
                ],
                "security": [],
                "parameters": [
                    {
                        "in": "path",
                        "name": "projectId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "path",
                        "name": "userId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "allowUpdate",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/AddMemberPayload"
                            }
                        }
                    }
                },
                "x-codeSamples": [
                    {
                        "lang": "Python",
                        "source": "\nuser_json = dl.projects.add_member(project_id='project_id', email='user@dataloop.ai', role=dl.MemberRole.DEVELOPER)\n\n# \n# Add a member to the project.\n# \n# **Prerequisites**: You must be in the role of an *owner* to add a member to a project.\n# \n# :param str email: member email\n# :param str project_id: The Id of the project\n# :param role: The required role for the user. Use the enum dl.MemberRole\n# :return: dict that represent the user\n# :rtype: dict\n# \n# "
                    }
                ]
            },
            "patch": {
                "operationId": "Change Member Project Role",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/ClientContributor"
                                    },
                                    "type": "array"
                                },
                                "examples": {
                                    "Example 1": {
                                        "value": {
                                            "role": "engineer"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "description": "Change a member's role in a project",
                "tags": [
                    "Projects"
                ],
                "security": [],
                "parameters": [
                    {
                        "in": "path",
                        "name": "projectId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "path",
                        "name": "userId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PatchMemberPayload"
                            }
                        }
                    }
                },
                "x-codeSamples": [
                    {
                        "lang": "Python",
                        "source": "\nuser_json = = dl.projects.update_member(project_id='project_id', email='user@dataloop.ai', role=dl.MemberRole.DEVELOPER)\n\n# \n# Update member's information/details in the project.\n# \n# **Prerequisites**: You must be in the role of an *owner* to update a member.\n# \n# :param str email: member email\n# :param str project_id: The Id of the project\n# :param role: The required role for the user. Use the enum dl.MemberRole\n# :return: dict that represent the user\n# :rtype: dict\n# \n# "
                    }
                ]
            },
            "delete": {
                "operationId": "Remove Member from Project",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/ClientContributor"
                                    },
                                    "type": "array"
                                }
                            }
                        }
                    }
                },
                "description": "Remove a member from a project",
                "tags": [
                    "Projects"
                ],
                "security": [],
                "parameters": [
                    {
                        "in": "path",
                        "name": "projectId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "path",
                        "name": "userId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "x-codeSamples": [
                    {
                        "lang": "Python",
                        "source": "\nuser_json = dl.projects.remove_member(project_id='project_id', email='user@dataloop.ai')\n\n# \n# Remove a member from the project.\n# \n# **Prerequisites**: You must be in the role of an *owner* to delete a member from a project.\n# \n# :param str email: member email\n# :param str project_id: The Id of the project\n# :return: dict that represents the user\n# :rtype: dict\n# \n# "
                    }
                ]
            }
        },
        "/projects/{projectId}/org": {
            "patch": {
                "operationId": "Add Org To Project",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/APIProject"
                                },
                                "examples": {
                                    "Example 1": {
                                        "value": {
                                            "org_id": "newOrgId"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "description": "add or update a project's organization",
                "tags": [
                    "Projects"
                ],
                "security": [],
                "parameters": [
                    {
                        "in": "path",
                        "name": "projectId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "org_id": {
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "org_id"
                                ],
                                "type": "object"
                            }
                        }
                    }
                }
            }
        },
        "/projects/{projectId}/subgroups": {
            "get": {
                "operationId": "Get Groups",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/APIGroup"
                                    },
                                    "type": "array"
                                }
                            }
                        }
                    }
                },
                "description": "Get all project's groups",
                "tags": [
                    "Projects"
                ],
                "security": [],
                "parameters": [
                    {
                        "in": "path",
                        "name": "projectId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/projects/{projectId}/subgroups/{groupId}": {
            "post": {
                "operationId": "Add Group",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/APIGroup"
                                    },
                                    "type": "array"
                                },
                                "examples": {
                                    "Example 1": {
                                        "value": {
                                            "role": "annotator"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "description": "Add a group to a project with a given role",
                "tags": [
                    "Projects"
                ],
                "security": [],
                "parameters": [
                    {
                        "in": "path",
                        "name": "projectId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "path",
                        "name": "groupId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "role": {
                                        "$ref": "#/components/schemas/Role"
                                    }
                                },
                                "required": [
                                    "role"
                                ],
                                "type": "object"
                            }
                        }
                    }
                }
            },
            "patch": {
                "operationId": "Update Group",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/APIGroup"
                                    },
                                    "type": "array"
                                },
                                "examples": {
                                    "Example 1": {
                                        "value": {
                                            "role": "engineer"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "description": "Change a groups role in a project",
                "tags": [
                    "Projects"
                ],
                "security": [],
                "parameters": [
                    {
                        "in": "path",
                        "name": "projectId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "path",
                        "name": "groupId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "role": {
                                        "$ref": "#/components/schemas/Role"
                                    }
                                },
                                "required": [
                                    "role"
                                ],
                                "type": "object"
                            }
                        }
                    }
                }
            },
            "delete": {
                "operationId": "Remove Group",
                "responses": {
                    "204": {
                        "description": "No content"
                    }
                },
                "description": "Remove a group from a project",
                "tags": [
                    "Projects"
                ],
                "security": [],
                "parameters": [
                    {
                        "in": "path",
                        "name": "projectId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "path",
                        "name": "groupId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/projects/{projectName}/name": {
            "get": {
                "operationId": "Get Project By Name",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/APIProject"
                                    },
                                    "type": "array"
                                }
                            }
                        }
                    }
                },
                "description": "Query the user's projects by name",
                "tags": [
                    "Projects"
                ],
                "security": [],
                "parameters": [
                    {
                        "in": "path",
                        "name": "projectName",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/query/faas": {
            "post": {
                "operationId": "FaasQueryQueryEntities",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "description": "",
                "tags": [
                    "Query"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "resource": {
                                        "type": "string",
                                        "description": ""
                                    },
                                    "filter": {
                                        "type": "object",
                                        "description": ""
                                    },
                                    "sort": {
                                        "type": "object",
                                        "description": ""
                                    },
                                    "page": {
                                        "type": "number",
                                        "format": "double",
                                        "description": ""
                                    },
                                    "pageSize": {
                                        "type": "number",
                                        "format": "double",
                                        "description": ""
                                    }
                                }
                            }
                        }
                    },
                    "required": true
                },
                "x-codeSamples": [
                    {
                        "lang": "Python",
                        "source": "\nservice.executions.list()\n\n# \n# List service executions\n# \n# **Prerequisites**: You must be in the role of an *owner* or *developer*. You must have a service.\n# \n# :param dtlpy.entities.filters.Filters filters: dl.Filters entity to filters items\n# :return: Paged entity\n# :rtype: dtlpy.entities.paged_entities.PagedEntities\n# \n# "
                    }
                ]
            }
        },
        "/recipes": {
            "post": {
                "operationId": "Create Recipe",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "anyOf": [
                                        {
                                            "$ref": "#/components/schemas/APIRecipeV2"
                                        },
                                        {
                                            "$ref": "#/components/schemas/APIRecipe"
                                        }
                                    ]
                                }
                            }
                        }
                    }
                },
                "description": "Create a new Recipe",
                "tags": [
                    "Recipes"
                ],
                "security": [],
                "parameters": [],
                "requestBody": {
                    "description": ": Recipe creation payload",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "anyOf": [
                                    {
                                        "$ref": "#/components/schemas/RecipeV2Input"
                                    },
                                    {
                                        "$ref": "#/components/schemas/RecipeInput"
                                    }
                                ],
                                "description": ": Recipe creation payload"
                            }
                        }
                    }
                },
                "x-codeSamples": [
                    {
                        "lang": "Python",
                        "source": "\ndataset.recipes.create(recipe_name='My Recipe', labels=labels))\n\n# \n# Create a new Recipe.\n# Note: If the param ontology_ids is None, an ontology will be created first.\n# \n# **Prerequisites**: You must be in the role of an *owner* or *developer*.\n# \n# :param str project_ids: project ids\n# :param str or list ontology_ids: ontology ids\n# :param labels: labels\n# :param str recipe_name: recipe name\n# :param attributes: attributes\n# :param str annotation_instruction_file: file path or url of the recipe instruction\n# :return: Recipe entity\n# :rtype: dtlpy.entities.recipe.Recipe\n# \n# "
                    }
                ]
            },
            "get": {
                "operationId": "FindRecipes",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CursorPage_APIRecipeV2-or-APIRecipe_"
                                }
                            }
                        }
                    }
                },
                "description": "Find recipes by query",
                "tags": [
                    "Recipes"
                ],
                "security": [],
                "parameters": [
                    {
                        "description": "- An array of project IDs",
                        "in": "query",
                        "name": "projects",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    {
                        "description": "- Filter by creator",
                        "in": "query",
                        "name": "creator",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "- Find by title",
                        "in": "query",
                        "name": "title",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "- An array of ontology IDs",
                        "in": "query",
                        "name": "ontologies",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    {
                        "description": "- The number of pages to skip from the start",
                        "in": "query",
                        "name": "pageOffset",
                        "required": false,
                        "schema": {
                            "format": "double",
                            "type": "number"
                        }
                    },
                    {
                        "description": "- How many recipes in one page",
                        "in": "query",
                        "name": "pageSize",
                        "required": false,
                        "schema": {
                            "format": "double",
                            "type": "number"
                        }
                    }
                ]
            }
        },
        "/recipes/{id}": {
            "patch": {
                "operationId": "Update Recipe",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "anyOf": [
                                        {
                                            "$ref": "#/components/schemas/APIRecipeV2"
                                        },
                                        {
                                            "$ref": "#/components/schemas/APIRecipe"
                                        }
                                    ]
                                }
                            }
                        }
                    }
                },
                "description": "Update an existing recipe",
                "tags": [
                    "Recipes"
                ],
                "security": [],
                "parameters": [
                    {
                        "description": ": Recipe ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "description": ": The fields to update",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "anyOf": [
                                    {
                                        "$ref": "#/components/schemas/PartialRecipePayloadV2"
                                    },
                                    {
                                        "$ref": "#/components/schemas/PartialRecipePayload"
                                    }
                                ],
                                "description": ": The fields to update"
                            }
                        }
                    }
                },
                "x-codeSamples": [
                    {
                        "lang": "Python",
                        "source": "\ndataset.recipes.update(recipe='recipe_entity')\n\n# \n# Update recipe.\n# \n# **Prerequisites**: You must be in the role of an *owner* or *developer*.\n# \n# :param dtlpy.entities.recipe.Recipe recipe: Recipe object\n# :param bool system_metadata: True, if you want to change metadata system\n# :return: Recipe object\n# :rtype: dtlpy.entities.recipe.Recipe\n# \n# "
                    }
                ]
            },
            "get": {
                "operationId": "Get Recipe",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "anyOf": [
                                        {
                                            "$ref": "#/components/schemas/APIRecipeV2"
                                        },
                                        {
                                            "$ref": "#/components/schemas/APIRecipe"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Missing or Invalid id"
                    },
                    "404": {
                        "description": "Recipe not found"
                    }
                },
                "description": "Get a specific recipe",
                "tags": [
                    "Recipes"
                ],
                "security": [],
                "parameters": [
                    {
                        "description": ": Recipe ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "x-codeSamples": [
                    {
                        "lang": "Python",
                        "source": "\ndataset.recipes.get(recipe_id='recipe_id')\n\n# \n# Get a Recipe object to use in your code.\n# \n# **Prerequisites**: You must be in the role of an *owner* or *developer*.\n# \n# :param str recipe_id: recipe id\n# :return: Recipe object\n# :rtype: dtlpy.entities.recipe.Recipe\n# \n# "
                    }
                ]
            },
            "delete": {
                "operationId": "Delete Recipe",
                "responses": {
                    "204": {
                        "description": "No content"
                    }
                },
                "description": "Delete a recipe",
                "tags": [
                    "Recipes"
                ],
                "security": [],
                "parameters": [
                    {
                        "description": ": Recipe ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "force",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    }
                ],
                "x-codeSamples": [
                    {
                        "lang": "Python",
                        "source": "\ndataset.recipes.delete(recipe_id='recipe_id')\n\n# \n# Delete recipe from platform.\n# \n# **Prerequisites**: You must be in the role of an *owner* or *developer*.\n# \n# :param str recipe_id: recipe id\n# :param bool force: force delete recipe\n# :return: True if success\n# :rtype: bool\n# \n# "
                    }
                ]
            }
        },
        "/recipes/{id}/clone": {
            "post": {
                "operationId": "Clone Recipe",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "anyOf": [
                                        {
                                            "$ref": "#/components/schemas/APIRecipeV2"
                                        },
                                        {
                                            "$ref": "#/components/schemas/APIRecipe"
                                        }
                                    ]
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Recipes"
                ],
                "security": [],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CloneRecipePayload"
                            }
                        }
                    }
                },
                "x-codeSamples": [
                    {
                        "lang": "Python",
                        "source": "\ndataset.recipes.clone(recipe_id='recipe_id')\n# \n# Clone recipe.\n# \n# **Prerequisites**: You must be in the role of an *owner* or *developer*.\n# \n# :param dtlpy.entities.recipe.Recipe recipe: Recipe object\n# :param str recipe_id: Recipe id\n# :param bool shallow: If True, link to existing ontology, clones all ontologies that are linked to the recipe as well\n# :return: Cloned ontology object\n# :rtype: dtlpy.entities.recipe.Recipe\n# \n# \n# "
                    }
                ]
            }
        },
        "/recipes/{id}/scope": {
            "patch": {
                "operationId": "Update Recipe Scope",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/APIRecipeV2"
                                }
                            }
                        }
                    }
                },
                "description": "Update an existing recipe's ontology scope (labels, attributes, structures)",
                "tags": [
                    "Recipes"
                ],
                "security": [],
                "parameters": [
                    {
                        "description": ": Recipe ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "description": ": The fields to update",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpdateOntologyScopePayloadV2",
                                "description": ": The fields to update"
                            }
                        }
                    }
                }
            }
        },
        "/recipes/{id}/tools": {
            "patch": {
                "operationId": "Update Recipe Tools Settings",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/APIRecipeV2"
                                }
                            }
                        }
                    }
                },
                "description": "Update an existing recipe's tools' settings",
                "tags": [
                    "Recipes"
                ],
                "security": [],
                "parameters": [
                    {
                        "description": ": Recipe ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "description": ": The fields to update",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpdateToolsSettingsPayloadV2",
                                "description": ": The fields to update"
                            }
                        }
                    }
                }
            }
        },
        "/scores": {
            "post": {
                "operationId": "Create Scores",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/APIScore"
                                    },
                                    "type": "array"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Scores"
                ],
                "security": [],
                "parameters": [],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "scores": {
                                        "items": {
                                            "$ref": "#/components/schemas/Score"
                                        },
                                        "type": "array"
                                    }
                                },
                                "required": [
                                    "scores"
                                ],
                                "type": "object"
                            }
                        }
                    }
                }
            },
            "delete": {
                "operationId": "Delete Scores",
                "responses": {
                    "204": {
                        "description": "No content"
                    }
                },
                "tags": [
                    "Scores"
                ],
                "security": [],
                "parameters": [],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/DeleteTaskItemScoresPayload"
                            }
                        }
                    }
                }
            }
        },
        "/scores/average": {
            "post": {
                "operationId": "Query Average",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "tags": [
                    "Scores"
                ],
                "security": [],
                "parameters": [],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ScoreParameters"
                            }
                        }
                    }
                }
            }
        },
        "/scores/confusion": {
            "post": {
                "operationId": "Query Confusion",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "confusionMatrix": {
                                            "items": {
                                                "items": {
                                                    "type": "number",
                                                    "format": "double"
                                                },
                                                "type": "array"
                                            },
                                            "type": "array"
                                        },
                                        "labels": {
                                            "items": {
                                                "type": "string"
                                            },
                                            "type": "array"
                                        }
                                    },
                                    "required": [
                                        "confusionMatrix",
                                        "labels"
                                    ],
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Scores"
                ],
                "security": [],
                "parameters": [],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ScoreParameters"
                            }
                        }
                    }
                }
            }
        },
        "/scores/histogram": {
            "post": {
                "operationId": "Query Histogram",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {},
                                    "type": "array"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Scores"
                ],
                "security": [],
                "parameters": [],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ScoreParameters"
                            }
                        }
                    }
                }
            }
        },
        "/services": {
            "get": {
                "operationId": "Services_listServices",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ServicesPage"
                                }
                            }
                        }
                    }
                },
                "description": "Retrieves services.\n\nSupply query parameters to filter the list.",
                "tags": [
                    "Services"
                ],
                "parameters": [
                    {
                        "description": "projects: array of project id",
                        "in": "query",
                        "name": "projects",
                        "required": false,
                        "style": "form",
                        "explode": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    {
                        "description": "name: service name",
                        "in": "query",
                        "name": "name",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "packageId: the package that service related to",
                        "in": "query",
                        "name": "packageId",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "pageOffset: accepts any number",
                        "in": "query",
                        "name": "pageOffset",
                        "required": false,
                        "schema": {
                            "type": "number",
                            "format": "double"
                        }
                    },
                    {
                        "description": "pageSize: accepts any number",
                        "in": "query",
                        "name": "pageSize",
                        "required": false,
                        "schema": {
                            "type": "number",
                            "format": "double"
                        }
                    }
                ]
            },
            "post": {
                "operationId": "Services_createService",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/APIService"
                                }
                            }
                        }
                    }
                },
                "description": "Create new package.",
                "tags": [
                    "Services"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/APIService"
                            }
                        }
                    },
                    "required": true
                },
                "x-codeSamples": [
                    {
                        "lang": "Python",
                        "source": "\nservice = package.services.deploy(service_name=package_name,\nexecution_timeout=3 * 60 * 60,\nmodule_name=module.name,\nruntime=dl.KubernetesRuntime(\nconcurrency=10,\npod_type=dl.InstanceCatalog.REGULAR_S,\nautoscaler=dl.KubernetesRabbitmqAutoscaler(\nmin_replicas=1,\nmax_replicas=20,\nqueue_length=20\n)\n)\n)\n\n# \n# Deploy service.\n# \n# **Prerequisites**: You must be in the role of an *owner* or *developer*. You must have a package.\n# \n# :param str service_name: name\n# :param dtlpy.entities.package.Package package: package entity\n# :param str bot: bot email\n# :param str revision: package revision of version\n# :param init_input: config to run at startup\n# :param dict runtime: runtime resources\n# :param str pod_type: pod type dl.InstanceCatalog\n# :param str sdk_version:  - optional - string - sdk version\n# :param str agent_versions: - dictionary - - optional -versions of sdk\n# :param bool verify: if true, verify the inputs\n# :param bool checkout: if true, checkout (switch) to service\n# :param str module_name: module name\n# :param str project_id: project id\n# :param str driver_id: driver id\n# :param Callable func: function to deploy\n# :param bool run_execution_as_process: if true, run execution as process\n# :param int execution_timeout: execution timeout in seconds\n# :param int drain_time: drain time in seconds\n# :param int max_attempts: maximum execution retries in-case of a service reset\n# :param str on_reset: what happens on reset\n# :param bool force: optional - if true, terminate old replicas immediately\n# :param list secrets: list of the integrations ids\n# :param kwargs: list of additional arguments\n# :return: Service object\n# :rtype: dtlpy.entities.service.Service\n# \n# "
                    }
                ]
            }
        },
        "/services/cache": {
            "post": {
                "operationId": "Services_cache",
                "responses": {
                    "204": {
                        "description": "No content"
                    }
                },
                "description": "Add or remove Cache for the org.",
                "tags": [
                    "Services"
                ],
                "parameters": [
                    {
                        "description": "Cache request mode",
                        "in": "query",
                        "name": "mode",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "apply",
                                "destroy",
                                "get",
                                "apply-filestore"
                            ]
                        }
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/ICacheOptions"
                }
            }
        },
        "/services/fs-cache": {
            "post": {
                "operationId": "Services_fsCache",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "description": "",
                "tags": [
                    "Services"
                ],
                "parameters": [
                    {
                        "description": "",
                        "in": "query",
                        "name": "mode",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "apply",
                                "destroy",
                                "get",
                                "apply-filestore"
                            ]
                        }
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/ICacheOptions"
                }
            }
        },
        "/services/global": {
            "post": {
                "operationId": "Services_getGlobalServices",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "description": "Get all global services \nby using list of projectId and service name\n\nExample: [{ projectId: 'my-project-id', name: 'my-service-name' },\n          { projectId: 'my-project-id2', name: 'my-service-name2' }, ... ]\n\n the server will search in the db for the service with the name my-service-name belonging to the project 'my-project-id\n also the service with the name my-service-name2 belonging to the project 'my-project-id2\n and so on...",
                "tags": [
                    "Services"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "type": "object",
                                    "properties": {
                                        "projectId": {
                                            "type": "string",
                                            "description": ""
                                        },
                                        "name": {
                                            "type": "string",
                                            "description": ""
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/services/logs": {
            "post": {
                "operationId": "Services_getLogs",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ServiceLogsPage"
                                }
                            }
                        }
                    }
                },
                "description": "Get logs for pipelines.",
                "tags": [
                    "Services"
                ],
                "parameters": [
                    {
                        "description": "",
                        "in": "query",
                        "name": "verbose",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/LogQuery"
                },
                "x-codeSamples": [
                    {
                        "lang": "Python",
                        "source": "\nservice_logs = package.services.log(service='service_entity')\n\n# \n# Get service logs.\n# \n# **Prerequisites**: You must be in the role of an *owner* or *developer*. You must have a package.\n# \n# :param dtlpy.entities.service.Service service: service object\n# :param int size: size\n# :param dict checkpoint: the information from the lst point checked in the service\n# :param str start: iso format time\n# :param str end: iso format time\n# :param bool follow: if true, keep stream future logs\n# :param str text: text\n# :param str execution_id: execution id\n# :param str function_name: function name\n# :param str replica_id: replica id\n# :param bool system: system\n# :param bool view: if true, print out all the logs\n# :param bool until_completed: wait until completed\n# :param str log_level: the log level to display dl.LoggingLevel\n# :param str model_id: model id\n# :param str model_operation: model operation action\n# :param str project_id: project id\n# :return: ServiceLog entity\n# :rtype: ServiceLog\n# \n# "
                    }
                ]
            }
        },
        "/services/status": {
            "get": {
                "operationId": "Services_getServicesStatus",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {}
                                }
                            }
                        }
                    }
                },
                "description": "Get Services Status.",
                "tags": [
                    "Services"
                ],
                "parameters": [
                    {
                        "description": "",
                        "in": "query",
                        "name": "ids",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/services/{id}": {
            "get": {
                "operationId": "Services_getService",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/APIService"
                                }
                            }
                        }
                    }
                },
                "description": "Get service by id and version.",
                "tags": [
                    "Services"
                ],
                "parameters": [
                    {
                        "description": "Service id",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "The service version",
                        "in": "query",
                        "name": "version",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "x-codeSamples": [
                    {
                        "lang": "Python",
                        "source": "\nservice = package.services.get(service_id='service_id')\n\n# \n# Get service to use in your code.\n# \n# **Prerequisites**: You must be in the role of an *owner* or *developer*. You must have a package.\n# \n# :param str service_name: optional - search by name\n# :param str service_id: optional - search by id\n# :param bool checkout: if true, checkout (switch) to service\n# :param fetch: optional - fetch entity from platform, default taken from cookie\n# :return: Service object\n# :rtype: dtlpy.entities.service.Service\n# \n# "
                    }
                ]
            },
            "patch": {
                "operationId": "Services_updateService",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "description": "Update service changes.",
                "tags": [
                    "Services"
                ],
                "parameters": [
                    {
                        "description": "service id.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "optional - force updated old replicas immediately\nif the value has set is true, it will go to services driver(kubernetes...) and restarting all the replicas without waiting",
                        "in": "query",
                        "name": "force",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/APIServicePatch"
                            }
                        }
                    },
                    "required": true
                },
                "x-codeSamples": [
                    {
                        "lang": "Python",
                        "source": "\nservice = package.services.update(service='service_entity')\n\n# \n# Update service changes to platform.\n# \n# **Prerequisites**: You must be in the role of an *owner* or *developer*. You must have a package.\n# \n# :param dtlpy.entities.service.Service service: Service entity\n# :param bool force: optional - terminate old replicas immediately\n# :return: Service entity\n# :rtype: dtlpy.entities.service.Service\n# \n# "
                    }
                ]
            },
            "delete": {
                "operationId": "Services_deleteService",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/APICommand"
                                }
                            }
                        }
                    }
                },
                "description": "Delete Service.",
                "tags": [
                    "Services"
                ],
                "parameters": [
                    {
                        "description": "Service id.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "x-codeSamples": [
                    {
                        "lang": "Python",
                        "source": "\nis_deleted = package.services.delete(service_id='service_id')\n\n# \n# Delete Service object\n# \n# **Prerequisites**: You must be in the role of an *owner* or *developer*. You must have a package.\n# \n# You must provide at least ONE of the following params: service_id, service_name.\n# \n# :param str service_name: by name\n# :param str service_id: by id\n# :return: True\n# :rtype: bool\n# \n# "
                    }
                ]
            }
        },
        "/services/{id}/debug": {
            "post": {
                "operationId": "Services_serviceDebug",
                "responses": {
                    "204": {
                        "description": "No content"
                    }
                },
                "description": "Service debug stream",
                "tags": [
                    "Services"
                ],
                "parameters": [
                    {
                        "description": "",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "",
                        "in": "query",
                        "name": "force",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/DebugSession"
                            }
                        }
                    },
                    "required": true
                }
            }
        },
        "/services/{id}/debug(*)?": {
            "get": {
                "operationId": "Services_serviceStream",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "url": {
                                            "type": "string",
                                            "description": ""
                                        },
                                        "token": {
                                            "type": "string",
                                            "description": ""
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "description": "Service debug stream",
                "tags": [
                    "Services"
                ],
                "parameters": [
                    {
                        "description": "",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "",
                        "in": "query",
                        "name": "getToken",
                        "required": true,
                        "schema": {
                            "type": "boolean"
                        }
                    }
                ]
            }
        },
        "/services/{id}/logs": {
            "post": {
                "operationId": "Services_getServiceLogs",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ServiceLogsPage"
                                }
                            }
                        }
                    }
                },
                "description": "Get service logs.",
                "tags": [
                    "Services"
                ],
                "parameters": [
                    {
                        "description": "Service id.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "",
                        "in": "query",
                        "name": "verbose",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/LogQuery"
                }
            }
        },
        "/services/{id}/notify": {
            "post": {
                "operationId": "Services_notify",
                "responses": {
                    "204": {
                        "description": "No content"
                    }
                },
                "description": "",
                "tags": [
                    "Services"
                ],
                "parameters": [
                    {
                        "description": "",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/AgentNotificationPayload"
                            }
                        }
                    },
                    "required": true
                }
            }
        },
        "/services/{id}/resume": {
            "post": {
                "operationId": "Services_resumeService",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "description": "Resume service.",
                "tags": [
                    "Services"
                ],
                "parameters": [
                    {
                        "description": "Service id.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "",
                        "in": "query",
                        "name": "force",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "x-codeSamples": [
                    {
                        "lang": "Python",
                        "source": "\nservice_json = package.services.resume(service_id='service_id')\n\n# \n# Resume service.\n# \n# **Prerequisites**: You must be in the role of an *owner* or *developer*. You must have a package.\n# \n# You must provide at least ONE of the following params: service_id, service_name.\n# \n# :param str service_name: service name\n# :param str service_id: service id\n# :param bool force: optional - terminate old replicas immediately\n# :return: json of the service\n# :rtype: dict\n# \n# "
                    }
                ]
            }
        },
        "/services/{id}/revisions": {
            "get": {
                "operationId": "Services_getServiceRevisions",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/APIService"
                                    }
                                }
                            }
                        }
                    }
                },
                "description": "Get service revisions by id.",
                "tags": [
                    "Services"
                ],
                "parameters": [
                    {
                        "description": "service id.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "x-codeSamples": [
                    {
                        "lang": "Python",
                        "source": "\nservice_revision = package.services.revisions(service_id='service_id')\n\n# \n# Get service revisions history.\n# \n# **Prerequisites**: You must be in the role of an *owner* or *developer*. You must have a package.\n# \n# You must provide at leats ONE of the following params: service, service_id\n# \n# :param dtlpy.entities.service.Service service: Service entity\n# :param str service_id: service id\n# \n# "
                    }
                ]
            }
        },
        "/services/{id}/rollout": {
            "post": {
                "operationId": "Services_rolloutService",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/APIService"
                                }
                            }
                        }
                    }
                },
                "description": "Rolling out service.",
                "tags": [
                    "Services"
                ],
                "parameters": [
                    {
                        "description": "Service id.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "version": {
                                        "type": "string",
                                        "description": ""
                                    }
                                }
                            }
                        }
                    },
                    "required": true
                }
            }
        },
        "/services/{id}/status": {
            "post": {
                "operationId": "Services_updateReplicaStatus",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/APIReplicaStatusUpdate"
                                }
                            }
                        }
                    }
                },
                "description": "Update Replica Status.",
                "tags": [
                    "Services"
                ],
                "parameters": [
                    {
                        "description": "Service id.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/APIReplicaStatusUpdate"
                            }
                        }
                    },
                    "required": true
                },
                "x-codeSamples": [
                    {
                        "lang": "Python",
                        "source": "\nstatus_json = package.services.status(service_id='service_id')\n\n# \n# Get service status.\n# \n# **Prerequisites**: You must be in the role of an *owner* or *developer*. You must have a package.\n# \n# You must provide at least ONE of the following params: service_id, service_name\n# \n# :param str service_name: service name\n# :param str service_id: service id\n# :return: status json\n# :rtype: dict\n# \n# "
                    }
                ]
            },
            "get": {
                "operationId": "Services_getServiceStatus",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/APIServiceStatus"
                                }
                            }
                        }
                    }
                },
                "description": "Get service status.",
                "tags": [
                    "Services"
                ],
                "parameters": [
                    {
                        "description": "Service id.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/services/{id}/stop": {
            "post": {
                "operationId": "Services_stopService",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "description": "Pause service.",
                "tags": [
                    "Services"
                ],
                "parameters": [
                    {
                        "description": "Service id.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "optional - terminate old replicas immediately",
                        "in": "query",
                        "name": "force",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "x-codeSamples": [
                    {
                        "lang": "Python",
                        "source": "\nsuccess = package.services.pause(service_id='service_id')\n\n# \n# Pause service.\n# \n# **Prerequisites**: You must be in the role of an *owner* or *developer*. You must have a package.\n# \n# You must provide at least ONE of the following params: service_id, service_name\n# \n# :param str service_name: service name\n# :param str service_id: service id\n# :param bool force: optional - terminate old replicas immediately\n# :return: True if success\n# :rtype: bool\n# \n# "
                    }
                ]
            }
        },
        "/settings": {
            "post": {
                "operationId": "Create Setting",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "anyOf": [
                                        {
                                            "$ref": "#/components/schemas/APIFeatureFlag"
                                        },
                                        {
                                            "$ref": "#/components/schemas/APIUserSetting"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                },
                "description": "Creates a new Setting.\n\nSupply the appropriate Create Request object for either Feature flag or User setting.",
                "tags": [
                    "Settings"
                ],
                "security": [],
                "parameters": [],
                "requestBody": {
                    "description": "The setting to create",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateSettingRequest",
                                "description": "The setting to create"
                            }
                        }
                    }
                }
            }
        },
        "/settings/query": {
            "post": {
                "operationId": "Query Settings",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CursorPageAPISetting"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                },
                "description": "Query settings\n\nSupply the query requested to query settings",
                "tags": [
                    "Settings"
                ],
                "security": [],
                "parameters": [],
                "requestBody": {
                    "description": "The query",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/QueryModel",
                                "description": "The query"
                            }
                        }
                    }
                }
            }
        },
        "/settings/resolve": {
            "post": {
                "operationId": "Resolve Settings",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "anyOf": [
                                            {
                                                "$ref": "#/components/schemas/APIFeatureFlag"
                                            },
                                            {
                                                "$ref": "#/components/schemas/APIUserSetting"
                                            }
                                        ]
                                    },
                                    "type": "array"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                },
                "description": "Resolves the relevant settings for a specific Context.\n\nSupply the specific Context to resolve by",
                "tags": [
                    "Settings"
                ],
                "security": [],
                "parameters": [],
                "requestBody": {
                    "description": "The context to resolve by",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "anyOf": [
                                    {
                                        "$ref": "#/components/schemas/ResolverPayload"
                                    },
                                    {
                                        "$ref": "#/components/schemas/IUserContext"
                                    }
                                ],
                                "description": "The context to resolve by"
                            }
                        }
                    }
                }
            }
        },
        "/settings/{id}": {
            "get": {
                "operationId": "Get Setting",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "anyOf": [
                                        {
                                            "$ref": "#/components/schemas/APIFeatureFlag"
                                        },
                                        {
                                            "$ref": "#/components/schemas/APIUserSetting"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                },
                "description": "Retrieves the details of a setting.\n\nSupply the unique setting ID to fetch it's details.",
                "tags": [
                    "Settings"
                ],
                "security": [],
                "parameters": [
                    {
                        "description": "ID of the Setting to fetch",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "patch": {
                "operationId": "Update Setting",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "anyOf": [
                                        {
                                            "$ref": "#/components/schemas/APIFeatureFlag"
                                        },
                                        {
                                            "$ref": "#/components/schemas/APIUserSetting"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                },
                "description": "Update a setting\n\nSupply the unique id of the setting to update and an object describing which fields update",
                "tags": [
                    "Settings"
                ],
                "security": [],
                "parameters": [
                    {
                        "description": "ID of the Setting to update",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "description": "The values to update with",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "anyOf": [
                                    {
                                        "$ref": "#/components/schemas/PatchFeatureFlagRequest"
                                    },
                                    {
                                        "$ref": "#/components/schemas/PatchUserSettingRequest"
                                    }
                                ],
                                "description": "The values to update with"
                            }
                        }
                    }
                }
            },
            "delete": {
                "operationId": "Delete Setting",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                },
                "description": "Delete a setting\n\nSupply the unique id of the setting to delete",
                "tags": [
                    "Settings"
                ],
                "security": [],
                "parameters": [
                    {
                        "description": "ID of the Setting to delete",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/subscriptions": {
            "get": {
                "operationId": "List Subscriptions",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CursorPage_APISubscription_"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Subscriptions"
                ],
                "security": [],
                "parameters": [
                    {
                        "in": "query",
                        "name": "account",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "org",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "pageOffset",
                        "required": false,
                        "schema": {
                            "format": "double",
                            "type": "number"
                        }
                    },
                    {
                        "in": "query",
                        "name": "pageSize",
                        "required": false,
                        "schema": {
                            "format": "double",
                            "type": "number"
                        }
                    },
                    {
                        "in": "query",
                        "name": "status",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/subscriptions/{id}": {
            "get": {
                "operationId": "Get Subscription",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/APISubscription"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Subscriptions"
                ],
                "security": [],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/tasks": {
            "post": {
                "operationId": "Create Task",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "anyOf": [
                                        {
                                            "$ref": "#/components/schemas/APITask"
                                        },
                                        {
                                            "$ref": "#/components/schemas/APICommand"
                                        }
                                    ]
                                }
                            }
                        }
                    }
                },
                "description": "Create a new Task",
                "tags": [
                    "Tasks"
                ],
                "security": [],
                "parameters": [],
                "requestBody": {
                    "description": ": Task creation payload",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/TaskPayload",
                                "description": ": Task creation payload"
                            }
                        }
                    }
                }
            },
            "get": {
                "operationId": "Find Tasks",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/APITaskCursor"
                                }
                            }
                        }
                    }
                },
                "description": "Find tasks by query",
                "tags": [
                    "Tasks"
                ],
                "security": [],
                "parameters": [
                    {
                        "description": "- An array of project IDs",
                        "in": "query",
                        "name": "projects",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    {
                        "description": "- Find by dataset",
                        "in": "query",
                        "name": "dataset",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "- Find by recipe",
                        "in": "query",
                        "name": "recipe",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "- Find by task status",
                        "in": "query",
                        "name": "status",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "- Filter by creator",
                        "in": "query",
                        "name": "creator",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "- Filter by task owner",
                        "in": "query",
                        "name": "taskOwner",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "- Find by task name",
                        "in": "query",
                        "name": "name",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "- Due date lower limit",
                        "in": "query",
                        "name": "minDate",
                        "required": false,
                        "schema": {
                            "format": "double",
                            "type": "number"
                        }
                    },
                    {
                        "description": "- Due date upper limit",
                        "in": "query",
                        "name": "maxDate",
                        "required": false,
                        "schema": {
                            "format": "double",
                            "type": "number"
                        }
                    },
                    {
                        "description": "- An array of assignment IDs",
                        "in": "query",
                        "name": "assignments",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    {
                        "description": "- The number of pages to skip from the start",
                        "in": "query",
                        "name": "pageOffset",
                        "required": false,
                        "schema": {
                            "format": "double",
                            "type": "number"
                        }
                    },
                    {
                        "description": "- How many tasks in one page",
                        "in": "query",
                        "name": "pageSize",
                        "required": false,
                        "schema": {
                            "format": "double",
                            "type": "number"
                        }
                    },
                    {
                        "description": "- Filter by parent task",
                        "in": "query",
                        "name": "parentTaskId",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "- Filter by task type - Annotation or QA",
                        "in": "query",
                        "name": "type",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/tasks/count": {
            "post": {
                "operationId": "Get Projects Active Counters",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/APITaskCounters"
                                }
                            }
                        }
                    }
                },
                "description": "For org admin / owner:\nGet active counters for projects",
                "tags": [
                    "Tasks"
                ],
                "security": [],
                "parameters": [],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "datasetId": {
                                        "type": "string"
                                    },
                                    "projectIds": {
                                        "items": {
                                            "type": "string"
                                        },
                                        "type": "array"
                                    }
                                },
                                "required": [
                                    "projectIds"
                                ],
                                "type": "object"
                            }
                        }
                    }
                }
            }
        },
        "/tasks/projects/{projectId}/counters": {
            "post": {
                "operationId": "Get counters for project",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/WorkflowsCounters"
                                }
                            }
                        }
                    }
                },
                "description": "Get counters for project",
                "tags": [
                    "Tasks"
                ],
                "security": [],
                "parameters": [
                    {
                        "description": ": Project id",
                        "in": "path",
                        "name": "projectId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "contributors": {
                                        "items": {
                                            "type": "string"
                                        },
                                        "type": "array"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                }
            }
        },
        "/tasks/projects/{projectId}/datasets/{datasetId}/actions": {
            "get": {
                "operationId": "Get Dataset Actions",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/ItemAction"
                                    },
                                    "type": "array"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Missing or Invalid dataset id"
                    },
                    "404": {
                        "description": "Dataset not found"
                    }
                },
                "description": "Get all actions(statuses) related to the required dataset",
                "tags": [
                    "Tasks"
                ],
                "security": [],
                "parameters": [
                    {
                        "description": ": Project ID",
                        "in": "path",
                        "name": "projectId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": ": Dataset ID",
                        "in": "path",
                        "name": "datasetId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/tasks/query": {
            "post": {
                "operationId": "Query Tasks",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CursorPage_any_"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Tasks"
                ],
                "security": [],
                "parameters": [],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/QueryFilter"
                            }
                        }
                    }
                }
            }
        },
        "/tasks/{id}": {
            "patch": {
                "operationId": "Update Task",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/APITask"
                                }
                            }
                        }
                    }
                },
                "description": "Update an existing task",
                "tags": [
                    "Tasks"
                ],
                "security": [],
                "parameters": [
                    {
                        "description": ": Task ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "description": ": The fields to update",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PartialTaskPayload",
                                "description": ": The fields to update"
                            }
                        }
                    }
                }
            },
            "get": {
                "operationId": "Get Task",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/APITask"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Missing or Invalid id"
                    },
                    "404": {
                        "description": "Task not found"
                    }
                },
                "description": "Get a specific task",
                "tags": [
                    "Tasks"
                ],
                "security": [],
                "parameters": [
                    {
                        "description": ": Task ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "delete": {
                "operationId": "Delete Task",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "anyOf": [
                                        {},
                                        {
                                            "$ref": "#/components/schemas/APICommand"
                                        }
                                    ]
                                }
                            }
                        }
                    }
                },
                "description": "Delete a task",
                "tags": [
                    "Tasks"
                ],
                "security": [],
                "parameters": [
                    {
                        "description": ": Task ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/DeleteTaskPayload"
                            }
                        }
                    }
                }
            }
        },
        "/tasks/{id}/addToTask": {
            "post": {
                "operationId": "Add Items to Task",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "anyOf": [
                                        {
                                            "$ref": "#/components/schemas/APITask"
                                        },
                                        {
                                            "$ref": "#/components/schemas/APICommand"
                                        }
                                    ]
                                }
                            }
                        }
                    }
                },
                "description": "Add work to an existing Task",
                "tags": [
                    "Tasks"
                ],
                "security": [],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "description": ": Task update payload",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/AddToTaskPayload",
                                "description": ": Task update payload"
                            }
                        }
                    }
                }
            }
        },
        "/tasks/{id}/contributors": {
            "post": {
                "operationId": "Update Task Contributors",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/APITask"
                                }
                            }
                        }
                    }
                },
                "description": "Update task contributors",
                "tags": [
                    "Tasks"
                ],
                "security": [],
                "parameters": [
                    {
                        "description": ": Task ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "description": ": Task update payload",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpdateContributorsPayload",
                                "description": ": Task update payload"
                            }
                        }
                    }
                }
            }
        },
        "/tasks/{id}/queue": {
            "get": {
                "operationId": "Get Task Queue Details",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TaskQueueDetails"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Missing or Invalid id"
                    },
                    "404": {
                        "description": "Task not found"
                    }
                },
                "description": "Get a specific task's queue details",
                "tags": [
                    "Tasks"
                ],
                "security": [],
                "parameters": [
                    {
                        "description": ": Task ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/tasks/{id}/relatives": {
            "get": {
                "operationId": "Get Task Relatives",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/TaskRelativeInput"
                                    },
                                    "type": "array"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Missing or Invalid id"
                    },
                    "404": {
                        "description": "Task not found"
                    }
                },
                "description": "Get the relative task names of a specific task",
                "tags": [
                    "Tasks"
                ],
                "security": [],
                "parameters": [
                    {
                        "description": ": Task ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/tasks/{id}/removeFromTask": {
            "post": {
                "operationId": "Remove Items from Task",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "anyOf": [
                                        {
                                            "$ref": "#/components/schemas/APICommand"
                                        },
                                        {
                                            "$ref": "#/components/schemas/APITask"
                                        }
                                    ]
                                }
                            }
                        }
                    }
                },
                "description": "Remove work from an existing Task",
                "tags": [
                    "Tasks"
                ],
                "security": [],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "description": ": Task update payload",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/RemoveFromTaskPayload",
                                "description": ": Task update payload"
                            }
                        }
                    }
                }
            }
        },
        "/trigger-resource-information": {
            "post": {
                "operationId": "TriggerResourceInformation_queryTriggerResourceInformation",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TriggerResourceInformationPage"
                                }
                            }
                        }
                    }
                },
                "description": "",
                "tags": [
                    "TriggerResourceInformation"
                ],
                "parameters": [
                    {
                        "description": "",
                        "in": "query",
                        "name": "pageOffset",
                        "required": false,
                        "schema": {
                            "type": "number",
                            "format": "double"
                        }
                    },
                    {
                        "description": "",
                        "in": "query",
                        "name": "pageSize",
                        "required": false,
                        "schema": {
                            "type": "number",
                            "format": "double"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/TriggerResourceInformationQuery"
                            }
                        }
                    },
                    "required": true
                }
            }
        },
        "/triggers": {
            "get": {
                "operationId": "Triggers_listTriggers",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TriggersPage"
                                }
                            }
                        }
                    }
                },
                "description": "Retrieves services.\n\nSupply query parameters to filter the list.",
                "tags": [
                    "Triggers"
                ],
                "parameters": [
                    {
                        "description": "",
                        "in": "query",
                        "name": "type",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "Event",
                                "Cron"
                            ]
                        }
                    },
                    {
                        "description": "",
                        "in": "query",
                        "name": "name",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "",
                        "in": "query",
                        "name": "projects",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "",
                        "in": "query",
                        "name": "resource",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "",
                        "in": "query",
                        "name": "active",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "description": "",
                        "in": "query",
                        "name": "executionMode",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "",
                        "in": "query",
                        "name": "serviceId",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "",
                        "in": "query",
                        "name": "webhookId",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "",
                        "in": "query",
                        "name": "operationType",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "",
                        "in": "query",
                        "name": "entity",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "",
                        "in": "query",
                        "name": "action",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "",
                        "in": "query",
                        "name": "pageOffset",
                        "required": false,
                        "schema": {
                            "type": "number",
                            "format": "double"
                        }
                    },
                    {
                        "description": "",
                        "in": "query",
                        "name": "pageSize",
                        "required": false,
                        "schema": {
                            "type": "number",
                            "format": "double"
                        }
                    }
                ]
            },
            "post": {
                "operationId": "Triggers_createTrigger",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/APITrigger"
                                }
                            }
                        }
                    }
                },
                "description": "Create a Trigger. Can create two types: a cron trigger or an event trigger.\nInputs are different for each type",
                "tags": [
                    "Triggers"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateTriggerRequest"
                            }
                        }
                    },
                    "required": true
                },
                "x-codeSamples": [
                    {
                        "lang": "Python",
                        "source": "\nservice.triggers.create(name='triggername',\nexecution_mode=dl.TriggerExecutionMode.ONCE,\nresource='Item',\nactions='Created',\nfunction_name='run',\nfilters={'$and': [{'hidden': False},\n{'type': 'file'}]}\n)\n\n# \n# Create a Trigger. Can create two types: a cron trigger or an event trigger.\n# Inputs are different for each type\n# \n# **Prerequisites**: You must be in the role of an *owner* or *developer*. You must have a service.\n# \n# Inputs for all types:\n# \n# :param str service_id: Id of services to be triggered\n# :param str trigger_type: can be cron or event. use enum dl.TriggerType for the full list\n# :param str name: name of the trigger\n# :param str webhook_id: id for webhook to be called\n# :param str  function_name: the function name to be called when triggered (must be defined in the package)\n# :param str  project_id: project id where trigger will work\n# :param bool active: optional - True/False, default = True, if true trigger is active\n# \n# Inputs for event trigger:\n# :param dtlpy.entities.filters.Filters filters: optional - Item/Annotation metadata filters, default = none\n# :param str resource: optional - Dataset/Item/Annotation/ItemStatus, default = Item\n# :param str actions: optional - Created/Updated/Deleted, default = create\n# :param str execution_mode: how many times trigger should be activated; default is \"Once\". enum dl.TriggerExecutionMode\n# \n# Inputs for cron trigger:\n# :param start_at: iso format date string to start activating the cron trigger\n# :param end_at: iso format date string to end the cron activation\n# :param inputs: dictionary \"name\":\"val\" of inputs to the function\n# :param str cron: cron spec specifying when it should run. more information: https://en.wikipedia.org/wiki/Cron\n# :param str pipeline_id: Id of pipeline to be triggered\n# :param pipeline: pipeline entity to be triggered\n# :param str pipeline_node_id: Id of pipeline root node to be triggered\n# :param root_node_namespace: namespace of pipeline root node to be triggered\n# \n# :return: Trigger entity\n# :rtype: dtlpy.entities.trigger.Trigger\n# \n# "
                    }
                ]
            }
        },
        "/triggers/{id}": {
            "get": {
                "operationId": "Triggers_getTrigger",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/APITrigger"
                                }
                            }
                        }
                    }
                },
                "description": "Get trigger by id.\nSupply query parameters to filter the list.",
                "tags": [
                    "Triggers"
                ],
                "parameters": [
                    {
                        "description": "Trigger id.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "x-codeSamples": [
                    {
                        "lang": "Python",
                        "source": "\nservice.triggers.get(trigger_id='trigger_id')\n\n# \n# Get Trigger object\n# \n# **Prerequisites**: You must be in the role of an *owner* or *developer*. You must have a service.\n# \n# :param str trigger_id: trigger id\n# :param str  trigger_name: trigger name\n# :return: Trigger entity\n# :rtype: dtlpy.entities.trigger.Trigger\n# \n# "
                    }
                ]
            },
            "patch": {
                "operationId": "Triggers_updateTrigger",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/APITrigger"
                                }
                            }
                        }
                    }
                },
                "description": "Update trigger.",
                "tags": [
                    "Triggers"
                ],
                "parameters": [
                    {
                        "description": "Trigger Id.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/APITrigger"
                            }
                        }
                    },
                    "required": true
                },
                "x-codeSamples": [
                    {
                        "lang": "Python",
                        "source": "\nservice.triggers.update(trigger='trigger_entity')\n\n# \n# Update trigger\n# \n# **Prerequisites**: You must be in the role of an *owner* or *developer*. You must have a service.\n# \n# :param dtlpy.entities.trigger.Trigger trigger: Trigger entity\n# :return: Trigger entity\n# :rtype: dtlpy.entities.trigger.Trigger\n# \n# "
                    }
                ]
            },
            "delete": {
                "operationId": "Triggers_deleteTriggers",
                "responses": {
                    "204": {
                        "description": "No content"
                    }
                },
                "description": "Delete Trigger.",
                "tags": [
                    "Triggers"
                ],
                "parameters": [
                    {
                        "description": "Trigger Id.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "x-codeSamples": [
                    {
                        "lang": "Python",
                        "source": "\nservice.triggers.delete(trigger_id='trigger_id')\n\n# \n# Delete Trigger object\n# \n# **Prerequisites**: You must be in the role of an *owner* or *developer*. You must have a service.\n# \n# :param str trigger_id: trigger id\n# :param str trigger_name: trigger name\n# :return: True is successful error if not\n# :rtype: bool\n# \n# "
                    }
                ]
            }
        },
        "/ui-status": {
            "get": {
                "operationId": "Get OA Version",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IVersion"
                                }
                            }
                        }
                    }
                },
                "description": "Retrieves the latest OA versions.",
                "tags": [
                    "Version"
                ],
                "security": [],
                "parameters": []
            }
        },
        "/usage/accounts/{id}": {
            "get": {
                "operationId": "Get Account Usage Report",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/UsageReport"
                                    },
                                    "type": "array"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Usage"
                ],
                "security": [],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "startDate",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "endDate",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/usage/orgs/{id}": {
            "get": {
                "operationId": "Get Org Usage CSV",
                "responses": {
                    "204": {
                        "description": "No content"
                    }
                },
                "tags": [
                    "Usage"
                ],
                "security": [],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "startDate",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "endDate",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/users/groupsProjects": {
            "get": {
                "operationId": "Get my group projects",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "properties": {
                                            "role": {
                                                "$ref": "#/components/schemas/Role"
                                            },
                                            "project": {
                                                "type": "string"
                                            }
                                        },
                                        "required": [
                                            "role",
                                            "project"
                                        ],
                                        "type": "object"
                                    },
                                    "type": "array"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Users"
                ],
                "security": [],
                "parameters": []
            }
        },
        "/users/me": {
            "get": {
                "operationId": "Get me",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/APIUser"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Users"
                ],
                "security": [],
                "parameters": []
            },
            "post": {
                "operationId": "Update my details",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/APIUser"
                                },
                                "examples": {
                                    "Example 1": {
                                        "value": {
                                            "org": "myActiveOrgId"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Users"
                ],
                "security": [],
                "parameters": [],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/updateMyDetailsPayload"
                            }
                        }
                    }
                }
            }
        },
        "/users/orgs": {
            "get": {
                "operationId": "Get my orgs",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/APIOrgUser"
                                    },
                                    "type": "array"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Users"
                ],
                "security": [],
                "parameters": []
            }
        },
        "/users/{userId}": {
            "get": {
                "operationId": "Get user",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/APIUser"
                                }
                            }
                        }
                    }
                },
                "description": "Returns details of the logged in user",
                "tags": [
                    "Users"
                ],
                "security": [],
                "parameters": [
                    {
                        "in": "path",
                        "name": "userId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/users/{userId}/org": {
            "patch": {
                "operationId": "Update user org",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "anyOf": [
                                        {
                                            "$ref": "#/components/schemas/APIUser"
                                        },
                                        {}
                                    ]
                                },
                                "examples": {
                                    "Example 1": {
                                        "value": {
                                            "org_id": "myActiveOrgId",
                                            "skipResponse": true
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "description": "Change or add org to user",
                "tags": [
                    "Users"
                ],
                "security": [],
                "parameters": [
                    {
                        "in": "path",
                        "name": "userId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "skipResponse": {
                                        "type": "boolean"
                                    },
                                    "org_id": {
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "skipResponse",
                                    "org_id"
                                ],
                                "type": "object"
                            }
                        }
                    }
                }
            }
        },
        "/webhooks": {
            "get": {
                "operationId": "WebHooks_listWebHooks",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/WebHooksPage"
                                }
                            }
                        }
                    }
                },
                "description": "",
                "tags": [
                    "WebHooks"
                ],
                "parameters": [
                    {
                        "description": "",
                        "in": "query",
                        "name": "pageOffset",
                        "required": false,
                        "schema": {
                            "type": "number",
                            "format": "double"
                        }
                    },
                    {
                        "description": "",
                        "in": "query",
                        "name": "pageSize",
                        "required": false,
                        "schema": {
                            "type": "number",
                            "format": "double"
                        }
                    }
                ]
            },
            "post": {
                "operationId": "WebHooks_createWebHook",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/APIWebHook"
                                }
                            }
                        }
                    }
                },
                "description": "",
                "tags": [
                    "WebHooks"
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/APIWebHook"
                }
            }
        },
        "/webhooks/{ids}": {
            "delete": {
                "operationId": "WebHooks_deleteWebHooks",
                "responses": {
                    "204": {
                        "description": "No content"
                    }
                },
                "description": "",
                "tags": [
                    "WebHooks"
                ],
                "parameters": [
                    {
                        "description": "",
                        "in": "path",
                        "name": "ids",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/webhooks/{id}": {
            "get": {
                "operationId": "WebHooks_getWebHook",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/APIWebHook"
                                }
                            }
                        }
                    }
                },
                "description": "",
                "tags": [
                    "WebHooks"
                ],
                "parameters": [
                    {
                        "description": "",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "patch": {
                "operationId": "WebHooks_updateWebHook",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/APIWebHook"
                                }
                            }
                        }
                    }
                },
                "description": "",
                "tags": [
                    "WebHooks"
                ],
                "parameters": [
                    {
                        "description": "",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/APIWebHook"
                }
            }
        }
    },
    "servers": [
        {
            "url": "https://rc-gate.dataloop.ai/api/v1",
            "description": "Main Dataloop Gateway"
        }
    ],
    "basePath": "/api/v1",
    "host": "rc-gate.dataloop.ai",
    "schemes": [
        "https"
    ],
    "security": [
        {
            "bearerAuth": []
        }
    ]
}